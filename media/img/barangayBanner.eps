%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 6583.eps
%%Creator: Adobe Illustrator(R) 24.0
%%For: Jo
%%CreationDate: 1/17/2021
%%BoundingBox: 0 0 2071 1033
%%HiResBoundingBox: 0 0 2070.4632 1032.1576
%%CropBox: 0 0 2070.4632 1032.1576
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.0.1 x341 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.164050, 2019/10/01-18:03:16        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Multicultural people standing together</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Multicultural people standing together isolated flat vector illustration. Cartoon diverse characters of multinational community members. Society and public concept</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>people</rdf:li>
               <rdf:li>diverse</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>crowd</rdf:li>
               <rdf:li>person</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>society</rdf:li>
               <rdf:li>multicultural</rdf:li>
               <rdf:li>flat</rdf:li>
               <rdf:li>standing</rdf:li>
               <rdf:li>member</rdf:li>
               <rdf:li>portrait</rdf:li>
               <rdf:li>boy</rdf:li>
               <rdf:li>character</rdf:li>
               <rdf:li>community</rdf:li>
               <rdf:li>kid</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>man</rdf:li>
               <rdf:li>old</rdf:li>
               <rdf:li>smiling</rdf:li>
               <rdf:li>together</rdf:li>
               <rdf:li>woman</rdf:li>
               <rdf:li>young</rdf:li>
               <rdf:li>cartoon</rdf:li>
               <rdf:li>child</rdf:li>
               <rdf:li>civil</rdf:li>
               <rdf:li>cute</rdf:li>
               <rdf:li>different</rdf:li>
               <rdf:li>group</rdf:li>
               <rdf:li>multinational</rdf:li>
               <rdf:li>multiracial</rdf:li>
               <rdf:li>public</rdf:li>
               <rdf:li>various</rdf:li>
               <rdf:li>concept</rdf:li>
               <rdf:li>male</rdf:li>
               <rdf:li>female</rdf:li>
               <rdf:li>handicapped</rdf:li>
               <rdf:li>waving</rdf:li>
               <rdf:li>association</rdf:li>
               <rdf:li>united</rdf:li>
               <rdf:li>unity</rdf:li>
               <rdf:li>solidarity</rdf:li>
               <rdf:li>disabled</rdf:li>
               <rdf:li>girl</rdf:li>
               <rdf:li>population</rdf:li>
               <rdf:li>guy</rdf:li>
               <rdf:li>diversity</rdf:li>
               <rdf:li>social</rdf:li>
               <rdf:li>multiethnic</rdf:li>
               <rdf:li>adult</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-06-30T22:42:03+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-06-30T22:42:04+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-06-30T22:42:04+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYqwm71a8i8/LBIzyQApFHAlaUeMN/xM8mPtmFLIRlp3uPTxOjsUDzv4/q2Ztma6J2KuxV2KuxV&#xA;2KoS81SytNpXq/8Avtd2+7MbPq8eL6jv3N2PBKfJVtLuG6hE0Jqh232II7HLMOaOSPFHkwyYzA0V&#xA;bLWDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirDonEv5jyf8UxcR8/S&#xA;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&#xA;V2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:62BD27B809BBEA11ABBD9F5C18876EC6</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:62BD27B809BBEA11ABBD9F5C18876EC6</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:2266760d-bc6d-4849-868c-8ba560697f83</stRef:instanceID>
            <stRef:documentID>xmp.did:ABDC41D8FEA8EA11A287E2775BBECA3C</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:eec0b9b6-9468-e049-a837-558fddaeee4a</stEvt:instanceID>
                  <stEvt:when>2020-06-04T00:19:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:df053a70-a509-a740-b58f-2580d928da8c</stEvt:instanceID>
                  <stEvt:when>2020-06-07T21:05:27+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ABDC41D8FEA8EA11A287E2775BBECA3C</stEvt:instanceID>
                  <stEvt:when>2020-06-07T23:59:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2266760d-bc6d-4849-868c-8ba560697f83</stEvt:instanceID>
                  <stEvt:when>2020-06-17T19:42:45+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge 2019 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:62BD27B809BBEA11ABBD9F5C18876EC6</stEvt:instanceID>
                  <stEvt:when>2020-06-30T22:42:04+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2164.547368</stDim:w>
            <stDim:h>1032.157635</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=117 B=117</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>117</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=53 G=83 B=137</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>52</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>137</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=150 G=217 B=201</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>149</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>200</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=60 G=143 B=124</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>59</xmpG:red>
                           <xmpG:green>142</xmpG:green>
                           <xmpG:blue>124</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=204 B=127</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>126</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=140 B=127</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>140</xmpG:green>
                           <xmpG:blue>126</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=156 B=141</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=183 G=87 B=66</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>182</xmpG:red>
                           <xmpG:green>86</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=116 B=88</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>116</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=164 B=145</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>163</xmpG:green>
                           <xmpG:blue>144</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=224 B=178</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>223</xmpG:green>
                           <xmpG:blue>177</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=204 B=127 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>126</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=150 G=217 B=201 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>149</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>200</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=80 G=191 B=165</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>80</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>165</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=60 G=143 B=124 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>59</xmpG:red>
                           <xmpG:green>142</xmpG:green>
                           <xmpG:blue>124</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=24 G=70 B=85 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>24</xmpG:red>
                           <xmpG:green>70</xmpG:green>
                           <xmpG:blue>84</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=19 G=55 B=91</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>19</xmpG:red>
                           <xmpG:green>54</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=155 G=193 B=249</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>154</xmpG:red>
                           <xmpG:green>193</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=134 G=177 B=242 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>133</xmpG:red>
                           <xmpG:green>177</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=53 G=83 B=137 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>52</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>137</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=70 G=110 B=182 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>70</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>182</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1032.16 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1032.16 li
2070.46 1032.16 li
2070.46 0 li
cp
clp
929.758 929.275 mo
929.758 929.275 919.294 939.755 919.057 943.601 cv
918.819 947.447 918.13 988.647 922.401 992.493 cv
926.673 996.34 939.221 999.066 935.187 1003.39 cv
932.138 1006.66 908.682 1005.96 893.137 1005.09 cv
888.6 1004.83 882.908 967.668 881.111 962.207 cv
878.501 954.274 869.097 937.01 871.47 931.48 cv
872.627 928.787 881.214 922.646 889.009 917.479 cv
897.209 912.045 905.053 899.943 905.053 899.943 cv
929.758 929.275 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .555444 .426886 0 cmyk
f
1069.74 955.018 mo
1060.36 982.237 li
1059.66 986.539 1056.92 997.167 1056.92 1001.08 cv
1056.92 1015.77 1121.47 988.606 1107 982.097 cv
1105.69 981.508 1101.59 976.8 1101.16 971.801 cv
1100.49 964.097 1106.59 954.435 1106.59 954.435 cv
1069.74 955.018 li
cp
0 .429175 .372961 0 cmyk
f
1177.5 441.634 mo
1177.5 441.634 1182.37 486.559 1182.37 487.284 cv
1182.37 566.02 1191.44 719.817 1188.55 734.619 cv
1181.5 770.726 1104.45 967.24 1104.45 967.24 cv
1064.53 961.463 li
1118 729.354 li
1098.33 640.594 li
1070.48 465.141 li
1177.5 441.634 li
cp
.910643 .619043 .490486 .35346 cmyk
f
1027.04 480.937 mo
1019.25 527.069 li
998.181 716.929 li
895.06 909.598 li
895.06 909.598 910.566 933.704 927.216 937.496 cv
1073.58 742.768 li
1152.91 498.99 li
1150.12 444.83 li
1027.04 480.937 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
1181.13 321.996 mo
1124.23 327.958 li
1124.23 327.958 1121.62 280.076 1121.62 257.235 cv
1121.62 229.524 1124.67 194.243 1127.93 195.011 cv
1137.08 197.167 1148.65 201.941 1155.99 212.288 cv
1181.38 248.092 1181.13 321.996 1181.13 321.996 cv
cp
.779355 .574121 0 0 cmyk
f
970.691 551.984 mo
962.01 537.57 960.062 539.617 958.996 537.739 cv
957.736 535.518 959.135 501.209 959.135 501.209 cv
959.135 501.209 962.616 400.061 962.987 394.607 cv
1007.44 301.225 li
969.014 264.567 li
969.014 264.567 923.259 367.528 921.773 373.357 cv
920.288 379.188 930.87 516.653 931.427 528.783 cv
931.427 528.783 926.972 543.45 924.465 552.759 cv
921.959 562.068 923.569 572.104 923.252 574.842 cv
923.205 575.246 922.657 584.436 924.876 595.968 cv
926.789 605.906 929.332 595.615 929.332 595.615 cv
929.332 595.615 928.954 576.572 930.399 576.816 cv
931.513 577.004 931.13 587.409 933.137 598.428 cv
933.653 601.262 934.171 604.056 934.668 606.618 cv
935.971 613.347 940.296 614.479 940.006 607.223 cv
939.904 604.661 939.635 600.408 939.031 597.401 cv
938.38 594.151 938.786 590.958 938.638 588.145 cv
938.343 582.557 938.061 578.486 938.289 578.602 cv
938.585 578.752 939.276 577.609 939.914 580.6 cv
940.679 584.194 940.689 592.19 942.207 597.391 cv
943.068 600.34 944.508 606.612 944.508 606.612 cv
944.508 606.612 948.381 615.688 948.964 615.636 cv
952.12 615.354 951.145 608.397 949.475 604.545 cv
949.614 601.537 947.919 594.98 947.919 594.98 cv
947.919 594.98 947.339 580.952 949.242 580.858 cv
950.053 580.817 951.396 589.388 953.977 597.589 cv
956.372 605.203 959.983 612.501 961.495 612.252 cv
964.06 611.829 962.261 603.088 962.261 603.088 cv
962.261 603.088 960.687 597.031 960.312 594.98 cv
959.872 592.575 959.082 585.275 959.082 585.275 cv
959.082 585.275 957.464 559.74 959.274 559.813 cv
961.085 559.883 965.679 561.997 966.306 563.549 cv
966.932 565.1 966.654 568.556 967.28 570.107 cv
967.907 571.658 969.995 573.141 971.875 572.505 cv
973.755 571.87 973.477 563.195 973.477 563.195 cv
973.477 563.195 973.198 556.144 970.691 551.984 cv
cp
0 .432166 .36405 0 cmyk
f
1153.18 252.348 mo
1154.37 260.796 1182.43 487.313 1182.43 487.313 cv
1078.81 538.676 1011.24 523.271 1011.24 523.271 cv
1011.24 523.271 1018.85 338.344 1014.78 316.391 cv
1012.09 301.866 1008.74 205.351 1017.91 202.647 cv
1029.68 199.178 1043.17 195.494 1057.88 193.928 cv
1070.44 192.59 1119.2 191.815 1127.93 194.823 cv
1127.93 194.823 1148.16 216.817 1153.18 252.348 cv
cp
.438422 .220615 0 0 cmyk
f
943.951 300.097 mo
993.248 334.068 li
993.248 334.068 1021.03 291.631 1035.95 276.523 cv
1054.63 257.598 1029.14 199.621 1017.1 202.901 cv
990.178 210.238 943.951 300.097 943.951 300.097 cv
cp
.779355 .574121 0 0 cmyk
f
889.517 917.219 mo
889.517 917.219 913.633 986.912 923.073 990.277 cv
925.579 991.17 937.608 993.437 939.877 998.896 cv
940.56 1000.54 939.877 1006.03 939.877 1006.03 cv
889.609 1006.03 li
889.609 1006.03 883.251 975.326 880.738 961.834 cv
880.738 961.834 867.433 928.869 868.911 925.873 cv
870.389 922.877 889.517 917.219 889.517 917.219 cv
cp
.765408 .245823 .578759 .0504158 cmyk
f
1053.25 1005.92 mo
1060.64 981.957 li
1060.64 981.957 1076.17 988.698 1083.93 987.575 cv
1091.69 986.451 1106.84 981.957 1106.84 981.957 cv
1137.83 992.424 1163.21 997.504 1158.59 1005.92 cv
1053.25 1005.92 li
cp
f
1254.9 511.935 mo
1260.19 516.58 1266 518.482 1272.77 517.068 cv
1266.44 521.881 1257.62 518.194 1254.9 511.935 cv
cp
0 .583276 .639704 0 cmyk
f
1071.65 146.765 mo
1064.03 194.602 li
1064.03 194.602 1091.94 255.469 1108.61 250.345 cv
1122.6 246.046 1114 193.768 1114 193.768 cv
1114 193.768 1106.37 165.693 1108.66 151.645 cv
1110.94 137.596 1071.65 146.765 1071.65 146.765 cv
cp
0 .429175 .372961 0 cmyk
f
1108.66 151.645 mo
1110.94 137.596 1071.65 146.765 1071.65 146.765 cv
1071.02 150.881 li
1072.17 153.634 1073.58 155.99 1075.28 157.797 cv
1084.06 167.093 1097.77 172.677 1109.63 173.099 cv
1108.45 165.524 1107.72 157.405 1108.66 151.645 cv
cp
0 .683528 .667628 0 cmyk
f
1065.21 76.5645 mo
1064.1 76.167 1056.31 133.08 1071.09 148.739 cv
1085.88 164.398 1114.68 169.523 1125.01 157.19 cv
1136.44 143.549 1135.86 82.3809 1112.88 66.2725 cv
1089.89 50.1641 1065.21 76.5645 1065.21 76.5645 cv
cp
0 .429175 .372961 0 cmyk
f
1070.63 54.6362 mo
1062.56 55.5742 1051.6 59.9624 1040.28 78.415 cv
1026.35 101.104 1036.63 126.242 1052.84 138.575 cv
1069.05 150.908 1068.76 165.034 1068.76 165.034 cv
1071.38 157.786 li
1073.27 152.204 1074.05 146.284 1073.41 140.429 cv
1073.03 136.916 1072.27 133.117 1070.79 129.994 cv
1066.89 121.757 1079.16 116.285 1082.6 109.433 cv
1085.25 104.156 1085.38 92.0845 1089.56 83.3623 cv
1094.54 76.7041 li
1094.54 76.7041 1106.04 67.895 1117.29 70.3809 cv
1128.54 72.8662 1114.72 18.834 1070.63 54.6362 cv
cp
.0223392 .19971 .57882 0 cmyk
f
1081.85 119.561 mo
1081.96 126.504 1078.76 132.188 1074.69 132.257 cv
1070.61 132.325 1067.22 126.752 1067.1 119.808 cv
1066.98 112.864 1070.19 107.18 1074.26 107.112 cv
1078.33 107.043 1081.73 112.617 1081.85 119.561 cv
cp
0 .429175 .372961 0 cmyk
f
307.691 582.396 mo
222.28 582.396 li
215.229 582.396 209.511 588.111 209.511 595.164 cv
209.511 643.106 li
223.794 643.106 li
223.794 597.655 li
307.691 597.655 li
307.691 582.396 li
cp
.994293 .80737 .385443 .299168 cmyk
f
324.017 550.02 mo
297.543 522.088 li
297.543 522.088 269.205 537.673 236.17 552.563 cv
227.088 536.757 212.267 484.763 211.47 482.283 cv
210.67 479.795 228.83 448.563 224.768 447.779 cv
220.706 446.996 215.431 464.459 211.137 462.688 cv
206.844 460.919 195.803 420.406 193.219 422.617 cv
188.384 426.754 199.027 447.815 196.478 449.35 cv
193.929 450.884 187.464 426.004 182.542 427.065 cv
177.62 428.126 190.854 449.715 189.402 451.79 cv
187.949 453.865 174.118 433.611 171.26 438.303 cv
169.709 440.85 184.019 455.939 181.076 457.627 cv
178.132 459.315 165.235 449.812 163.695 452.891 cv
162.156 455.97 175.729 459.177 179.498 466.968 cv
183.266 474.76 190.119 477.791 192.392 492.521 cv
194.663 507.238 200.882 585.98 216.933 592.304 cv
230.947 597.823 324.017 550.02 324.017 550.02 cv
cp
0 .429175 .372961 0 cmyk
f
568.216 913.031 mo
570.307 898.18 570.142 870.76 569.081 841.83 cv
582.036 841.173 592.999 840.353 605.943 839.498 cv
600.552 876.442 596.927 914.488 596.927 914.488 cv
597.813 921.792 li
598.29 943.433 li
524.969 943.979 li
524.969 943.979 540.422 937.129 562.039 923.59 cv
563.637 922.589 567.32 919.396 568.216 913.031 cv
cp
f
600.265 948.082 mo
522.952 948.995 li
520.153 948.744 519.471 946.48 520.441 945.085 cv
522.44 942.213 531.27 940.104 541.194 935.527 cv
558.603 937.343 595.023 925.448 597.771 921.451 cv
599.357 929.455 601.821 947.74 600.265 948.082 cv
cp
0 .683528 .667628 0 cmyk
f
699.584 897.73 mo
693.532 884.006 678.939 860.792 662.788 836.767 cv
673.452 829.379 684.023 821.857 694.574 814.309 cv
709.464 848.547 724.749 883.835 724.749 883.835 cv
729.352 889.575 li
741.164 907.714 li
679.143 946.824 li
679.143 946.824 688.665 932.857 699.898 909.959 cv
700.729 908.266 702.176 903.611 699.584 897.73 cv
cp
0 .429175 .372961 0 cmyk
f
744.394 912.256 mo
680.073 952.15 li
677.562 953.413 675.789 951.849 675.878 950.151 cv
676.062 946.656 682.455 940.211 688.476 931.09 cv
704.228 923.457 728.76 893.967 728.988 889.121 cv
734.555 895.088 745.536 911.146 744.394 912.256 cv
cp
0 .683528 .667628 0 cmyk
f
669.425 293.836 mo
675.16 265.879 657.176 238.162 631.96 227.757 cv
632.128 211.848 626.976 191.695 616.113 180.804 cv
594.683 159.318 553.789 151.788 538.029 179.178 cv
517.214 190.955 500.84 216.457 507.047 239.689 cv
486.873 260.583 494.536 298.387 523.95 316.239 cv
523.484 339.682 535.878 362.981 556.377 372.999 cv
561.297 375.403 568.996 378.755 569.97 379.795 cv
568.688 378.582 585.154 424.434 636.308 403.449 cv
688.506 382.035 703.446 321.761 669.425 293.836 cv
cp
.894041 .730465 .20148 .0501106 cmyk
f
566.867 892.056 mo
573.219 856.837 551.159 769.518 537.706 731.123 cv
523.714 691.192 514.817 522.207 514.817 522.207 cv
530.68 503.659 li
595.42 499.782 li
595.42 499.782 567.875 584.419 567.875 613.5 cv
567.875 642.58 581.276 717.65 597.017 756.713 cv
611.537 792.748 605.504 868.305 601.109 893.152 cv
589.402 895.044 578.301 894.358 566.867 892.056 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
611.783 507.639 mo
614.752 510.602 632.148 531.207 632.148 545.611 cv
632.148 560.014 599.356 689.643 607.226 697.499 cv
615.096 705.355 644.21 725.025 662.788 752.43 cv
678.44 775.517 714.334 842.273 721.184 858.153 cv
707.659 867.563 695.916 871.853 682.367 876.391 cv
680.192 864.572 574.168 747.691 562.058 723.25 cv
549.948 698.809 543.39 587.074 537.268 572.234 cv
531.147 557.395 514.817 519.695 514.817 519.695 cv
611.783 507.639 li
cp
.765408 .245823 .578729 .0504158 cmyk
f
517.334 412.106 mo
517.334 412.106 477.368 457.722 433.133 474.886 cv
426.218 477.569 420.271 482.817 420.271 482.817 cv
420.271 487.473 429.595 481.94 429.595 481.94 cv
429.595 481.94 425.79 488.633 427.248 494.161 cv
428.705 499.689 438.35 496.016 443.597 496.016 cv
446 496.016 458.333 482.213 474.986 474.101 cv
494.694 464.502 517.948 455.105 520.792 452.268 cv
526.039 447.029 518.889 410.435 517.334 412.106 cv
cp
0 .471839 .377081 0 cmyk
f
598.627 283.734 mo
598.627 283.734 558.401 279.66 537.414 293.045 cv
516.427 306.43 503.018 354.149 503.018 374.518 cv
503.018 394.886 518.149 501.965 512.333 522.333 cv
512.333 522.333 578.806 519.423 601.542 519.423 cv
624.278 519.423 628.942 510.693 628.942 510.693 cv
628.942 510.693 581.721 464.138 581.721 443.77 cv
581.721 423.401 598.627 283.734 598.627 283.734 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
106.91 830.445 mo
56.9654 830.445 li
57.8717 816.429 68.5694 805.327 81.5924 805.327 cv
106.91 805.327 li
106.91 830.445 li
cp
49.3531 832.375 mo
49.3531 902.14 li
56.9014 902.14 li
56.9014 838.713 li
106.91 838.713 li
106.91 860.484 li
87.5767 862.561 72.4703 880.417 72.4703 902.139 cv
72.4703 925.257 89.5792 943.997 110.684 943.997 cv
131.789 943.997 148.898 925.257 148.898 902.139 cv
148.898 880.416 133.792 862.561 114.458 860.484 cv
114.458 838.713 li
124.837 838.713 li
124.837 830.445 li
114.458 830.445 li
114.458 805.327 li
124.837 805.327 li
124.837 797.059 li
114.458 797.059 li
114.458 769.115 li
251.274 769.115 li
251.274 756.713 li
175.681 756.713 li
175.681 685.675 li
175.681 666.7 193.124 645.479 216.465 645.479 cv
281.467 645.479 li
281.467 633.077 li
216.465 633.077 li
188.708 633.077 164.358 657.655 164.358 685.675 cv
164.358 756.713 li
114.458 756.713 li
114.458 716.865 li
106.91 716.865 li
106.91 797.059 li
81.5924 797.059 li
63.8155 797.059 49.3531 812.901 49.3531 832.375 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
78.9835 843.33 mo
80.5152 870.287 li
81.0748 873.702 83.2789 882.141 83.2789 885.245 cv
83.2789 896.91 31.3804 875.344 43.0113 870.175 cv
44.065 869.707 50.0572 863.246 51.5611 859.557 cv
54.2408 852.985 55.4136 840.105 55.4136 840.105 cv
78.9835 843.33 li
cp
0 .555444 .426886 0 cmyk
f
43.1407 870.064 mo
43.1407 870.064 55.3248 873.633 61.566 874.523 cv
67.8062 875.416 76.0338 867.905 80.4478 869.934 cv
85.3062 872.168 85.586 892.679 85.586 892.679 cv
85.586 892.679 20.3531 894.85 1.40095 892.07 cv
-6.16595 890.961 18.2305 878.375 43.1407 870.064 cv
cp
.779355 .574121 0 0 cmyk
f
338.796 785.865 mo
353.133 785.865 li
353.133 512.727 li
353.133 503.512 362.154 496.016 373.245 496.016 cv
502.213 496.016 li
505.656 496.016 508.446 493.349 508.446 490.059 cv
508.446 486.77 505.656 484.103 502.213 484.103 cv
373.245 484.103 li
354.251 484.103 338.796 496.943 338.796 512.727 cv
338.796 785.865 li
cp
.994293 .80737 .385443 .299168 cmyk
f
271.582 728.568 mo
319.362 728.568 358.097 767.648 358.097 815.858 cv
358.097 864.068 319.362 903.148 271.582 903.148 cv
223.801 903.148 185.066 864.068 185.066 815.858 cv
185.066 767.648 223.801 728.568 271.582 728.568 cv
cp
f
176.215 815.858 mo
176.215 762.718 218.913 719.638 271.582 719.638 cv
324.251 719.638 366.948 762.718 366.948 815.858 cv
366.948 869 324.251 912.079 271.582 912.079 cv
218.913 912.079 176.215 869 176.215 815.858 cv
cp
166.233 815.858 mo
166.233 874.563 213.399 922.15 271.582 922.15 cv
329.764 922.15 376.93 874.563 376.93 815.858 cv
376.93 757.154 329.764 709.565 271.582 709.565 cv
213.399 709.565 166.233 757.154 166.233 815.858 cv
cp
f
340.75 694.744 mo
383.076 694.744 li
383.076 530.757 li
340.75 530.757 li
340.75 694.744 li
cp
.779355 .574121 0 0 cmyk
f
131.086 902.14 mo
139.281 902.14 li
139.281 832.375 li
139.281 817.461 151.305 805.327 166.086 805.327 cv
213.034 805.327 li
213.034 797.059 li
166.086 797.059 li
146.788 797.059 131.086 812.901 131.086 832.375 cv
131.086 902.14 li
cp
.438422 .220615 0 0 cmyk
f
187.084 705.299 mo
75.7711 705.299 li
75.7711 724.395 li
187.084 724.395 li
187.084 705.299 li
cp
.994293 .80737 .385443 .299168 cmyk
f
135.184 838.713 mo
213.034 838.713 li
213.034 830.445 li
135.184 830.445 li
135.184 838.713 li
cp
.438422 .220615 0 0 cmyk
f
197.669 769.115 mo
350.297 769.115 li
350.297 756.713 li
197.669 756.713 li
197.669 769.115 li
cp
f
383.076 705.01 mo
184.352 705.01 li
184.352 724.395 li
383.076 724.395 li
383.076 705.01 li
cp
.994293 .80737 .385443 .299168 cmyk
f
376.93 800.48 mo
389.223 800.48 li
389.223 527.341 li
389.223 518.127 396.958 510.631 406.466 510.631 cv
522.388 510.631 li
522.388 498.718 li
406.466 498.718 li
390.181 498.718 376.93 511.559 376.93 527.341 cv
376.93 800.48 li
cp
.438422 .220615 0 0 cmyk
f
151.542 902.14 mo
151.542 925.257 172.194 943.997 197.669 943.997 cv
223.144 943.997 243.795 925.257 243.795 902.14 cv
243.795 879.021 223.144 860.281 197.669 860.281 cv
172.194 860.281 151.542 879.021 151.542 902.14 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
169.582 902.14 mo
169.582 916.216 182.157 927.627 197.669 927.627 cv
213.181 927.627 225.755 916.216 225.755 902.14 cv
225.755 888.063 213.181 876.651 197.669 876.651 cv
182.157 876.651 169.582 888.063 169.582 902.14 cv
cp
.35523 .161532 0 0 cmyk
f
197.924 924.016 mo
197.925 924.016 li
203.865 924.016 208.681 919.2 208.681 913.26 cv
208.681 884.225 li
187.169 884.225 li
187.169 913.26 li
187.169 919.2 191.985 924.016 197.924 924.016 cv
cp
.438422 .220615 0 0 cmyk
f
85.1783 633.077 mo
98.5167 619.738 284.419 626.168 284.419 626.168 cv
284.419 626.168 126.926 664.602 117.731 669.615 cv
108.535 674.627 74.3111 843.766 74.272 845.979 cv
64.7716 843.717 59.0196 845.429 49.3531 843.447 cv
50.899 814.059 63.6866 654.568 85.1783 633.077 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
103.297 844.149 mo
104.829 871.105 li
105.388 874.521 107.592 882.961 107.592 886.065 cv
107.592 897.729 55.6939 876.164 67.3248 870.994 cv
68.378 870.526 75.5289 864.346 75.8746 860.376 cv
76.4083 854.26 76.126 844.527 76.126 844.527 cv
103.297 844.149 li
cp
0 .429175 .372961 0 cmyk
f
67.4542 870.884 mo
67.4542 870.884 79.6383 874.451 85.879 875.344 cv
92.1197 876.236 100.347 868.725 104.761 870.754 cv
109.62 872.986 109.899 893.498 109.899 893.498 cv
109.899 893.498 44.6666 895.669 25.7134 892.89 cv
18.1475 891.78 42.544 879.194 67.4542 870.884 cv
cp
.779355 .574121 0 0 cmyk
f
313.403 664.343 mo
313.403 664.343 311.798 706.543 297.753 707.047 cv
283.706 707.552 193.572 709.565 142.804 705.01 cv
108.647 855.976 li
68.5338 852.112 li
68.5338 852.112 80.6158 751.285 84.9117 712.936 cv
89.1383 675.208 101.322 643.552 122.652 642.786 cv
143.982 642.02 284.208 620.322 284.208 620.322 cv
313.403 664.343 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
351.211 467.341 mo
351.211 467.341 373.968 473.112 370.882 517.561 cv
367.796 562.009 343.212 696.488 297.753 707.047 cv
252.293 717.605 222.681 621.877 222.681 621.877 cv
222.681 621.877 251.364 612.451 263.307 567.956 cv
271.582 537.131 293.762 467.567 299.316 464.221 cv
313.107 455.91 351.211 467.341 351.211 467.341 cv
cp
.644587 0 .448096 0 cmyk
f
255.939 766.262 mo
268.231 766.262 li
268.231 685.675 li
268.231 666.701 287.168 645.479 312.508 645.479 cv
383.076 645.479 li
383.076 633.076 li
312.508 633.076 li
282.374 633.076 255.939 657.655 255.939 685.675 cv
255.939 766.262 li
cp
.438422 .220615 0 0 cmyk
f
283.714 827.375 mo
283.714 882.742 328.2 927.627 383.076 927.627 cv
437.953 927.627 482.438 882.742 482.438 827.375 cv
482.438 772.007 437.953 727.122 383.076 727.122 cv
328.2 727.122 283.714 772.007 283.714 827.375 cv
cp
.35523 .161532 0 0 cmyk
f
273.549 827.375 mo
273.549 766.342 322.586 716.865 383.076 716.865 cv
443.566 716.865 492.603 766.342 492.603 827.375 cv
492.603 888.406 443.566 937.883 383.076 937.883 cv
322.586 937.883 273.549 888.406 273.549 827.375 cv
cp
262.084 827.375 mo
262.084 894.795 316.254 949.45 383.076 949.45 cv
449.898 949.45 504.068 894.795 504.068 827.375 cv
504.068 759.953 449.898 705.299 383.076 705.299 cv
316.254 705.299 262.084 759.953 262.084 827.375 cv
cp
f
301.128 827.375 mo
301.128 873.039 337.817 910.057 383.076 910.057 cv
428.335 910.057 465.024 873.039 465.024 827.375 cv
465.024 781.71 428.335 744.692 383.076 744.692 cv
337.817 744.692 301.128 781.71 301.128 827.375 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
364.637 827.375 mo
364.637 837.648 372.893 845.979 383.076 845.979 cv
393.259 845.979 401.515 837.648 401.515 827.375 cv
401.515 817.1 393.259 808.771 383.076 808.771 cv
372.893 808.771 364.637 817.1 364.637 827.375 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
17.5865 914.851 mo
142.695 914.851 li
142.695 893.182 li
17.5865 893.182 li
17.5865 914.851 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
71.6739 914.851 mo
142.695 914.851 li
142.695 893.182 li
71.6739 893.182 li
71.6739 914.851 li
cp
.438422 .220615 0 0 cmyk
f
193.572 914.852 mo
201.766 914.852 li
201.766 724.164 li
193.572 724.164 li
193.572 914.852 li
cp
f
192.803 904.572 mo
192.803 907.391 195.068 909.676 197.861 909.676 cv
200.654 909.676 202.919 907.391 202.919 904.572 cv
202.919 901.754 200.654 899.47 197.861 899.47 cv
195.068 899.47 192.803 901.754 192.803 904.572 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
337.471 348.34 mo
337.471 348.34 353.413 337.563 360.153 356.441 cv
360.101 356.292 365.782 356.347 366.549 356.606 cv
369.828 357.715 372.996 361.13 375.919 363.001 cv
386.33 369.666 391.129 382.615 391.696 394.505 cv
392.384 408.937 386.419 419.49 376.929 429.911 cv
374.133 432.982 371.145 435.979 367.483 437.941 cv
363.065 440.31 359.573 438.431 355.421 439.436 cv
351.925 440.281 350.697 443.974 346.574 442.642 cv
340.794 440.775 334.726 433.538 327.56 434.609 cv
320.403 435.68 303.876 429.238 303.833 429.222 cv
282.6 420.942 296.938 379.851 301.007 365.266 cv
304.833 351.553 324.336 343.38 337.471 348.34 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
318.289 441.71 mo
312.773 456.758 li
309.801 465.168 li
309.801 465.168 309.595 480.221 313.105 484.121 cv
319.146 490.834 343.992 465.957 343.992 465.957 cv
351.861 418.623 li
318.289 441.71 li
cp
0 .429175 .372961 0 cmyk
f
349.308 433.963 mo
339.859 448.612 323.579 455.307 312.721 456.899 cv
318.289 441.709 li
351.861 418.623 li
349.308 433.963 li
cp
0 .683528 .667628 0 cmyk
f
345.408 370.001 mo
332.757 362.264 316.154 368.137 310.947 381.789 cv
308.684 387.724 306.159 395.256 304.143 403.657 cv
299.294 423.861 305.436 445.924 314.647 447.958 cv
323.859 449.992 352.217 442.482 359.499 413.887 cv
363.995 396.232 358.684 378.12 345.408 370.001 cv
cp
0 .429175 .372961 0 cmyk
f
352.209 414.666 mo
351.22 419.141 353.386 423.424 357.045 424.231 cv
360.704 425.039 364.472 422.066 365.46 417.592 cv
366.449 413.117 364.283 408.834 360.624 408.025 cv
356.964 407.218 353.197 410.189 352.209 414.666 cv
cp
f
323.759 423.049 mo
323.759 423.049 335.899 427.013 336.89 431.473 cv
337.881 435.932 336.395 442.374 330.448 447.328 cv
324.502 452.284 311.784 449.229 308.315 446.503 cv
304.847 443.777 302.204 432.216 305.672 425.773 cv
309.141 419.332 323.759 423.049 323.759 423.049 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
327.723 432.381 mo
327.723 432.381 327.65 437.35 325.989 438.244 cv
324.378 439.111 322.341 439.842 320.455 440.02 cv
317.4 440.309 314.642 439.006 313.036 436.652 cv
312.877 436.42 312.733 436.18 312.61 435.932 cv
311.371 433.454 311.123 429.077 311.123 429.077 cv
311.123 429.077 316.244 427.839 319.216 428.334 cv
322.19 428.83 327.723 432.381 327.723 432.381 cv
cp
0 .429175 .372961 0 cmyk
f
459.003 490.325 mo
463.812 485.524 486.111 478.104 503.018 465.884 cv
510.495 460.479 524.868 453.366 538.855 445.629 cv
549.073 451.291 558.315 458.398 565.214 466.901 cv
539.905 478.533 512.439 490.232 508.265 494.399 cv
500.394 502.256 486.695 520.005 483.488 520.005 cv
480.282 520.005 455.942 512.876 452.298 509.238 cv
448.655 505.602 454.193 495.126 459.003 490.325 cv
cp
0 .471839 .377081 0 cmyk
f
538.855 445.629 mo
556.496 435.871 573.519 425.121 575.308 415.545 cv
578.514 398.378 563.94 324.179 572.101 309.921 cv
580.263 295.664 598.627 283.734 598.627 283.734 cv
601.542 283.734 612.036 290.135 614.95 302.938 cv
617.866 315.741 612.619 430.967 609.704 441.442 cv
608.335 446.361 588.385 465.941 565.98 476.238 cv
559.081 467.736 549.073 451.291 538.855 445.629 cv
cp
0 .683528 .667628 0 cmyk
f
357.131 601.028 mo
286.794 619.458 li
286.794 619.458 266.116 634.37 256.815 637.33 cv
247.515 640.29 236.15 650.535 238.378 653.68 cv
240.606 656.824 252.29 646.145 254.188 646.47 cv
256.086 646.795 247.322 659.436 245.899 667.725 cv
244.476 676.014 241.629 684.06 246.381 683.41 cv
251.133 682.76 254.582 664.091 254.582 664.091 cv
254.582 664.091 261.889 649.981 263.069 651.646 cv
264.248 653.311 258.189 663.001 258.189 663.001 cv
258.189 663.001 256.751 673.474 256.118 677.158 cv
255.646 679.908 258.176 688.157 260.333 685.126 cv
261.601 683.344 261.003 676.533 262.475 672.647 cv
265.496 664.675 270.429 658.354 270.429 658.354 cv
270.429 658.354 265.145 682.231 268.466 682.799 cv
271.788 683.367 275.224 663.589 275.224 663.589 cv
275.224 663.589 283.34 647.117 286.882 645.646 cv
290.423 644.178 300.162 637.904 307.693 635.291 cv
315.224 632.68 346.357 641.29 360.248 641.473 cv
374.137 641.654 396.677 633.057 398.547 622.162 cv
399.118 618.833 397.041 615.154 393.879 611.651 cv
384.694 601.473 370.406 597.55 357.131 601.028 cv
cp
0 .429175 .372961 0 cmyk
f
351.211 467.341 mo
351.211 467.341 372.49 463.553 391.753 498.205 cv
411.016 532.857 398.547 622.162 398.547 622.162 cv
357.131 601.028 li
351.211 467.341 li
cp
.40003 0 .261753 0 cmyk
f
456.856 485.318 mo
456.856 485.318 448.473 497.248 445.976 497.248 cv
443.479 497.248 430.376 498.069 428.317 496.016 cv
426.26 493.961 435.72 478.464 439.109 478.464 cv
442.498 478.464 435.095 488.701 435.988 489.592 cv
436.879 490.482 444.192 473.39 447.938 474.992 cv
451.684 476.595 440.625 488.523 441.874 489.77 cv
443.122 491.016 450.97 476.238 454.003 476.238 cv
457.034 476.238 446.871 489.596 447.938 490.66 cv
449.004 491.726 455.429 483.895 456.856 485.318 cv
cp
0 .555444 .426886 0 cmyk
f
577.74 247.826 mo
577.74 247.826 573.26 272.451 574.157 282.165 cv
575.053 291.878 570.741 323.185 551.395 323.288 cv
532.048 323.391 545.196 290.784 547.018 281.265 cv
548.84 271.746 551.797 234.982 551.797 234.982 cv
577.74 247.826 li
cp
0 .429175 .372961 0 cmyk
f
550.603 248.923 mo
550.904 240.862 552.36 234.454 552.36 234.454 cv
577.74 247.826 li
577.74 247.826 576.824 252.861 575.903 259.276 cv
564.547 261.702 555.523 256.393 550.603 248.923 cv
cp
0 .683528 .667628 0 cmyk
f
578.291 176.29 mo
578.291 176.29 589.191 180.172 595.123 192.023 cv
601.055 203.875 603.01 237.051 579.1 249.795 cv
555.19 262.54 539.417 239.034 540.901 217.972 cv
542.386 196.909 549.013 169.313 578.291 176.29 cv
cp
0 .429175 .372961 0 cmyk
f
533.795 212.104 mo
533.166 217.564 535.096 222.222 538.108 222.508 cv
541.12 222.793 544.073 218.599 544.703 213.139 cv
545.332 207.679 543.401 203.021 540.389 202.735 cv
537.378 202.449 534.425 206.644 533.795 212.104 cv
cp
f
593.015 221.295 mo
590.914 226.581 591.961 232.129 595.353 233.688 cv
598.746 235.247 603.2 232.226 605.301 226.94 cv
607.404 221.654 606.357 216.106 602.964 214.547 cv
599.571 212.988 595.118 216.01 593.015 221.295 cv
cp
f
1455.7 334.244 mo
1459.82 315.5 li
1459.82 315.5 1473.31 324.058 1481.18 336.281 cv
1489.04 348.505 1492.79 381.103 1495.03 382.325 cv
1497.28 383.548 1522.17 345.201 1526.52 339.156 cv
1531.91 331.681 1533.92 323.1 1537.29 316.58 cv
1540.66 310.061 1552.53 307.841 1557.02 308.656 cv
1561.52 309.471 1550.85 328.54 1550.85 328.54 cv
1550.85 328.54 1523.88 375.398 1514.89 401.068 cv
1505.9 426.739 1477.8 438.963 1473.31 435.297 cv
1468.81 431.629 1455.7 334.244 1455.7 334.244 cv
cp
0 .555444 .426886 0 cmyk
f
1537.59 320.168 mo
1537.59 320.168 1538.71 315.234 1541.74 314.225 cv
1544.76 313.216 1550.03 314.113 1550.37 314.225 cv
1550.71 314.337 1556.54 311.197 1556.54 311.197 cv
1551.72 320.168 li
1551.72 320.168 1542.3 331.27 1539.16 327.12 cv
1536.02 322.972 1537.59 320.168 1537.59 320.168 cv
cp
0 .429175 .372961 0 cmyk
f
1558.22 311.608 mo
1558.22 311.608 1561.62 328.915 1560.76 332.54 cv
1559.9 336.177 1557.73 334.228 1557.32 333.438 cv
1555.65 330.185 1554.48 319.084 1554.48 319.084 cv
1558.22 311.608 li
cp
0 .555444 .426886 0 cmyk
f
1550.89 325.999 mo
1550.89 325.999 1552.52 336.732 1554.18 337.997 cv
1555.27 338.82 1556.65 338.334 1557.1 336.166 cv
1557.55 333.998 1554.93 320.767 1554.93 320.767 cv
1550.89 325.999 li
cp
f
1540.98 356.455 mo
1535.34 353.703 li
1559.31 304.515 li
1562.43 306.034 1563.72 309.793 1562.2 312.91 cv
1540.98 356.455 li
cp
.910643 .619043 .490486 .35346 cmyk
f
1480.73 257.168 mo
1484.11 241.786 1487.43 226.306 1478.51 209.406 cv
1471.29 195.73 1458.81 187.861 1444.36 186.148 cv
1403.44 181.292 1412.19 219.499 1354.98 227.77 cv
1337.21 230.339 1320.7 232.81 1305.86 241.649 cv
1279.06 257.611 1268.95 283.216 1286.72 324.929 cv
1330.23 427.07 1437.04 340.359 1450.23 320.247 cv
1460.05 305.285 1478.55 267.07 1480.73 257.168 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
1317.06 902.367 mo
1317.06 902.367 1314.14 931.956 1306.65 937.39 cv
1299.16 942.822 1289.17 962.924 1294.16 973.79 cv
1295.73 977.186 1298.85 979.148 1302.4 980.243 cv
1312.93 983.483 1324.12 978.026 1328.61 967.966 cv
1331.11 962.346 1333.3 954.85 1333.75 945.403 cv
1334.87 921.362 1342.36 909.139 1342.36 909.139 cv
1317.06 902.367 li
cp
0 .429175 .372961 0 cmyk
f
1432.18 914.478 mo
1432.18 914.478 1434.54 944.334 1432.63 954.038 cv
1431.6 959.233 1425.88 969.93 1428.51 974.818 cv
1431.13 979.709 1434.12 980.931 1434.12 980.931 cv
1502.08 982.023 li
1505.78 982.083 1503.34 979.705 1500.35 977.516 cv
1495.47 973.93 1491.52 971.561 1475.92 964.026 cv
1474.9 963.535 1471.19 961.184 1469.86 960.369 cv
1466.47 958.305 1463.07 955.055 1460.14 951.799 cv
1455.26 946.378 1454.83 920.085 1454.83 920.085 cv
1432.18 914.478 li
cp
f
1485.3 517.604 mo
1485.3 517.604 1493.85 566.082 1488.23 597.862 cv
1482.62 629.644 1455.65 924.229 1455.65 924.229 cv
1425.68 925.915 li
1425.68 925.915 1419.4 802.86 1420.52 785.748 cv
1421.64 768.635 1430.54 739.997 1430.54 739.997 cv
1427.55 640.645 li
1465.37 510.123 li
1485.3 517.604 li
cp
.213382 .761868 .781155 .0888991 cmyk
f
1397.21 507.409 mo
1397.21 507.409 1373.61 542.857 1368 572.193 cv
1362.38 601.529 1372.12 691.688 1361.31 730.129 cv
1355.46 750.939 1333.29 783.077 1329.91 809.969 cv
1326.54 836.86 1313.32 907.301 1313.32 907.301 cv
1343.28 913.227 li
1412.89 737.307 li
1467.5 578.301 li
1481.49 496.408 li
1397.21 507.409 li
cp
0 .683528 .667628 0 cmyk
f
1416.32 305.723 mo
1416.32 305.723 1395.65 308.068 1383.29 321.514 cv
1370.93 334.959 1403.27 443.041 1405.52 460.154 cv
1407.77 477.268 1387.1 517.188 1387.1 517.188 cv
1387.1 517.188 1464.32 531.459 1485.3 517.604 cv
1485.3 517.604 1487.54 394.55 1485.3 382.325 cv
1483.05 370.102 1464.32 320.391 1459.82 315.5 cv
1455.33 310.611 1416.32 305.723 1416.32 305.723 cv
cp
.894041 .730465 .20148 .0501106 cmyk
f
1387.09 331.66 mo
1389.09 325.638 1395.91 322.737 1401.74 325.254 cv
1409.71 328.704 1420.73 335.251 1426.11 346.468 cv
1435.1 365.212 1466.57 429.592 1476.3 432.036 cv
1486.04 434.481 1525.75 365.212 1525.75 365.212 cv
1525.75 365.212 1524.63 352.988 1528 346.061 cv
1531.37 339.134 1541.48 331.799 1542.98 334.244 cv
1544.48 336.689 1537.36 342.801 1537.36 344.023 cv
1537.36 345.246 1540.36 346.061 1544.48 343.616 cv
1548.6 341.171 1550.83 336.227 1550.83 336.227 cv
1550.83 336.227 1557.59 348.505 1550.47 359.507 cv
1543.36 370.509 1540.36 374.991 1540.36 374.991 cv
1540.36 374.991 1494.29 477.266 1477.43 478.487 cv
1461.73 479.626 1371.32 379.348 1387.09 331.66 cv
cp
0 .429175 .372961 0 cmyk
f
1426.72 264.057 mo
1426.72 264.057 1426.56 264.975 1426.27 266.538 cv
1424.87 274.034 1419.51 298.903 1415.88 305.74 cv
1411.5 314.002 1430.88 340.354 1449.52 337.138 cv
1455.07 336.181 1444.83 312.926 1445.32 310.462 cv
1446.27 305.747 1447.54 299.314 1448.85 292.718 cv
1449.59 288.997 1450.34 285.225 1451.04 281.679 cv
1453.03 271.603 1454.66 263.361 1454.66 263.361 cv
1426.72 264.057 li
cp
f
1426.27 266.538 mo
1426.56 264.975 1426.72 264.057 1426.72 264.057 cv
1454.66 263.361 li
1454.66 263.361 1453.03 271.603 1451.04 281.679 cv
1450.34 285.205 1449.6 288.955 1448.86 292.656 cv
1444.55 292.022 1440.04 289.93 1435.52 285.981 cv
1430.6 281.677 1427.37 276.504 1425.42 270.982 cv
1425.76 269.219 1426.05 267.7 1426.27 266.538 cv
cp
0 .683528 .667628 0 cmyk
f
1443.53 197.647 mo
1443.53 197.647 1432.13 199.229 1423.88 209.884 cv
1415.62 220.54 1406.72 253.492 1427.23 271.407 cv
1447.74 289.323 1468 269.043 1471 247.542 cv
1474.01 226.041 1473.4 196.871 1443.53 197.647 cv
cp
0 .429175 .372961 0 cmyk
f
1477.57 240.194 mo
1475.12 244.943 1471.01 247.572 1468.39 246.067 cv
1465.77 244.562 1465.63 239.492 1468.08 234.743 cv
1470.53 229.994 1474.63 227.365 1477.25 228.87 cv
1479.87 230.375 1480.02 235.445 1477.57 240.194 cv
cp
f
1447 197.149 mo
1447 197.149 1429.4 228.485 1416.82 229.934 cv
1404.23 231.381 1402.58 248.032 1402.58 248.032 cv
1402.58 248.032 1407.08 209.665 1419.54 202.266 cv
1432 194.866 1447 197.149 1447 197.149 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
1420.93 237.4 mo
1421.95 242.965 1419.9 248.068 1416.33 248.798 cv
1412.77 249.529 1409.05 245.609 1408.03 240.045 cv
1407 234.48 1409.06 229.376 1412.63 228.646 cv
1416.19 227.916 1419.91 231.835 1420.93 237.4 cv
cp
0 .429175 .372961 0 cmyk
f
1330.65 962.674 mo
1314.32 965.645 1303.46 956.114 1297.81 948.979 cv
1293.66 957.062 1291.11 967.15 1294.16 973.79 cv
1296.85 979.639 1304.17 981.237 1310.36 981.467 cv
1316.9 981.709 1323.01 978.289 1326.26 972.605 cv
1327.78 969.951 1329.34 966.646 1330.65 962.674 cv
cp
.765408 .245823 .578729 .0504158 cmyk
f
1469.85 960.363 mo
1451.88 964.966 1438.59 961.837 1431.16 958.847 cv
1429.24 964.268 1426.7 971.068 1428.05 974.989 cv
1429.7 979.791 1432.05 980.877 1434.12 980.931 cv
1450.54 981.361 1494.26 981.946 1506.78 982.109 cv
1508.52 982.132 1509.49 980.094 1508.36 978.754 cv
1505.26 975.055 1471.19 961.181 1469.85 960.363 cv
cp
f
1789.67 534.23 mo
1789.67 534.23 1789.49 534.101 1789.17 533.885 cv
1787.65 532.843 1782.93 529.783 1779.56 529.438 cv
1775.5 529.021 1771.02 529.646 1771.02 529.646 cv
1778 537.563 li
1789.67 534.23 li
cp
0 .429175 .372961 0 cmyk
f
1796.36 831.164 mo
1792.93 831.164 1790.14 828.379 1790.14 824.945 cv
1790.14 742.318 1857.36 675.096 1939.99 675.096 cv
1975.41 675.096 2009.77 687.681 2036.76 710.531 cv
2039.39 712.75 2039.71 716.675 2037.49 719.295 cv
2035.27 721.918 2031.35 722.241 2028.73 720.024 cv
2003.98 699.072 1972.47 687.533 1939.99 687.533 cv
1864.22 687.533 1802.58 749.177 1802.58 824.945 cv
1802.58 828.379 1799.8 831.164 1796.36 831.164 cv
cp
0 .683528 .667628 0 cmyk
f
1699.85 822.112 mo
1698.04 822.112 1696.27 821.154 1695.32 819.457 cv
1580.98 614.991 li
1579.58 612.492 1580.48 609.334 1582.98 607.938 cv
1585.47 606.539 1588.63 607.434 1590.03 609.933 cv
1708.52 813.828 li
1709.91 816.327 1704.87 820.055 1702.38 821.451 cv
1701.58 821.899 1700.71 822.112 1699.85 822.112 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
1703.92 821.803 mo
1533.06 819.863 li
1619.2 671.511 li
1820.66 634.314 li
1703.92 821.803 li
cp
1836.44 627.399 mo
1836.44 627.395 li
1836.64 624.033 1833.64 621.379 1830.33 621.989 cv
1612.63 662.183 li
1512.27 835.097 1517.57 823.554 1519.5 827.312 cv
1522.25 832.66 1517.13 828.891 1709.64 832.232 cv
1838.25 625.671 1836.28 630.031 1836.44 627.399 cv
cp
f
1937.79 914.969 mo
1888.15 914.969 1847.77 874.584 1847.77 824.945 cv
1847.77 810.45 1851.11 796.609 1857.69 783.807 cv
1858.06 783.094 1858.79 782.683 1859.54 782.683 cv
1859.86 782.683 1860.18 782.757 1860.49 782.913 cv
1861.5 783.437 1861.9 784.687 1861.38 785.706 cv
1855.1 797.914 1851.91 811.117 1851.91 824.945 cv
1851.91 872.298 1890.44 910.823 1937.79 910.823 cv
1950.24 910.823 1962.25 908.217 1973.49 903.074 cv
1973.77 902.947 1974.06 902.886 1974.35 902.886 cv
1975.13 902.886 1975.89 903.338 1976.24 904.098 cv
1976.71 905.139 1976.25 906.369 1975.21 906.845 cv
1963.43 912.237 1950.84 914.969 1937.79 914.969 cv
.238743 .104097 0 0 cmyk
f
1937.79 708.855 mo
1873.78 708.855 1821.7 760.934 1821.7 824.945 cv
1821.7 888.956 1873.78 941.033 1937.79 941.033 cv
2001.8 941.033 2053.88 888.956 2053.88 824.945 cv
2053.88 760.934 2001.8 708.855 1937.79 708.855 cv
1937.79 957.617 mo
1864.63 957.617 1805.12 898.101 1805.12 824.945 cv
1805.12 751.788 1864.63 692.272 1937.79 692.272 cv
2010.95 692.272 2070.46 751.788 2070.46 824.945 cv
2070.46 898.101 2010.95 957.617 1937.79 957.617 cv
.894041 .730465 .20148 .0501106 cmyk
f
1937.79 927.905 mo
1881.02 927.905 1834.83 881.717 1834.83 824.945 cv
1834.83 768.174 1881.02 721.985 1937.79 721.985 cv
1994.56 721.985 2040.75 768.174 2040.75 824.945 cv
2040.75 881.717 1994.56 927.905 1937.79 927.905 cv
1937.79 726.131 mo
1883.31 726.131 1838.98 770.458 1838.98 824.945 cv
1838.98 879.432 1883.31 923.759 1937.79 923.759 cv
1992.28 923.759 2036.6 879.432 2036.6 824.945 cv
2036.6 770.458 1992.28 726.131 1937.79 726.131 cv
.238743 .104097 0 0 cmyk
f
1940 830.129 mo
1938.17 830.129 1936.39 829.158 1935.45 827.441 cv
1795.88 573.453 li
1794.55 571.022 1793.84 568.274 1793.84 565.502 cv
1793.84 549.031 li
1793.84 545.797 1793.11 542.469 1792.17 541.938 cv
1791.23 541.406 1787.31 542.092 1784.54 543.762 cv
1760.23 558.342 li
1757.78 559.814 1754.59 559.018 1753.12 556.564 cv
1751.65 554.109 1752.45 550.926 1754.9 549.454 cv
1779.2 534.873 li
1784.37 531.771 1792.86 530.428 1798.11 533.396 cv
1803.35 536.367 1804.21 543.004 1804.21 549.031 cv
1804.21 565.502 li
1804.21 566.533 1804.47 567.558 1804.97 568.461 cv
1944.53 822.449 li
1945.91 824.957 1945 828.109 1942.49 829.487 cv
1941.7 829.921 1940.84 830.129 1940 830.129 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
1695.7 440.996 mo
1692.44 434.166 1683.83 401.619 1683.83 401.619 cv
1629.76 405.057 li
1629.76 405.057 1655.39 461.31 1660.7 472.248 cv
1675.66 485.654 1736.32 526.518 1741.98 531.082 cv
1744.5 533.109 1748.65 536.844 1750.55 540.221 cv
1754.77 547.721 1756.02 551.314 1759.93 558.658 cv
1764.37 567.018 1790.61 554.096 1790.61 546.73 cv
1790.61 541.66 1780.3 533.373 1772.14 526.646 cv
1768.45 523.604 1698.64 447.141 1695.7 440.996 cv
cp
0 .429175 .372961 0 cmyk
f
1649.28 307.729 mo
1635.61 312.147 1626.35 321.873 1630.22 361.93 cv
1634.08 401.987 1643.11 431.725 1643.11 431.725 cv
1643.11 431.725 1682.39 437.859 1705.55 422.154 cv
1705.55 422.154 1696.27 292.537 1649.28 307.729 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
1524.11 708.855 mo
1460.1 708.855 1408.02 760.934 1408.02 824.945 cv
1408.02 888.956 1460.1 941.033 1524.11 941.033 cv
1588.12 941.033 1640.2 888.956 1640.2 824.945 cv
1640.2 760.934 1588.12 708.855 1524.11 708.855 cv
cp
1524.11 957.617 mo
1450.96 957.617 1391.44 898.102 1391.44 824.945 cv
1391.44 751.788 1450.96 692.272 1524.11 692.272 cv
1597.27 692.272 1656.78 751.788 1656.78 824.945 cv
1656.78 898.102 1597.27 957.617 1524.11 957.617 cv
cp
.894041 .730465 .20148 .0501106 cmyk
f
1524.11 726.131 mo
1469.63 726.131 1425.3 770.458 1425.3 824.945 cv
1425.3 879.432 1469.63 923.759 1524.11 923.759 cv
1578.6 923.759 1622.93 879.432 1622.93 824.945 cv
1622.93 770.458 1578.6 726.131 1524.11 726.131 cv
cp
1524.11 927.905 mo
1467.34 927.905 1421.15 881.717 1421.15 824.945 cv
1421.15 768.174 1467.34 721.985 1524.11 721.985 cv
1580.88 721.985 1627.07 768.174 1627.07 824.945 cv
1627.07 881.717 1580.88 927.905 1524.11 927.905 cv
cp
.438422 .220615 0 0 cmyk
f
1524.11 914.969 mo
1474.47 914.969 1434.09 874.584 1434.09 824.945 cv
1434.09 810.45 1437.43 796.609 1444.02 783.808 cv
1444.54 782.791 1445.79 782.389 1446.81 782.913 cv
1447.83 783.438 1448.23 784.687 1447.7 785.706 cv
1441.42 797.914 1438.23 811.117 1438.23 824.945 cv
1438.23 872.298 1476.76 910.823 1524.11 910.823 cv
1536.56 910.823 1548.57 908.217 1559.81 903.074 cv
1560.85 902.598 1562.08 903.06 1562.56 904.098 cv
1563.03 905.139 1562.57 906.369 1561.53 906.846 cv
1549.75 912.236 1537.16 914.969 1524.11 914.969 cv
cp
f
1588.31 766.9 mo
1587.75 766.9 1587.2 766.68 1586.79 766.244 cv
1570.61 748.974 1547.77 739.067 1524.11 739.067 cv
1522.97 739.067 1522.04 738.14 1522.04 736.995 cv
1522.04 735.852 1522.97 734.922 1524.11 734.922 cv
1548.91 734.922 1572.86 745.306 1589.82 763.41 cv
1590.6 764.244 1590.56 765.558 1589.73 766.339 cv
1589.32 766.714 1588.82 766.9 1588.31 766.9 cv
cp
f
1616.86 721.496 mo
1615.44 721.496 1614.02 721.013 1612.85 720.024 cv
1588.1 699.072 1556.59 687.533 1524.11 687.533 cv
1496.71 687.533 1470.25 695.575 1447.6 710.788 cv
1444.75 712.704 1440.88 711.945 1438.97 709.093 cv
1437.05 706.243 1437.81 702.378 1440.66 700.464 cv
1465.37 683.868 1494.23 675.096 1524.11 675.096 cv
1559.53 675.096 1593.89 687.681 1620.89 710.531 cv
1623.51 712.75 1623.83 716.675 1621.61 719.295 cv
1620.38 720.748 1618.63 721.496 1616.86 721.496 cv
cp
0 .683528 .667628 0 cmyk
f
1524.11 811.126 mo
1523.26 811.126 1522.56 810.458 1522.52 809.602 cv
1522.48 808.719 1523.16 807.972 1524.04 807.931 cv
1706.7 799.467 li
1707.56 799.417 1708.33 800.107 1708.37 800.99 cv
1708.41 801.872 1707.73 802.62 1706.85 802.661 cv
1524.19 811.124 li
1524.11 811.126 li
cp
.910643 .619043 .490486 .35346 cmyk
f
1709.37 850.424 mo
1709.3 850.422 li
1524.04 841.961 li
1523.16 841.92 1522.48 841.173 1522.52 840.29 cv
1522.56 839.408 1523.33 838.693 1524.19 838.768 cv
1709.44 847.229 li
1710.32 847.27 1711 848.018 1710.97 848.899 cv
1710.93 849.756 1710.22 850.424 1709.37 850.424 cv
cp
f
1677 824.945 mo
1677 841.39 1690.33 854.72 1706.78 854.72 cv
1723.22 854.72 1736.55 841.39 1736.55 824.945 cv
1736.55 808.502 1723.22 795.171 1706.78 795.171 cv
1690.33 795.171 1677 808.502 1677 824.945 cv
cp
.438422 .220615 0 0 cmyk
f
1749.28 897.76 mo
1748.58 897.76 1747.9 897.412 1747.51 896.777 cv
1705.01 828.109 li
1704.41 827.135 1704.71 825.857 1705.69 825.256 cv
1706.66 824.649 1707.94 824.953 1708.54 825.927 cv
1751.04 894.596 li
1751.64 895.57 1751.34 896.848 1750.36 897.449 cv
1750.02 897.66 1749.65 897.76 1749.28 897.76 cv
cp
f
1726.47 903.201 mo
1724.44 903.201 1722.67 901.722 1722.37 899.661 cv
1722.03 897.396 1723.6 895.289 1725.87 894.953 cv
1771.47 888.217 li
1773.73 887.879 1775.84 889.446 1776.18 891.713 cv
1776.51 893.978 1774.95 896.085 1772.68 896.42 cv
1727.08 903.157 li
1726.87 903.188 1726.67 903.201 1726.47 903.201 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
1557 602.614 mo
1597.44 602.614 li
1600.44 602.614 1602.87 605.046 1602.87 608.047 cv
1602.87 614.543 li
1602.87 617.544 1600.44 619.976 1597.44 619.976 cv
1546.38 619.976 li
1542.4 619.976 1539.68 615.791 1541.46 612.229 cv
1544.31 606.529 1550.2 602.614 1557 602.614 cv
cp
f
1524.11 847.084 mo
1511.9 847.084 1501.97 837.152 1501.97 824.945 cv
1501.97 812.736 1511.9 802.806 1524.11 802.806 cv
1536.32 802.806 1546.25 812.736 1546.25 824.945 cv
1546.25 837.152 1536.32 847.084 1524.11 847.084 cv
cp
f
1505.17 824.945 mo
1505.17 835.406 1513.65 843.887 1524.11 843.887 cv
1534.57 843.887 1543.05 835.406 1543.05 824.945 cv
1543.05 814.484 1534.57 806.004 1524.11 806.004 cv
1513.65 806.004 1505.17 814.484 1505.17 824.945 cv
cp
.779355 .574121 0 0 cmyk
f
1529.47 824.945 mo
1529.47 827.904 1527.07 830.303 1524.11 830.303 cv
1521.15 830.303 1518.75 827.904 1518.75 824.945 cv
1518.75 821.986 1521.15 819.588 1524.11 819.588 cv
1527.07 819.588 1529.47 821.986 1529.47 824.945 cv
cp
.540063 0 .00311284 0 cmyk
f
1918.85 824.945 mo
1918.85 835.406 1927.33 843.887 1937.79 843.887 cv
1948.25 843.887 1956.73 835.406 1956.73 824.945 cv
1956.73 814.484 1948.25 806.004 1937.79 806.004 cv
1927.33 806.004 1918.85 814.484 1918.85 824.945 cv
cp
.779355 .574121 0 0 cmyk
f
1943.15 824.945 mo
1943.15 827.904 1940.75 830.303 1937.79 830.303 cv
1934.83 830.303 1932.43 827.904 1932.43 824.945 cv
1932.43 821.986 1934.83 819.588 1937.79 819.588 cv
1940.75 819.588 1943.15 821.986 1943.15 824.945 cv
cp
.540063 0 .00311284 0 cmyk
f
1787.9 532.017 mo
1787.9 532.017 1782.19 525.766 1773.36 526.469 cv
1764.54 527.172 1768.83 534.048 1768.83 534.36 cv
1768.83 534.673 1783.83 541.861 1783.83 541.861 cv
1783.83 541.861 1781.02 534.549 1783.05 533.345 cv
1785.06 532.152 1787.9 532.017 1787.9 532.017 cv
cp
0 .429175 .372961 0 cmyk
f
1670.33 892.384 mo
1668.75 920.064 li
1668.18 923.572 1665.92 932.237 1665.92 935.425 cv
1665.92 947.403 1719.21 925.258 1707.26 919.949 cv
1706.18 919.469 1700.52 915.835 1700.16 911.76 cv
1699.62 905.479 1698.23 892.771 1698.23 892.771 cv
1670.33 892.384 li
cp
f
1707.13 919.836 mo
1707.13 919.836 1694.62 923.5 1688.21 924.416 cv
1681.8 925.332 1673.36 917.619 1668.82 919.703 cv
1663.83 921.996 1664.34 944.576 1664.34 944.576 cv
1664.34 944.576 1731.13 948.512 1749.99 942.434 cv
1757.47 940.025 1732.71 928.37 1707.13 919.836 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
1552.91 895.034 mo
1551.34 922.716 li
1550.77 926.223 1548.5 934.888 1548.5 938.076 cv
1548.5 950.054 1601.8 927.909 1589.85 922.601 cv
1588.77 922.12 1581.43 915.773 1581.07 911.697 cv
1580.53 905.416 1580.82 895.422 1580.82 895.422 cv
1552.91 895.034 li
cp
0 .429175 .372961 0 cmyk
f
1589.72 922.486 mo
1589.72 922.486 1577.21 926.15 1570.8 927.066 cv
1564.39 927.982 1555.94 920.27 1551.41 922.354 cv
1546.42 924.646 1546.22 945.287 1546.22 945.287 cv
1546.22 945.287 1617.63 950.463 1634.41 945.604 cv
1641.96 943.42 1615.3 931.021 1589.72 922.486 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
1637.37 496.267 mo
1647.26 511.313 li
1707.29 732.32 li
1705.37 901.997 li
1667.38 902.881 li
1667.38 902.881 1649.71 754.457 1649.71 742.955 cv
1649.71 731.453 1567.86 541.666 1567.86 541.666 cv
1637.37 496.267 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
1635.78 510.615 mo
1635.78 510.615 1603.38 683.105 1603.38 712.5 cv
1603.38 741.895 1589.92 906.414 1589.92 906.414 cv
1551.84 906.194 li
1551.84 906.194 1549.09 856.048 1545.01 782.273 cv
1544.37 770.72 1545.83 747.406 1545.01 735.445 cv
1539.08 649.413 1527.36 587.71 1532.96 555.607 cv
1533.86 550.439 1547.15 516.266 1550.45 512.855 cv
1575.39 487.054 1635.78 510.615 1635.78 510.615 cv
cp
.779355 .574121 0 0 cmyk
f
1638.67 275.831 mo
1638.67 275.831 1632.58 265.049 1627.26 259.736 cv
1621.95 254.424 1614.76 239.267 1616.95 221.766 cv
1619.14 204.265 1632.58 197.39 1639.92 195.358 cv
1647.26 193.327 1674.82 193.431 1684.04 197.962 cv
1693.26 202.494 1688.52 237.548 1688.52 237.548 cv
1673.83 264.58 li
1638.67 275.831 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
1673.4 309.914 mo
1674.03 310.542 1691.54 348.804 1688.2 376.305 cv
1682.11 426.558 1656.49 508.531 1647.26 511.313 cv
1573.3 533.604 1546.22 516.938 1546.22 516.938 cv
1546.22 516.938 1575.54 364.395 1592.47 329.844 cv
1599.51 315.47 1608.14 303.225 1624.45 300.676 cv
1628.18 300.094 1659.02 295.538 1673.4 309.914 cv
cp
0 .683528 .667628 0 cmyk
f
1670.08 280.987 mo
1673.36 311.146 li
1673.36 311.146 1674.12 319.554 1669.93 322.88 cv
1662.71 328.604 1635.78 299.687 1635.78 299.687 cv
1638.72 252.239 li
1670.08 280.987 li
cp
0 .429175 .372961 0 cmyk
f
1637.83 266.51 mo
1644.5 285.775 1662.23 295.034 1671.76 296.447 cv
1670.08 280.987 li
1638.72 252.239 li
1637.83 266.51 li
cp
0 .683528 .667628 0 cmyk
f
1653.49 204.429 mo
1667.53 198.8 1683.24 207.534 1686.15 222.153 cv
1687.41 228.508 1688.67 236.516 1689.27 245.31 cv
1690.71 266.459 1680.77 287.606 1671.16 288.085 cv
1661.55 288.563 1634.3 276.181 1631.84 246.176 cv
1630.33 227.65 1638.75 210.335 1653.49 204.429 cv
cp
0 .429175 .372961 0 cmyk
f
1639.05 248.2 mo
1639.28 252.869 1636.37 256.809 1632.55 256.999 cv
1628.73 257.189 1625.45 253.557 1625.22 248.887 cv
1624.98 244.218 1627.89 240.278 1631.71 240.088 cv
1635.53 239.898 1638.81 243.529 1639.05 248.2 cv
cp
f
1631.71 240.088 mo
1631.71 240.088 1629.61 230.047 1630.55 220.359 cv
1631.48 210.671 1639.5 197.077 1649.35 195.045 cv
1659.19 193.014 1682.15 196.764 1685.12 190.514 cv
1688.09 184.264 1688.09 184.889 1689.1 183.912 cv
1691.42 181.688 1705.18 190.931 1704.56 207.338 cv
1703.93 223.745 1689.45 223.172 1686.64 223.641 cv
1683.83 224.109 1658.2 213.328 1650.39 213.796 cv
1642.58 214.265 1631.71 240.088 1631.71 240.088 cv
cp
.894041 .730465 .20148 .0501106 cmyk
f
1507.15 129.056 mo
1505.44 142.515 1503.32 141.661 1503.15 143.393 cv
1502.94 145.441 1515.25 170.14 1515.25 170.14 cv
1515.25 170.14 1551.05 243.168 1553.12 247.044 cv
1616.8 300.751 li
1600.3 340.417 li
1600.3 340.417 1532.5 280.117 1529.49 276.336 cv
1526.47 272.554 1489.18 168.212 1485.61 159.13 cv
1485.61 159.13 1477.49 149.855 1472.57 143.86 cv
1467.65 137.866 1465.55 129.97 1464.41 128.067 cv
1464.25 127.787 1460.82 121.229 1458.68 112.033 cv
1456.84 104.107 1462.11 110.81 1462.11 110.81 cv
1462.11 110.81 1468.08 124.902 1469.07 124.243 cv
1469.84 123.734 1466.14 116.229 1464.01 107.481 cv
1463.46 105.231 1462.93 103.009 1462.46 100.964 cv
1461.22 95.5967 1464.06 93.3281 1466.22 98.7456 cv
1466.99 100.659 1468.18 103.867 1468.73 106.274 cv
1469.31 108.874 1470.66 111.081 1471.47 113.194 cv
1473.09 117.39 1474.22 120.469 1474.35 120.309 cv
1474.52 120.101 1475.41 120.709 1474.9 118.304 cv
1474.29 115.412 1471.67 109.544 1471.09 105.225 cv
1470.76 102.776 1469.77 97.6963 1469.77 97.6963 cv
1469.77 97.6963 1469.66 89.752 1470.11 89.5967 cv
1472.55 88.7539 1474.11 94.1797 1474.13 97.5615 cv
1475.23 99.7217 1476.12 105.093 1476.12 105.093 cv
1476.12 105.093 1480.3 115.576 1481.74 115.011 cv
1482.36 114.771 1480.54 108.04 1479.76 101.166 cv
1479.04 94.7847 1479.33 88.2315 1480.53 87.9111 cv
1482.57 87.3682 1484.11 94.3779 1484.11 94.3779 cv
1484.11 94.3779 1484.93 99.3428 1485.32 100.972 cv
1485.79 102.883 1487.6 108.5 1487.6 108.5 cv
1487.6 108.5 1494.78 127.766 1496.1 127.111 cv
1497.42 126.458 1500.14 123.378 1500.1 122.032 cv
1500.05 120.686 1498.71 118.244 1498.67 116.897 cv
1498.62 115.552 1499.69 113.771 1501.29 113.611 cv
1502.9 113.452 1505.54 119.906 1505.54 119.906 cv
1505.54 119.906 1507.65 125.171 1507.15 129.056 cv
cp
0 .432166 .36405 0 cmyk
f
1583.61 269.622 mo
1586.11 269.02 1653.28 310.07 1654.11 326.033 cv
1654.93 341.996 1631.92 367.358 1612.7 357.098 cv
1593.48 346.838 1554.26 305.598 1554.26 305.598 cv
1554.26 305.598 1575.52 271.571 1583.61 269.622 cv
cp
.19968 .837797 .84097 .0906691 cmyk
f
817.295 933.921 mo
831.353 967.79 li
831.961 971.53 834.358 980.771 834.358 984.17 cv
834.358 996.943 777.932 973.328 790.578 967.667 cv
791.723 967.154 795.314 963.062 795.69 958.715 cv
796.27 952.017 790.937 943.616 790.937 943.616 cv
817.295 933.921 li
cp
0 .429175 .372961 0 cmyk
f
837.568 988.384 mo
837.568 988.384 836.255 969.235 831.512 966.979 cv
827.062 964.863 819.013 973.406 812.728 972.43 cv
806.444 971.453 792.282 966.171 792.282 966.171 cv
767.197 975.271 748.538 981.063 752.276 988.384 cv
837.568 988.384 li
cp
.910643 .619043 .490486 .35346 cmyk
f
730.886 944.122 mo
739.082 967.79 li
739.69 971.53 742.087 980.771 742.087 984.17 cv
742.087 996.943 685.661 973.328 698.307 967.667 cv
699.452 967.154 703.043 963.062 703.419 958.715 cv
703.999 952.017 698.666 943.616 698.666 943.616 cv
730.886 944.122 li
cp
0 .429175 .372961 0 cmyk
f
653.017 495.918 mo
632.589 549.203 li
632.589 549.203 619.261 676.368 627.022 752.492 cv
630.268 784.327 700.539 954.75 700.539 954.75 cv
735.44 949.727 li
699.226 750.088 li
705.894 670.739 li
730.237 518.188 li
653.017 495.918 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
677.505 502.229 mo
664.993 557.908 li
664.993 557.908 670.185 685.664 688.867 759.867 cv
696.68 790.898 790.844 949.375 790.844 949.375 cv
824.653 939.359 li
759.965 747.051 li
766 557.552 li
757.133 513.104 li
677.505 502.229 li
cp
.779355 .574121 0 0 cmyk
f
745.296 988.384 mo
745.296 988.384 743.946 969.41 738.885 967.132 cv
734.079 964.968 725.264 973.406 718.479 972.43 cv
711.694 971.453 698.447 967.546 698.447 967.546 cv
671.364 976.646 649.176 981.063 653.212 988.384 cv
745.296 988.384 li
cp
.910643 .619043 .490486 .35346 cmyk
f
637.874 53.5918 mo
630.084 64.7813 628.496 63.0088 627.537 64.4707 cv
626.402 66.2002 626.538 94.1084 626.538 94.1084 cv
626.538 94.1084 626.393 176.35 626.542 180.794 cv
661.323 259.103 li
627.668 286.617 li
627.668 286.617 592.079 200.465 591 195.652 cv
589.921 190.837 603.081 79.9502 603.924 70.1445 cv
603.924 70.1445 600.6 57.9902 598.763 50.2949 cv
596.925 42.6006 598.596 34.5527 598.41 32.3135 cv
598.383 31.9834 598.2 24.4985 600.431 15.273 cv
602.354 7.32228 604.192 15.8159 604.192 15.8159 cv
604.192 15.8159 603.291 31.2398 604.522 31.1255 cv
605.47 31.0371 605.464 22.5752 607.5 13.7539 cv
608.023 11.4858 608.548 9.24952 609.046 7.19923 cv
610.355 1.81739 614.051 1.14845 613.585 7.01661 cv
613.419 9.08888 613.062 12.5225 612.459 14.9273 cv
611.808 17.5254 612.054 20.1387 611.842 22.4126 cv
611.422 26.9273 611.059 30.2129 611.255 30.1318 cv
611.51 30.0278 612.062 30.9942 612.692 28.606 cv
613.45 25.7339 613.703 19.249 615.147 15.1182 cv
615.966 12.7764 617.377 7.77247 617.377 7.77247 cv
617.377 7.77247 620.556 -.0751855 621.048 .000498072 cv
623.711 .411143 623.05 6.70655 621.518 9.73536 cv
621.544 12.1836 619.91 17.4033 619.91 17.4033 cv
619.91 17.4033 618.99 28.7485 620.598 28.9341 cv
621.919 29.0874 629.378 2.44239 632.022 3.04347 cv
634.179 3.53468 632.298 11.6558 632.298 11.6558 cv
632.298 11.6558 630.781 16.4766 630.4 18.1187 cv
629.955 20.044 629.063 25.9199 629.063 25.9199 cv
629.063 25.9199 626.913 46.5376 628.447 46.5835 cv
629.982 46.6309 633.937 45.1807 634.514 43.958 cv
635.092 42.7363 634.962 39.9175 635.54 38.6948 cv
636.118 37.4736 637.931 36.3926 639.503 37.0166 cv
641.075 37.6397 640.574 44.6587 640.574 44.6587 cv
640.574 44.6587 640.123 50.3623 637.874 53.5918 cv
cp
0 .555444 .426886 0 cmyk
f
653.917 231.167 mo
606.576 260.371 li
606.576 260.371 624.628 303.977 636.892 319.597 cv
651.771 338.547 678.918 347.371 680.747 345.085 cv
685.881 338.671 696.048 330.803 695.537 319.767 cv
693.767 281.576 653.917 231.167 653.917 231.167 cv
cp
.765408 .245823 .578729 .0504158 cmyk
f
617.82 58.8682 mo
619.477 52.958 622.827 48.7915 628.447 46.5835 cv
621.526 46.1109 616.829 53.0137 617.82 58.8682 cv
cp
0 .683528 .667628 0 cmyk
f
742.924 281.143 mo
742.924 281.143 769.256 284.831 776.187 289.957 cv
783.993 295.73 808.164 322.66 808.164 322.66 cv
808.164 322.66 757.855 467.805 759.802 493.63 cv
761.75 519.455 767.268 557.702 767.268 557.702 cv
767.268 557.702 669.57 563.913 632.569 549.203 cv
632.569 549.203 644.253 490.688 644.253 475.323 cv
644.253 459.959 652.786 343.871 656.428 332.034 cv
659.164 323.144 669.57 285.72 687.422 281.797 cv
705.273 277.874 742.924 281.143 742.924 281.143 cv
cp
.644587 0 .448096 0 cmyk
f
735.734 239.703 mo
742.144 281.118 li
742.144 281.118 723.421 312.798 709.211 308.359 cv
697.288 304.636 699.652 280.417 699.652 280.417 cv
699.652 280.417 706.15 256.099 704.202 243.93 cv
702.253 231.761 735.734 239.703 735.734 239.703 cv
cp
0 .429175 .372961 0 cmyk
f
704.202 243.93 mo
702.253 231.761 735.734 239.703 735.734 239.703 cv
736.275 243.269 li
735.295 245.653 734.098 247.693 732.644 249.259 cv
725.166 257.311 713.476 262.147 703.368 262.514 cv
704.379 255.952 705.001 248.92 704.202 243.93 cv
cp
0 .683528 .667628 0 cmyk
f
741.228 178.898 mo
742.174 178.554 748.813 227.85 736.214 241.413 cv
723.616 254.977 699.07 259.417 690.265 248.734 cv
680.526 236.917 681.015 183.937 700.603 169.983 cv
720.191 156.03 741.228 178.898 741.228 178.898 cv
cp
0 .429175 .372961 0 cmyk
f
708.06 143.613 mo
723.2 146.702 733.007 155.959 736.61 159.904 cv
743.484 160.716 752.828 164.518 762.477 180.501 cv
774.34 200.153 765.58 221.927 751.769 232.61 cv
737.958 243.292 738.22 255.763 738.22 255.763 cv
735.967 249.25 li
734.356 244.414 733.698 239.287 734.237 234.216 cv
734.56 231.173 735.212 227.882 736.471 225.177 cv
739.793 218.042 729.336 213.303 726.404 207.367 cv
724.147 202.797 724.037 192.341 720.48 184.786 cv
716.232 179.019 li
716.232 179.019 706.431 171.389 696.843 173.542 cv
687.255 175.694 688.634 139.65 708.06 143.613 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
727.048 216.139 mo
726.948 222.154 729.681 227.078 733.152 227.137 cv
736.623 227.196 739.518 222.369 739.618 216.355 cv
739.717 210.34 736.985 205.416 733.514 205.357 cv
730.043 205.298 727.148 210.125 727.048 216.139 cv
cp
0 .429175 .372961 0 cmyk
f
840.842 374.687 mo
796.804 409.289 li
796.804 409.289 777.358 390.508 767.592 369.734 cv
757.706 348.705 766.372 287.326 776.895 290.178 cv
800.433 296.557 840.842 374.687 840.842 374.687 cv
cp
.40003 0 .261753 0 cmyk
f
815.219 432.802 mo
863.724 453.183 879.337 408.651 878.121 409.829 cv
879.044 408.819 886.344 405.563 891.01 403.229 cv
910.448 393.498 922.199 370.87 921.757 348.103 cv
949.648 330.765 956.914 294.049 937.785 273.757 cv
943.67 251.192 928.144 226.424 908.407 214.987 cv
893.464 188.385 855.766 199.77 835.446 220.637 cv
825.145 231.215 819.182 246.716 819.342 262.167 cv
795.432 272.273 782.922 299.192 788.36 326.344 cv
756.101 353.465 765.724 412.005 815.219 432.802 cv
cp
.894041 .730465 .20148 .0501106 cmyk
f
992.456 577.978 mo
1000.74 575.846 li
1000.58 575.208 984.85 511.396 968.087 447.89 cv
958.236 410.565 949.958 380.638 943.483 358.94 cv
930.72 316.168 927.878 314.979 925.37 313.93 cv
922.135 322.009 li
921.524 321.753 921.228 321.417 921.225 321.414 cv
923.265 323.769 931.211 341.402 960.857 454.01 cv
977.212 516.136 992.305 577.367 992.456 577.978 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
712.551 576.126 mo
712.551 576.126 716.277 573.152 717.438 572.068 cv
718.801 570.797 722.589 566.67 722.589 566.67 cv
722.589 566.67 735.115 551.679 733.936 550.839 cv
732.755 549.998 729.175 551.369 728.079 552.021 cv
726.983 552.675 725.637 553.334 724.541 553.986 cv
723.445 554.64 722.054 554.362 721.148 553.051 cv
720.242 551.74 724.049 548.184 725.609 547.218 cv
730.472 544.205 745.083 538.784 746.605 538.144 cv
748.405 537.387 765.357 507.369 771.98 497.548 cv
771.976 497.545 li
782.34 481.145 792.173 463.766 793.263 462.023 cv
815.564 381.93 li
848.008 378.709 li
848.008 378.709 824.503 467.944 822.819 472.272 cv
822.018 474.332 795.063 510.476 795.047 510.467 cv
780.657 527.424 767.933 542.33 765.57 545.265 cv
765.57 545.265 760.853 555.943 758.251 562.92 cv
755.648 569.898 750.458 575.271 749.426 577.117 cv
749.274 577.391 746.068 583.944 739.467 589.987 cv
733.778 595.196 736.8 587.594 736.8 587.594 cv
736.8 587.594 745.616 576.009 744.589 575.453 cv
743.798 575.025 739.355 581.644 733.12 587.474 cv
731.516 588.973 729.929 590.445 728.46 591.788 cv
724.604 595.309 721.351 593.896 724.802 589.554 cv
726.021 588.02 728.106 585.523 729.844 583.959 cv
731.721 582.27 732.902 580.098 734.263 578.431 cv
736.965 575.121 738.978 572.743 738.781 572.703 cv
738.527 572.651 738.603 571.607 736.852 573.145 cv
734.747 574.992 731.139 579.93 727.834 582.402 cv
725.961 583.804 722.222 586.978 722.222 586.978 cv
722.222 586.978 715.602 591.446 715.255 591.129 cv
713.381 589.414 717.209 584.838 720.004 583.273 cv
721.27 581.346 725.297 578.121 725.297 578.121 cv
725.297 578.121 731.983 569.734 730.819 568.747 cv
729.863 567.936 710.001 584.857 708.242 583.004 cv
706.806 581.49 712.551 576.126 712.551 576.126 cv
cp
0 .429175 .372961 0 cmyk
f
748.229 552.307 mo
748.229 552.307 738.258 556.111 734.065 550.969 cv
734.065 550.969 735.331 554.789 739.346 555.49 cv
743.361 556.19 748.229 552.307 748.229 552.307 cv
cp
0 .683528 .667628 0 cmyk
f
887.224 598.786 mo
868.845 768.726 li
868.845 768.726 877.828 804.663 876.745 814.873 cv
875.662 825.082 856.768 959.014 856.768 959.014 cv
857.622 966.37 li
858.081 988.162 li
787.453 988.712 li
787.453 988.712 802.339 981.813 823.161 968.18 cv
824.701 967.172 828.249 963.957 829.112 957.547 cv
834.672 916.267 823.671 778.571 823.671 778.571 cv
815.006 599.336 li
887.224 598.786 li
cp
0 .429175 .372961 0 cmyk
f
927.407 630.987 mo
931.367 632.022 937.464 777.873 940.744 784.338 cv
961.54 825.319 966.482 949.916 966.482 949.916 cv
975.061 967.363 li
973.092 984.176 li
973.092 984.176 957.573 993.381 946.684 987.171 cv
948.368 970.337 li
949.654 947.847 li
897.189 792.616 li
868.481 634.281 li
927.407 630.987 li
cp
f
792.979 710.038 mo
790.484 609.404 li
790.052 580.963 799.212 553.679 810.462 527.779 cv
834.268 486.34 li
841.937 488.859 846.162 465.389 854.222 466.322 cv
860.298 467.027 864.462 468.479 870.107 468.824 cv
880.745 469.477 887.203 490.98 898.594 489.632 cv
898.647 490.314 905.722 493.026 905.894 493.509 cv
911.342 508.719 925.249 524.99 932.672 570.15 cv
941.099 621.412 941.064 709.512 940.01 715.527 cv
859.442 719.2 840.239 722.115 792.979 710.038 cv
cp
.910643 .619043 .490486 .35346 cmyk
f
858.419 993.764 mo
785.51 993.764 li
782.814 993.512 782.156 991.232 783.091 989.826 cv
785.016 986.933 793.522 984.811 803.082 980.201 cv
819.852 982.029 854.937 969.261 857.584 965.235 cv
859.111 973.296 859.918 993.419 858.419 993.764 cv
cp
f
975.017 967.317 mo
975.017 967.317 968.541 986.348 961.54 985.799 cv
954.538 985.25 948.412 970.245 948.412 970.245 cv
948.412 970.245 945.786 982.871 947.012 989.824 cv
948.237 996.778 958.214 1003.92 965.041 1000.8 cv
971.867 997.693 981.144 981.59 975.017 967.317 cv
cp
f
839.488 421.219 mo
839.488 421.219 829.327 419.92 819.6 416.412 cv
813.757 414.305 804.043 409.695 804.043 409.695 cv
804.043 409.695 809.5 362.286 823.24 333.577 cv
828.919 321.712 834.661 315.986 842.669 314.613 cv
839.488 421.219 li
cp
.213352 .761868 .781155 .0888991 cmyk
f
821.839 367.57 mo
823.898 359.879 828.498 349.765 831.123 342.791 cv
835.576 330.949 836.899 319.887 840.827 315.146 cv
842.948 312.597 870.149 312.976 873.489 312.639 cv
874.867 312.49 880.311 312.849 885.579 313.179 cv
885.567 313.165 li
888.654 313.523 919.305 315.997 923.753 317.969 cv
945.834 340.098 956.514 369.892 973.113 402.441 cv
973.113 402.441 960.678 409.754 950.764 414.368 cv
946.459 416.369 938.204 419.572 938.204 419.572 cv
919.069 386.618 li
918.858 386.454 917.865 385.365 917.577 386.07 cv
917.136 387.166 903.163 489.866 903.163 489.866 cv
903.163 489.866 846.519 494.627 833.224 488.094 cv
833.224 488.094 830.766 419.53 825.872 399.407 cv
824.065 392.012 818.52 379.959 821.839 367.57 cv
cp
0 .683528 .667628 0 cmyk
f
889.303 281.658 mo
889.303 281.658 885.056 305.575 885.906 315.009 cv
886.756 324.442 882.667 354.848 864.322 354.948 cv
845.978 355.048 858.445 323.38 860.173 314.135 cv
861.901 304.891 864.704 269.185 864.704 269.185 cv
889.303 281.658 li
cp
0 .429175 .372961 0 cmyk
f
863.608 282.799 mo
863.894 274.97 864.704 269.185 864.704 269.185 cv
889.303 281.658 li
889.303 281.658 888.435 286.549 887.562 292.779 cv
876.794 295.136 868.274 290.053 863.608 282.799 cv
cp
0 .683528 .667628 0 cmyk
f
889.826 212.181 mo
889.826 212.181 900.162 215.952 905.786 227.462 cv
911.411 238.972 913.265 271.193 890.593 283.571 cv
867.922 295.949 852.965 273.12 854.373 252.664 cv
855.78 232.207 862.065 205.405 889.826 212.181 cv
cp
0 .429175 .372961 0 cmyk
f
849.99 245.716 mo
851.414 250.852 854.793 254.321 857.537 253.465 cv
860.281 252.609 861.351 247.752 859.927 242.616 cv
858.503 237.481 855.125 234.012 852.38 234.867 cv
849.636 235.723 848.566 240.581 849.99 245.716 cv
cp
f
903.788 255.891 mo
901.795 261.024 902.788 266.414 906.004 267.928 cv
909.221 269.442 913.445 266.508 915.438 261.374 cv
917.431 256.24 916.439 250.852 913.221 249.337 cv
910.004 247.823 905.781 250.758 903.788 255.891 cv
cp
f
910.671 577.598 mo
910.671 610.229 li
910.671 627.193 922.62 640.947 937.357 640.947 cv
964.81 640.947 li
964.81 564.877 li
921.721 564.877 li
918.771 564.877 916.094 566.208 914.114 568.378 cv
911.993 570.686 910.671 573.963 910.671 577.598 cv
cp
.213352 .761868 .781155 .0888991 cmyk
f
914.114 568.378 mo
914.296 568.378 li
919.96 568.378 924.55 573.663 924.55 580.182 cv
924.55 604.186 li
924.55 624.488 938.849 640.947 956.486 640.947 cv
973.2 640.947 li
990.837 640.947 1005.14 624.488 1005.14 604.186 cv
1005.14 580.301 li
1005.14 571.782 999.137 564.877 991.737 564.877 cv
921.721 564.877 li
918.771 564.877 916.094 566.208 914.114 568.378 cv
cp
0 .683528 .667628 0 cmyk
f
910.595 576.932 mo
919.134 576.892 li
919.131 576.287 918.863 515.729 919.675 453.978 cv
920.151 417.736 920.9 388.188 921.902 366.153 cv
923.614 328.504 925.704 321.756 926.301 320.657 cv
926.405 318.627 925.37 313.93 925.37 313.93 cv
923.852 313.294 922.125 313.479 920.75 314.428 cv
918.548 315.946 917.183 318.853 915.831 330.526 cv
914.993 337.755 914.241 348.015 913.597 361.021 cv
912.516 382.815 911.707 412.705 911.19 449.859 cv
910.313 513.072 910.591 576.301 910.595 576.932 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
867.734 518.941 mo
866.642 519.174 859.122 519.616 859.122 519.616 cv
859.122 519.616 848.094 512.938 846.519 516.098 cv
846.036 517.046 857.945 523.83 857.945 523.83 cv
857.945 523.83 869.456 524.209 872.208 524.125 cv
877.333 523.999 888.108 522.545 904.135 510.619 cv
917.998 503.539 987.669 462.894 988.698 455.161 cv
989.308 450.589 978.701 426.736 968.429 405.139 cv
963.892 407.668 956.856 411.523 950.764 414.368 cv
947.887 415.695 943.245 417.57 940.493 418.666 cv
947.151 431.52 953.453 444.752 952.634 447.491 cv
951.92 449.894 892.414 495.301 892.414 495.301 cv
880.526 493.678 li
880.526 493.678 859.563 496.164 859.08 498.672 cv
858.576 501.158 867.923 500.505 869.162 500.885 cv
869.855 501.095 871.242 501.58 872.418 502.359 cv
868.973 504.003 863.512 506.637 860.445 506.764 cv
853.409 507.017 845.259 505.983 844.377 506.994 cv
843.348 508.175 854.039 511.42 861.58 511.884 cv
864.667 512.052 866.537 511.104 867.881 511.356 cv
869.709 511.736 866.495 513.211 861.349 512.895 cv
858.408 512.705 853.283 511.083 850.048 510.619 cv
844.734 509.86 841.752 510.282 841.31 510.745 cv
840.575 511.504 856.392 516.582 856.392 516.582 cv
856.392 516.582 866.684 517.931 869.036 517.805 cv
869.036 517.805 870.464 518.395 867.734 518.941 cv
cp
0 .432166 .36405 0 cmyk
f
1301.83 972.021 mo
1300.83 964.854 1303.08 952.522 1308.69 933.234 cv
1297.58 933.26 1288.23 928.341 1276.88 928.513 cv
1273.78 946.652 1268.97 976.437 1268.97 976.437 cv
1268.46 999.982 li
1347.53 1000.58 li
1347.53 1000.58 1346.88 1000.92 1323.56 986.186 cv
1321.84 985.096 1302.8 978.946 1301.83 972.021 cv
cp
0 .429175 .372961 0 cmyk
f
1268.08 1006.03 mo
1349.71 1006.03 li
1352.73 1005.76 1353.47 1003.3 1352.42 1001.78 cv
1350.26 998.654 1334.34 991.148 1323.64 986.168 cv
1304.86 988.143 1271.86 980.415 1268.9 976.065 cv
1263.75 990.47 1266.4 1005.66 1268.08 1006.03 cv
cp
.644587 0 .448096 0 cmyk
f
1203.32 972.021 mo
1202.32 964.854 1200.62 955.877 1203.12 931.977 cv
1192 932.002 1181.43 929.918 1170.07 930.09 cv
1170.07 948.748 1170.46 976.437 1170.46 976.437 cv
1169.95 999.982 li
1249.03 1000.58 li
1249.03 1000.58 1248.37 1000.92 1225.05 986.186 cv
1223.33 985.096 1204.29 978.946 1203.32 972.021 cv
cp
0 .429175 .372961 0 cmyk
f
1169.57 1006.03 mo
1251.2 1006.03 li
1254.22 1005.76 1254.96 1003.3 1253.91 1001.78 cv
1251.75 998.654 1235.83 991.148 1225.13 986.168 cv
1206.35 988.143 1173.35 980.415 1170.39 976.065 cv
1165.24 990.47 1167.89 1005.66 1169.57 1006.03 cv
cp
.644587 0 .448096 0 cmyk
f
1260.79 289.155 mo
1290.54 257.774 li
1290.54 257.774 1322.37 275.284 1359.49 292.014 cv
1369.69 274.255 1386.35 215.838 1387.24 213.052 cv
1388.14 210.256 1367.74 175.165 1372.3 174.285 cv
1376.87 173.406 1382.79 193.025 1387.61 191.037 cv
1392.44 189.049 1404.84 143.531 1407.75 146.016 cv
1413.18 150.664 1401.22 174.326 1404.08 176.05 cv
1406.95 177.773 1414.21 149.821 1419.74 151.013 cv
1425.27 152.205 1410.4 176.46 1412.04 178.792 cv
1413.67 181.123 1429.21 158.368 1432.42 163.639 cv
1434.16 166.501 1418.08 183.454 1421.39 185.35 cv
1424.7 187.247 1439.19 176.569 1440.92 180.028 cv
1442.65 183.487 1427.4 187.091 1423.16 195.846 cv
1418.93 204.599 1411.23 208.005 1408.68 224.556 cv
1406.13 241.09 1399.14 329.561 1381.1 336.663 cv
1365.36 342.865 1260.79 289.155 1260.79 289.155 cv
cp
0 .429175 .372961 0 cmyk
f
1280.01 458.419 mo
1255.89 471.873 li
1206.86 546.842 li
1294.54 753.229 li
1294.54 753.229 1284.67 784.266 1281.45 799.772 cv
1278.08 815.997 1269.83 955.248 1269.83 955.248 cv
1307.23 955.877 li
1307.23 955.877 1342.77 807.634 1348.78 759.519 cv
1356.09 701.09 1311.6 561.937 1311.6 561.937 cv
1303.3 533.545 1285.41 475.14 1285.41 475.14 cv
1285.41 475.14 1281.04 460.908 1280.01 458.419 cv
cp
.894041 .730465 .20148 .0501106 cmyk
f
1196.05 430.262 mo
1196.05 430.262 1198.54 447.896 1188.57 468.012 cv
1182.49 480.274 1171.98 489.889 1164.46 504.91 cv
1150.22 533.338 1142.49 573.721 1147.83 599.675 cv
1147.83 599.675 1177.27 712.065 1176.1 753.141 cv
1175.67 768.289 1170.47 795.579 1167.15 814.028 cv
1164.21 830.338 1163.21 953.361 1163.21 953.361 cv
1204.99 952.104 li
1236.98 753.648 li
1250.5 577.241 li
1280 458.423 li
1196.05 430.262 li
cp
.779355 .574121 0 0 cmyk
f
1284.52 171.284 mo
1280.82 153.841 1277.01 136.334 1259.68 123.771 cv
1245.65 113.603 1230.58 110.697 1214.6 116.493 cv
1169.32 132.914 1193.68 168.844 1137.49 207.139 cv
1120.03 219.039 1113.41 223.188 1100.88 239.045 cv
1083.34 261.24 1073.76 291.022 1082.57 315.539 cv
1100.8 366.242 1157.29 380.891 1186.84 370.141 cv
1241.84 350.13 1287.67 280.374 1290.71 261.339 cv
1293.97 240.966 1286.9 182.513 1284.52 171.284 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
1293.3 308.871 mo
1306.61 315.024 1330.72 324.263 1330.72 324.263 cv
1344.44 280.883 li
1266.91 236.784 1272.99 243.899 1214.81 244.766 cv
1168.33 245.429 1148.84 236.553 1108.82 344.609 cv
1108.82 344.609 1139.29 358.299 1150.2 362.693 cv
1154.89 349.336 1163.37 322.696 1168.31 337.883 cv
1175.78 360.827 1181.26 383.991 1184.92 407.837 cv
1187.25 421.973 1192.33 440.067 1189.66 454.471 cv
1189.66 454.471 1221.32 460.988 1245.5 462.049 cv
1245.7 462.045 li
1257.39 461.747 1269.36 460.717 1280.01 458.42 cv
1280.01 458.42 1284.75 358.181 1287.28 353.998 cv
1290.09 349.366 1301.94 334.403 1291.86 312.024 cv
1290.07 308.067 1290.55 307.602 1293.3 308.871 cv
cp
.644587 0 .448096 0 cmyk
f
1235.11 482.858 mo
1235.65 482.934 1238.12 482.608 1240.14 482.658 cv
1242.94 482.709 1245.38 483.133 1245.38 483.133 cv
1245.38 483.133 1246.48 482.185 1248.57 481.212 cv
1249.44 480.813 1250.87 480.664 1251.84 480.215 cv
1252.84 479.741 1253.68 478.893 1254.63 478.469 cv
1257.1 477.396 1259.37 477.146 1260.12 478.443 cv
1260.74 479.517 1247 487.921 1247 487.921 cv
1234.28 487.995 1220.96 494.479 1191.49 475.252 cv
1174.65 467.895 1092.9 427.519 1091.26 418.716 cv
1090.33 413.777 1102.88 375.546 1113.13 346.518 cv
1121.03 350.059 1137.84 357.541 1147.25 361.48 cv
1138.62 379.761 1128.44 404.002 1129.51 406.969 cv
1129.79 407.742 1130.81 409.139 1186.07 445.325 cv
1187.47 446.223 1188.89 447.171 1190.34 448.118 cv
1194.23 450.662 1198.4 453.381 1202.81 456.248 cv
1218.57 454.603 li
1218.57 454.603 1243.53 456.323 1244.28 459.166 cv
1244.61 460.463 1242.54 461.111 1239.99 461.486 cv
1239.92 461.486 li
1239.54 461.535 1239.17 461.585 1238.8 461.635 cv
1238.75 461.635 li
1236 461.959 1233.11 462.01 1232.41 462.259 cv
1231.61 462.533 1230.02 463.156 1228.65 464.104 cv
1244.21 470.464 1243.01 468.194 1248.17 467.87 cv
1249.47 467.77 1250.84 468.145 1252.06 468.045 cv
1254.16 467.87 1255.83 466.623 1257.45 466.523 cv
1259.82 466.398 1261.74 467.495 1262.16 467.944 cv
1262.71 468.494 1261.69 469.291 1259.69 470.189 cv
1247.67 475.401 1237.72 473.406 1234.53 474.18 cv
1232.39 474.703 1236.3 475.502 1242.41 474.853 cv
1243.93 474.703 1245.93 475.252 1247.95 474.777 cv
1249.3 474.479 1250.52 473.605 1251.84 473.281 cv
1253.06 472.982 1254.31 473.007 1255.33 472.808 cv
1256.68 472.559 1258.55 471.535 1259.62 471.411 cv
1263.61 470.962 1265.56 471.66 1266 472.035 cv
1266.93 472.857 1248.8 479.815 1248.8 479.815 cv
1248.8 479.815 1236.3 481.611 1233.51 481.611 cv
1233.51 481.611 1231.84 482.359 1235.11 482.858 cv
cp
0 .429175 .372961 0 cmyk
f
1220.53 201.991 mo
1220.53 201.991 1216.99 230.614 1214.9 240.55 cv
1212.71 250.948 1209.42 283.693 1230.98 289.01 cv
1252.55 294.327 1245.88 253.381 1246.24 242.809 cv
1246.6 232.236 1252.71 195.37 1252.71 195.37 cv
1220.53 201.991 li
cp
f
1219.36 211.124 mo
1219.58 211.255 1219.78 211.396 1220.01 211.525 cv
1231.92 218.357 1242.3 217.279 1250.08 211.962 cv
1251.47 202.812 1252.71 195.37 1252.71 195.37 cv
1220.53 201.991 li
1220.53 201.991 1220.06 205.805 1219.36 211.124 cv
cp
0 .683528 .667628 0 cmyk
f
1227.02 127.452 mo
1227.02 127.452 1214.38 131.004 1207.09 143.552 cv
1199.81 156.099 1196.18 192.134 1222.99 207.51 cv
1249.81 222.887 1268.85 198.251 1268.04 175.203 cv
1267.23 152.156 1260.8 121.669 1227.02 127.452 cv
cp
0 .429175 .372961 0 cmyk
f
1273.96 165.313 mo
1274.26 171.304 1271.7 176.302 1268.24 176.477 cv
1264.78 176.651 1261.73 171.937 1261.44 165.946 cv
1261.14 159.957 1263.7 154.958 1267.16 154.784 cv
1270.62 154.608 1273.66 159.323 1273.96 165.313 cv
cp
f
1230.81 126.504 mo
1230.81 126.504 1216.35 164.193 1202.21 168.21 cv
1188.06 172.227 1189.19 190.766 1189.19 190.766 cv
1189.19 190.766 1187.38 147.914 1200.3 137.409 cv
1213.22 126.905 1230.81 126.504 1230.81 126.504 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
1208.27 175.584 mo
1210.46 181.476 1209.03 187.458 1205.08 188.945 cv
1201.13 190.434 1196.16 186.863 1193.98 180.973 cv
1191.8 175.081 1193.23 169.099 1197.18 167.611 cv
1201.12 166.124 1206.09 169.693 1208.27 175.584 cv
cp
0 .429175 .372961 0 cmyk
f
1696.52 983.056 mo
1696.52 983.056 1698.34 998.742 1698.34 1001.4 cv
1698.34 1004.06 1698.34 1004.06 1698.34 1004.06 cv
1697.04 1006.77 li
1696.52 1007.85 li
1705.91 1021.01 li
1705.91 1021.01 1743.58 1021.57 1744.42 1021.57 cv
1745.26 1021.57 1739.38 1012.47 1739.38 1012.47 cv
1739.38 1012.47 1726.91 1003.08 1724.67 996.501 cv
1722.43 989.919 1726.58 976.193 1726.58 976.193 cv
1696.52 983.056 li
cp
f
1514.92 889.198 mo
1514.92 889.198 1501.51 897.523 1499.42 899.179 cv
1497.34 900.833 1497.34 900.833 1497.34 900.833 cv
1496.03 903.537 li
1495.51 904.61 li
1479.36 905.445 li
1479.36 905.445 1455.5 876.287 1454.98 875.629 cv
1454.46 874.971 1461.84 876.617 1461.84 876.617 cv
1461.84 876.617 1476.91 878.653 1483.45 876.316 cv
1490 873.979 1503.25 860.931 1503.25 860.931 cv
1514.92 889.198 li
cp
f
1636.86 742.026 mo
1492.33 865.132 li
1514.6 896.645 li
1514.6 896.645 1663.12 804.42 1670.89 803.369 cv
1678.67 802.318 1684.97 805.891 1686.44 811.563 cv
1687.91 817.234 1691.65 987.424 1691.65 987.424 cv
1730.24 987.424 li
1750.36 773.154 li
1636.86 742.026 li
cp
.213382 .761868 .781155 .0888991 cmyk
f
1845.09 566.446 mo
1855.78 559.437 1880.91 532.48 1889.41 523.305 cv
1889.51 522.225 1890.32 515.989 1897.16 508.067 cv
1901.99 502.471 1905.65 489.702 1908.82 493.321 cv
1911.99 496.94 1904.13 507.084 1907.73 507.15 cv
1911.33 507.217 1929.2 487.128 1932.07 490.408 cv
1934.95 493.688 1916.8 511.547 1920.02 511.606 cv
1923.24 511.666 1937.97 493.579 1942.03 498.217 cv
1946.09 502.854 1922.72 517.888 1924.9 520.376 cv
1927.08 522.864 1941.56 513.007 1944.83 516.738 cv
1948.1 520.472 1924.4 529.265 1926.3 529.299 cv
1928.2 529.335 1941.87 528.965 1941.97 531.597 cv
1942.08 534.572 1907.38 539.205 1903.13 544.355 cv
1894.06 558.794 1877.92 585.166 1861.57 596.737 cv
1841.57 610.895 1795.35 640.927 1795.35 640.927 cv
1772.4 611.266 li
1772.4 611.266 1832.41 574.76 1845.09 566.446 cv
cp
0 .429175 .372961 0 cmyk
f
1907.73 513.533 mo
1908.62 515.287 1909 517.19 1909.13 519.11 cv
1909.06 519.421 1909.9 525.623 1904.61 530.334 cv
1906.67 526.5 1908.94 522.238 1907.73 513.533 cv
cp
0 .555444 .426886 0 cmyk
f
1633.21 533.996 mo
1624.72 524.434 1607.52 491.846 1601.71 480.764 cv
1601.9 479.697 1602.75 473.468 1598.22 464.032 cv
1595.01 457.366 1594.82 444.084 1590.81 446.749 cv
1586.81 449.413 1591.75 461.261 1588.25 460.383 cv
1584.76 459.506 1572.76 435.442 1569.13 437.856 cv
1565.5 440.271 1578.35 462.255 1575.23 461.47 cv
1572.1 460.685 1562.61 439.375 1557.48 442.788 cv
1552.35 446.202 1570.97 466.826 1568.22 468.657 cv
1565.47 470.489 1554.06 457.188 1549.93 459.935 cv
1545.8 462.683 1566.37 477.367 1564.54 476.905 cv
1562.7 476.443 1549.6 472.512 1548.81 475.024 cv
1547.92 477.866 1580.21 491.413 1582.96 497.497 cv
1582.96 497.496 li
1587.94 513.805 1596.62 543.479 1609.37 558.922 cv
1624.98 577.817 1661.73 618.891 1661.73 618.891 cv
1691.65 596.266 li
1691.65 596.266 1643.27 545.336 1633.21 533.996 cv
cp
0 .429175 .372961 0 cmyk
f
1586.58 466.544 mo
1585.27 468.004 1584.4 469.741 1583.78 471.562 cv
1583.76 471.88 1581.32 477.645 1585.2 483.575 cv
1584.21 479.336 1583.14 474.629 1586.58 466.544 cv
cp
0 .555444 .426886 0 cmyk
f
1697.08 601.554 mo
1697.08 601.554 li
1701.44 595.053 1708.93 591.369 1716.74 591.9 cv
1739.69 593.461 1786.23 597.14 1790.64 601.554 cv
1796.52 607.437 1814.17 645.811 1797.36 699.59 cv
1780.56 753.37 1771.31 747.769 1757.59 747.769 cv
1743.86 747.769 1679.16 717.237 1679.16 717.237 cv
1697.08 601.554 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
1657.45 555.896 mo
1630.47 591.097 li
1663.96 640.927 li
1663.96 640.927 1660.81 677.953 1655.98 689.507 cv
1651.15 701.062 1623.21 748.539 1623.21 748.539 cv
1623.21 748.539 1691.06 790.135 1757.45 784.042 cv
1757.45 784.042 1776.14 687.826 1781.4 678.583 cv
1786.65 669.34 1837.28 623.543 1837.28 623.543 cv
1812.7 583.833 li
1770.26 607.365 li
1770.26 607.365 1692.7 594.832 1688.96 591.097 cv
1685.23 587.361 1657.45 555.896 1657.45 555.896 cv
cp
.0223392 .19971 .57882 0 cmyk
f
1744.98 483.91 mo
1744.98 483.91 1718.79 470.045 1709.83 493.014 cv
1709.83 493.014 1686.3 490.633 1690.36 515.002 cv
1690.36 515.002 1666.69 526.906 1681.68 557.577 cv
1681.68 557.577 1675.1 586.428 1708.85 588.249 cv
1708.85 588.249 1713.89 598.473 1729.3 596.092 cv
1744.7 593.711 1748.62 589.649 1748.62 589.649 cv
1748.62 589.649 1775.93 597.633 1784.2 572.983 cv
1784.2 572.983 1802.96 568.502 1790.36 544.412 cv
1790.36 544.412 1806.74 513.182 1777.89 503.797 cv
1777.89 503.797 1774.53 471.865 1744.98 483.91 cv
cp
0 .683528 .667628 0 cmyk
f
1755.56 551.568 mo
1753.43 557.506 1754.96 563.486 1758.98 564.926 cv
1762.99 566.363 1767.97 562.717 1770.1 556.777 cv
1772.23 550.84 1770.7 544.859 1766.68 543.42 cv
1762.67 541.982 1757.69 545.629 1755.56 551.568 cv
cp
0 .429175 .372961 0 cmyk
f
1684.92 536.99 mo
1684.62 543.291 1687.83 548.563 1692.09 548.764 cv
1696.35 548.966 1700.05 544.021 1700.34 537.719 cv
1700.64 531.418 1697.43 526.146 1693.17 525.945 cv
1688.91 525.744 1685.22 530.688 1684.92 536.99 cv
cp
f
1714.87 578.726 mo
1714.87 579.137 1711.47 593.761 1709.66 601.491 cv
1708.99 604.375 1710.45 607.324 1713.15 608.554 cv
1720.35 611.842 1734.51 616.431 1744.29 607.563 cv
1745.18 606.755 1745.66 605.586 1745.62 604.383 cv
1744.42 569.481 li
1714.87 578.726 li
cp
f
1713.05 586.914 mo
1720.67 590.755 1730.25 590.832 1741 584.53 cv
1742.36 583.732 1743.65 582.883 1744.85 581.987 cv
1744.42 569.481 li
1714.87 578.725 li
1714.87 578.925 1714.07 582.451 1713.05 586.914 cv
cp
0 .555444 .426886 0 cmyk
f
1735.83 498.145 mo
1735.83 498.145 1748.72 501.553 1756.3 514.102 cv
1763.88 526.648 1768.07 562.922 1741 578.788 cv
1713.94 594.654 1694.25 570.082 1694.76 546.84 cv
1695.27 523.597 1705.61 493.884 1735.83 498.145 cv
cp
0 .429175 .372961 0 cmyk
f
1691.67 592.309 mo
1679.21 601.73 1666.17 650.012 1661.23 662.617 cv
1657.25 685.767 li
1707.96 596.214 li
1707.96 596.214 1694.35 590.279 1691.67 592.309 cv
cp
.779355 .574121 0 0 cmyk
f
1753.23 604.526 mo
1753.23 604.526 1751.7 664.018 1756.19 684.465 cv
1760.67 704.912 1772.4 712.059 1772.4 712.059 cv
1778.16 688.268 li
1778.16 688.268 1772.4 635.727 1770.26 607.365 cv
1769.94 603.061 1753.23 604.526 1753.23 604.526 cv
cp
f
1689.66 1030.65 mo
1683.91 1029.92 1693.84 1009.97 1697.04 1006.77 cv
1739.38 1012.47 li
1739.38 1012.47 1759.76 1021.92 1764.59 1026.75 cv
1765.74 1027.9 1765.89 1029.91 1760.91 1030.65 cv
1744.94 1033.02 1702.42 1032.26 1689.66 1030.65 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
1481.5 924.473 mo
1486.47 927.459 1495.51 908.028 1496.03 903.537 cv
1461.84 876.617 li
1461.84 876.617 1435.47 869.054 1430.14 874.376 cv
1425.31 879.207 1470.22 917.693 1481.5 924.473 cv
cp
f
1325.47 447.298 mo
1325.47 447.298 1342.28 441.205 1353.14 458.235 cv
1364 475.267 1358.13 473.651 1363.42 482.166 cv
1368.7 490.682 1371.24 514.886 1373.07 527.973 cv
1391.7 661.432 1168.82 672.246 1255.85 502.133 cv
1264.02 486.178 1270.92 476.587 1278.26 459.557 cv
1285.61 442.526 1316.66 443.188 1325.47 447.298 cv
cp
f
1277.78 571.973 mo
1255.3 564.121 li
1255.3 564.121 1246.38 575.521 1243.71 604.045 cv
1241.03 632.57 1243.71 649.34 1243.71 649.34 cv
1269.13 649.34 li
1277.78 571.973 li
cp
.0223392 .19971 .57882 0 cmyk
f
1322.81 556.661 mo
1315.19 557.447 1258.46 552.059 1255.3 564.121 cv
1238.31 628.962 1261.68 718.481 1267.65 724.453 cv
1273.62 730.426 1371.11 710.979 1371.11 710.979 cv
1371.11 710.979 1386.4 550.104 1322.81 556.661 cv
cp
f
1400.24 490.193 mo
1400.24 490.193 1393.97 487.209 1388.28 476.658 cv
1384.62 469.89 1373.76 461.213 1378.28 459.811 cv
1382.8 458.407 1389.73 469.852 1391.03 466.573 cv
1392.33 463.296 1379.39 438.52 1383.49 437.249 cv
1387.59 435.978 1398.31 460.077 1399.47 457.145 cv
1400.63 454.212 1388.52 433.154 1394.31 431.357 cv
1400.11 429.561 1406.36 457.277 1409.47 456.313 cv
1412.58 455.349 1408.05 434.201 1412.71 432.754 cv
1417.37 431.308 1416.72 458.906 1418.39 458.11 cv
1419.3 457.681 1423.44 444.313 1425.97 445.316 cv
1428.83 446.449 1421.1 473.889 1424.53 479.936 cv
1427.96 485.983 1455.43 561.171 1446.04 570.561 cv
1435.81 580.794 1370.69 604.263 1357.07 600.227 cv
1343.44 596.191 1335.63 582.725 1338.91 574.444 cv
1342.19 566.164 1406.56 547.563 1407.59 544.964 cv
1408.62 542.364 1400.24 490.193 1400.24 490.193 cv
cp
0 .429175 .372961 0 cmyk
f
1405.46 466.444 mo
1407.43 466.359 1409.36 466.801 1411.23 467.485 cv
1411.5 467.679 1417.67 469.484 1420.33 476.304 cv
1417.4 472.815 1414.13 468.956 1405.46 466.444 cv
cp
0 .555444 .426886 0 cmyk
f
1455.69 920.512 mo
1455.69 920.512 1468.29 971.874 1477.68 979.939 cv
1487.06 988.004 1517.67 1003.43 1509.66 1005.09 cv
1501.65 1006.75 1442.37 1008.13 1444 998.24 cv
1445.62 988.354 1447.33 982.049 1447.33 982.049 cv
1431.65 945.362 li
1455.69 920.512 li
cp
0 .471839 .377081 0 cmyk
f
1513.65 1007.2 mo
1499.19 1008.63 1456.98 1010.15 1444.68 1008.58 cv
1444.68 1008.58 1442.37 1008.13 1444 998.24 cv
1444.4 995.823 1444.8 993.62 1445.18 991.671 cv
1456.33 994.602 1480.63 988.364 1490.25 987.086 cv
1500.7 992.092 1512.49 999.564 1516.29 1000.19 cv
1521.79 1001.09 1521.79 1006.39 1513.65 1007.2 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
1317.46 963.573 mo
1317.46 963.573 1316.14 976.566 1316.14 982.292 cv
1316.14 988.018 1321.48 1004.17 1319.01 1006.64 cv
1316.53 1009.11 1245.93 1008.8 1245.93 1006.48 cv
1245.93 1004.16 1258.41 997.107 1275.36 992.262 cv
1292.32 987.418 1298.08 968.639 1293.68 957.848 cv
1317.46 963.573 li
cp
0 .471839 .377081 0 cmyk
f
1244.79 1006.64 mo
1244.79 1004.47 1256.37 997.818 1271.36 993.236 cv
1287.34 998.637 1309.53 994.181 1317.86 992.591 cv
1320.4 999.25 1321.21 1005.56 1319.9 1006.87 cv
1317.43 1009.34 1244.79 1008.96 1244.79 1006.64 cv
cp
.994293 .80737 .385443 .299168 cmyk
f
1394.1 746.434 mo
1406.76 757.665 li
1406.76 757.665 1421.02 796.262 1421.85 798.81 cv
1423 802.352 1469.18 951.154 1469.18 951.154 cv
1437.01 962.73 li
1437.01 962.73 1405.11 900.59 1399.83 879.008 cv
1394.54 857.426 1341.69 767.135 1341.69 767.135 cv
1394.1 746.434 li
cp
.0166934 .111543 .329381 0 cmyk
f
1338.17 769.337 mo
1322.75 966.557 li
1287.07 966.557 li
1287.07 966.557 1274.3 818.96 1278.7 767.135 cv
1338.17 769.337 li
cp
f
1275.62 570.696 mo
1275.62 570.696 1298.3 564.75 1324.07 563.318 cv
1337.41 562.577 1355.34 565.41 1355.34 565.41 cv
1355.34 565.41 1371.64 601.967 1376.48 631.918 cv
1381.33 661.868 1407.76 757.885 1407.76 757.885 cv
1407.76 757.885 1354.02 799.287 1275.62 771.979 cv
1275.62 570.696 li
cp
.644587 0 .448096 0 cmyk
f
1336.7 537.956 mo
1336.7 537.956 1335.99 561.341 1338.19 563.537 cv
1340.38 565.733 1343.45 569.375 1340.22 574.953 cv
1336.99 580.532 1322.97 576.973 1316.44 573.779 cv
1310.17 570.714 1306.12 565.012 1306.12 565.012 cv
1309.39 527.973 li
1336.7 537.956 li
cp
0 .471839 .377081 0 cmyk
f
1327.37 547.646 mo
1322.87 546.07 1315 543.027 1308.93 533.159 cv
1309.39 527.973 li
1336.7 537.956 li
1336.7 537.956 1336.53 543.661 1336.61 549.7 cv
1332.79 549.542 1329.52 548.398 1327.37 547.646 cv
cp
.213382 .761868 .781155 .0888991 cmyk
f
1304.58 501.527 mo
1304.58 501.527 1303.91 487.78 1295.47 490.45 cv
1287.03 493.12 1293.46 513.869 1300.46 513.187 cv
1307.46 512.505 1304.58 501.527 1304.58 501.527 cv
cp
0 .471839 .377081 0 cmyk
f
1331.12 456.621 mo
1331.12 456.621 1344.33 456.327 1351.08 466.604 cv
1357.84 476.881 1365.18 506.244 1354.02 526.505 cv
1342.86 546.765 1328.62 541.773 1322.75 539.718 cv
1316.88 537.663 1305.28 533.111 1299.41 514.172 cv
1293.53 495.232 1297.79 452.656 1331.12 456.621 cv
cp
f
1278.15 570.076 mo
1284.17 583.677 1298.99 612.961 1298.31 645.261 cv
1297.6 679.094 1272.15 701.053 1272.15 701.053 cv
1272.15 717.776 li
1272.15 717.776 1300.23 713.353 1310.97 669.638 cv
1321.7 625.924 1295.87 566.536 1295.87 566.536 cv
1295.87 566.536 1292.19 563.906 1284.88 565.947 cv
1280.01 567.307 1278.15 570.076 1278.15 570.076 cv
cp
.894041 .730465 .20148 .0501106 cmyk
f
1339.83 563.195 mo
1339.83 563.195 1360.94 676.771 1388.3 684.13 cv
1383.54 664.768 li
1383.54 664.768 1355.34 572.881 1355.34 565.41 cv
1355.34 557.939 1339.83 563.195 1339.83 563.195 cv
cp
f
1396.93 757.536 mo
1315.05 757.536 li
1315.05 664.234 li
1396.93 667.873 li
1396.93 757.536 li
cp
.213382 .761868 .781155 .0888991 cmyk
f
1396.93 660.596 mo
1318.69 660.596 li
1316.68 660.596 1315.05 662.225 1315.05 664.234 cv
1315.05 666.244 1316.68 667.873 1318.69 667.873 cv
1396.93 667.873 li
1396.86 667.848 li
1391.46 665.819 1391.48 662.611 1396.93 660.596 cv
cp
f
1394.69 661.673 mo
1321.38 661.673 li
1319.97 661.673 1318.82 662.819 1318.82 664.234 cv
1318.82 665.648 1319.97 666.795 1321.38 666.795 cv
1394.69 666.795 li
1392.21 665.209 1392.21 663.258 1394.69 661.673 cv
cp
.0166934 .111543 .329381 0 cmyk
f
1361.04 662.197 mo
1355.89 662.197 li
1354.78 662.197 1353.88 663.096 1353.88 664.204 cv
1353.88 664.384 li
1361.04 664.384 li
1361.04 662.197 li
cp
.994293 .80737 .385443 .299168 cmyk
f
1356.1 662.204 mo
1357.33 662.203 1359.17 663.246 1360.21 664.533 cv
1372.44 679.699 li
1379.62 679.695 li
1367.99 665.271 li
1366.62 663.574 1364.19 662.199 1362.57 662.2 cv
1356.1 662.204 li
cp
.894041 .730465 .20148 .0501106 cmyk
f
1275.62 570.696 mo
1275.62 570.696 1281.8 576.883 1288.4 600.348 cv
1295.01 623.813 1298.38 678.752 1304.1 684.478 cv
1309.83 690.203 1347.27 720.007 1354.02 718.979 cv
1360.78 717.951 1375.9 700.334 1380.59 700.334 cv
1385.29 700.334 1384.71 704.591 1382.36 706.94 cv
1380.01 709.29 1377.14 712.006 1378.54 713.4 cv
1379.93 714.795 1379.93 714.795 1379.93 714.795 cv
1379.93 714.795 1400.86 709.29 1404.38 711.345 cv
1407.9 713.4 1401 718.245 1401 721.769 cv
1401 725.293 1401.86 725.229 1401.44 729.109 cv
1401.02 732.99 1400.05 736.083 1398.21 737.919 cv
1396.38 739.754 1373.25 746.434 1350.64 743.351 cv
1328.03 740.268 1300.43 729.403 1280.03 704.15 cv
1259.62 678.898 1263.71 599.531 1264.17 591.617 cv
1265.35 571.577 1275.62 570.696 1275.62 570.696 cv
cp
0 .471839 .377081 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 24.0.1
%%For: (Jo) ()
%%Title: (6583.eps)
%%CreationDate: 1/17/2021 10:26 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6a`d6regOY\ZW=dBNTiMr#`6Q/H;%s*@,)\/&0N2/(?3O8Ec<CM:pYJ%HA*9o[;OOp%-N,8M?qU#J3a+&@rRUAdL!imm+>&!
%/fIkD8RXOFEoVUHpa^1M&4Fl`#a-J.K]<8!8CN(db@8$CC@$$EORNl+1'"#]R%L8',Mo(8-fB'1(Cp]InDUb$R>ok(<#()s4.W5O
%?4a#C6g?`h2O'UnBOM>D/C+]R)Nm53)1lK6q*6IRnSD5;7uUuo#qq$^`JIW9`pqlcfr3/Q@=t2jdI7&MlLe`r\cY+5cffSaPokRL
%lDu7^JHM^P)b[2Y?W7L>r9Pa.6'<A+#D0`>4CGt?^\1hFpQL>:'F2Q&UBF.*#RB_3"WtN6bR_P&"GP;*ru=4Q!I+Z9n/2-ZBLVCh
%5_&i"?6"pC:Fo!L#f+i@r+Ip\,rC2MrBWDfR_j\V&:OoE&/b"J_-er264X17k+Y.tMkZMuL-d-tJs_-,mAD,i@"9N]%n%h!K>-9-
%+n-W</K##"-jnoML#=@AKV8o%pj\AlKD1QDI#rm&UG;7G0X)`24qmPn#WPS:U+,k'L.8hq.0q"p5R.?u80l,=:dKn'!DUGfEIq5A
%P;FC>"NNgW=:ehidh"VA43'ot#u6/(6kD<iU=A*8M803dW\K+pUV?7pLrSE+kTJsal59XJeKaq31C=T,E/Hu6_1<jDJ,MW/96+Rf
%+jb:P:sE0+"Ef8@0eu-M^^7q_."(N."hr>7!biF$KFIi47hH/\?Jq2b5=SP490c9E-oii/JW[c]"%]Vg:?$a!a.H>X:/_0+K:i>b
%#blSE=9bQG5>:'-\L7m.+$E>[5P(rh1EH%]GnZiBSA5s-Tb0DIF=jGu!YbsFd'=^T5qFioc6.]Li=MSaEK^S.JXq*93eW8ZoKa7U
%2[#K]TFLV8)VaGPP/p1a0Re0rXICV37Z9<s6Gj3'^l&F4Af%DFQgt7G;4:ec=G%VgGXc.RM[f=bR%I3jJ<M,`I%mUB5;!u]p36KY
%jTft"UAP38$O+3E5a&qsUi:7.KYL@em\Ra<oB00:T)H[6IteE!/CS1L\Q)F];P!\((hjuR-RSka2q;M&/)H4F#uF3dha4VO0+2'O
%#>_G4aRTbFk3-0"olgnn@)P5Z!LG,%1W[V@+h5Gl>XsYHc9`%pc]M0Rm'n2qd9o,5hbSP#O<K&SVZ>C@LBoSX0u.1[$5l/i#rmp+
%dQtc;9Ag*Fe_`AFfJW#?JJ*7W.W@roOm@)K0ELO,-\rFWDj;!Hm`J\kbC;8"FT_^ATl+=!1/qSYW"]gdTlSVdED@'QO!M!j"bja-
%VTK5fLj@0d30)4mRhA1e<`AcN#rHQ/r$!fdkH1d<W"!i'S'21+5I@Qrn,PD%*WPZ5/%I7aWq%smQkP2,,X:]'J,IK]kR)1Xct#5$
%+9LeO%@-W+pu4![Oaf8G7&C(_!8j+s?A=q/p2gT('Np(D$D'[n(]W+YI%'GR!+XQ1r+fpBNTGkNU15'9:QJMI))Iuf2(Ug?ESj"h
%"8K7g&d#AeSZY/-k"GbZ:bN)dXoBCAMC)W-T\bK76`/$-.;3,D#ugkfOZJ+-f:M9DQXY32l\itt^i^&WEAegS)M5aXEG]DsE_tGD
%Rc'CAOb08;HJB?>,=?n!8aHeF0Uff@ekdGB'DV/+ZMjm=<Q=O=D1jI-[RL?QAb%W<$2=pFbGVdW!fb6RV;=M.fnMlM[)=d#q#I\@
%bi7;qGIm-IrjqA2=s!Ju?/toJC(!-_*Nb'spnc,h'%c*qqY-u-.Z@f/"[%Le'6lWdI0>SPNV-lnUj3T3%XcIGL+rCG="[bZ[uW_N
%\IS8kN;.fs;oE)DCW)9"UBg9ejOuDH"jCrg^k=*klS+k180p]JN$&CY0+SK`Z4[(u^-cB1)XTM==W@WQ*HX@1X+@u>r+ll9-eFUf
%)IR&e,X[+`bi.?L7#ZYdY9KOp:K\3""pJX#kYjcs(6s1KVFA%YR(khGKLEP>i$SW(L$pCClft,H!ZeR/^?_HNqra*7cO((_Y!8"i
%:pL(ClPoGhfgK:6/&nnmV'@_P=?T\P$2dp=*Xd+I!s.b;d\[9[-HURI;aGoe%.n"[rIhSH.@V(*pDH'\ka@KIn=N.>1_\V"&F+Ai
%r?TN]mA4XPq54h3T+mEYc?MLlAc\jZfP$6^h_jQp@0G?;-RQg"GB<a^KMiUu@Y`4M=f2b-4P&PWa+pg.gfVbNX6C`jNt>#\/'&8K
%XN3qaW.UBNkU4[m<10,J>(r"$ns`+"_YO-4n>4g0+`^3::9!"tQ.&FgaAXR49'$Q--L+FM;^uunWLT!3d#hp\4cocV_d<`*oT[O9
%-0CH8ST;7_<O,OUGKT$]:+f%cTj5l1I#U69aaRaqqLIf;It!6..t)FuoR'0\9KD2rMPQo7B"r>!+/Z3B5RIEm;O0Zg<+u%.!DT&U
%BmH^'Ngb%5Cc^[FEDi:;_iC4/9V/C.0@g"h2l0<X%Xs-<^##!=G%f<"cBEn200S1#qu,",H3MFR-ti>lR3?PDF(M3pJn(;l3js!$
%B4?qdYk8LDl`#lC_*<i1*_)B5qe-5*anp.PSLCPU[.!j)Pi4eXr74.?d*rrZLacapQ'eft<SVu_e*+^A':AT2,)k1c&\*/J8.uJp
%6\9g]oB:*59_nQ!;rN6Z.Ls*\iPG0n6[q`.R5%02i5SYd?f(5MID`#0VeTp``fDn=d2ag/ih$0073AUJS5qX6aW>kHQ/g4BJ;um3
%kgpsf#kV8gV8K\M[?>>@%HM0Jp91e^bB":W!W7W[Z5tmPRSG=i_[ed])sZr=_bYA"*sc$[hC13(-OiPHUhA!QURgF"-G^e'<e&&\
%J#5KSXOq//-]^%:dI3@7VEB=n-r.C%I[-,:^X+U*J&[<S:I']R%_PK&aL>'!^aDR:rEI<7`8U/pd^98B[#aI-,-%iSha[n\8!=qQ
%?6.WBLeO/)l*9I\^]TnH_4/1l#HpJlRV?>9&17R)=.]ugI=Q%Q="msql$Uh!Gl9!8F#%&Lj7PLalembhN]Qs_=>)hU*;kKaS9D^i
%_W9:Qg%'5=ISSXK*/rJ]\fBtNG[6'kcs=m44PeoG'.k;cpXDLQ8%e"t3h@S2T\rJepU8XjWFMG<3bXrH4`p5)V_.Osjktc%?+0%f
%2nd^_/=!%9b]qA&Fd>NNaO%86[dhFOd?i4blL])m2BVa*Dj0=\';"Hmn:`?'AoaCo7upe4FI+dm5^,9?eW1rbe56K2)ZQdlR"P,o
%f^d!qL5h8(lJm>&d76@Ao`FWHD4LMfY$LYbYjIpOF-t!mnV=9(Fm+"\XeXTn4JkjY0u#c15.'"?K*@F2`rc^A-V'aIZ]'nRb93AA
%^_[aN+D1lS=[\)tMH'=K`H8^3I!M4lW`Gdb7?nACh@kU*Sir;Dm'Gp>l.g:2j*4nfL/@m@Lsb0VQ27pSIYA'[YB4OScQ[B\N:flA
%:1lJRm9%G2;5O?mZq+7K10(KRY^Kf.`>n<P87D9XRI<2X!F^W!LcPVH)=k+)$KrV1X65Kt)<t-V$YIVBFNk3fmi'"Y\<uY6lpU)c
%V4B#\LcP6NLF7?#M/iT[>L*aOVl_@gg(%XDaqoN_ShAK8kg&;umR?AfV7e:'LcOik3R)d(7!tiE-p#5N,MA!L7k=le-L7s;VnFLV
%]dWmmDt=_;U?F??L[K2se6\Bb=5&S,LR<_g3dWcXSG&ZsY^QDKHVnlZX@'JOSZfC:71V,nP"5Pp<LRFQ;km!O+.-?+.Egbc4AXQ=
%YEL5ln,AF/&]AT.`Fk4h9ANsBaLBU]rf5P_/p&,/s8$IHHg<+0+3RA=Vd!b.G3t(O)Ki?$?d5b<&F%<>Sa>&H[;-Wlr,N.r^7JL)
%9&UZrQ1SV;:0-al<p^U&I6"A%Q%HE-<BF?k%p:dOMGWUT0BsXSERVaUT3YM^WWg2e2#?u(U/06/#7F;UkVS8u3qL[B\PiJa"E`uX
%PK-kU[A?OtqcQl!'3OAq@ehM"HuJuCK:Bnps/$HSouVYH*7`"UgpkQ$\?Y`83*"_F-7gC<Fe,1,^j[&5?h7#/OW=as6Tqli;"e&1
%dmY\>-p)s;:iHLX+YX!>!.Q^*pb)\4KE"G,KAlRkX?KqbEk:aO>mp=]k:>EaEbM/oIipWH`3T/>H(AJMf8IY0AeVpCErLpMp^^LI
%LH\9j_It,e5sA89l$*U6d7fi:0CU"[_/)h?3q>/5e3X1sdL,3:'+M@XS1)>WJNb[Lf0P&?RZ`O4nlX,g;-E"aF<R4s<R[[DV/#cQ
%Amm`6d,RiTTBJs4)!E'SF(@[6)N7ciO0ARR43:u;M"mVt4Iu++Sb,"Gs.7ek5>%2UrV$sX*]u8brfSqK33E4PepfoFR+(p#S@E'5
%s$[t>XoK,;7&Tc@XndE4)L,HW4g"PZ-:+0QI#jt?H<Tq="e!GGbu`(*lS-:_Y;_rV.:EW)a&nC_D*7>kb4_CfH/[*J,k>2i+9;I<
%#@>3FK>R9d%X^/T\rE10bSN$U3\JjMcGUdFDX2UeZr_g.>4ACj7XE0S5p*c=SLS/*go3V`WfWc$A3-WQNnE>j-9KR0R2eL^qBF+C
%,9Y]L,J]aeI3J0@'6mQ8Lho!oLs/tB`UQnl44VZ+E<u86I7s"%"\X):8(!k&RiBTtXk,k=bhW?kZP8>G5n;(jD`XqM$J8-,e"f!'
%LaYPjr2G$AdW2'ZR`>P$WV4-hSLQ+E?;[+cfFA1X`34:f!roQ;'cj/q+jpl8@Q,AhBZ\LhS,$h$P)0\]\9d48GW?LF:5,$5iT4$`
%3UXc-]Z_Q9?KP6)<.?nC?;?3@;rQh;GW?LFF;A1HchW$\I6Im75cW-DStiG2IAf,F.^^86-H^s*:OBZhiXd\mT%!;/b9m3eZi04&
%4bDjm.`5td&<G3]la`hMcnCj71K=q`U'^dF"V9K>Sh?EjAES3KM<Q^aUOHir1k+t:"4L[=`ij=`dg*5UPB6XOcLEmGgN=IPe*Tf+
%gQt)s:&c*?0.$1kqLIf;J"BtEo.R_9H^[^-nio:!rdC^85LY<+rGd!$08f+2fhg5qr*P5^=pI8ZKO/T>8l1^>[]=K'+&1%[8'c:i
%&JkIrnslm+3W0V4J031cYF,e=RUgm-En'UbjclGZ6\^>ZQt=$erlK;*D+0r3I@AL]8#2Uq4J5&PHG[TrN"T2Po.Ri1pOG],-_gJ:
%GspS>4f2W&lJ"_:"?b*n#'HqU*'om6Wad#Z!$",O0b.cLI-E\H*^)U80b3!fT'@/JC;s%lN)LbW8Eq&lN78q]bn?de9@$[HB@_.c
%aETVCF<p"<Y/A^\i6RST=K"l_eBobRWH(c?fALmZ[&K]_M`Aq]it@V81M*m:q`\N1*BfP>)Z46qf(m9(Ys.>^3$JGO!.Q;6HHlc:
%cg<#lg&:*T77VLjBX/XA`-c^6O*Pl\p-TJb.&QKZP!!$:FLj*ho<1g8jcFh`0[^UU,I#LXcPO1f8P]V6](]nXAI!2CdhfYUkb!0<
%d-iI^1hL3D`e2B]S4,_L;<X^O3iD:0G1(E,LV-B9df#VdA#BcC7oo<5,I#)Cm^7(^/ZhtOa0ar$O&-=7_j;uSn5%a,V.20pBg#m"
%gOZFR?se+D6/%YN**X^1'(kj?l5b.&Vb\_=D!mP4S[,e)2L!=+:>+EgCedJ3G08qW`>&5KZ8ipQgeZVY@:aL@7!>BJg_\aJF\:gl
%l.d_Y4/I"rFRGL8E.LqKG@]s.#QG\Kh5qfAq]_fU<ZQQGVb\XpT$QZ,"fHb9.pU-aFl$Boq^uD=?uh:h2/l'8YJf[Sb_)>I?i"(8
%@Fo'!`tSiN0)@[5Z_d7&hFB@bH9=_6jS+gmgH<q&7L\i`_M%/mdeBuK@d[4lcKcp$cJ^sF=Im;jQ5C_P"ne-ndE-HYVJ2El9-$sG
%Ia/pmW(mN\:U=nFrdB(`QT(dp0m]J$T"o4AM9jV\56nb0L@b!QK6qcEHR47/&"M(ZT-?YslTpTO,O*jP1nBIdVSgtHN4sgA"o_YH
%l$`l3?F!PW#HrVarLst\Y=!;t^U_`cf37)Fo!8Hll+!pTjhWmHja.0tB9@jPcR7Mio=Ml;1l#OnP.hYWp[9(-1'4;_CHosTmM,+0
%7D/5c\%\GCT#6V7('=G"NjSW'VpVE[8M3K%q.h15fae\)HK5bSSV!Tn(_iNMU0g*GqKrbpF\q_HGH@EGLXY\W;mBQE+<5U1>DM5X
%C0_LJ'F+d;/BuU1K@W)nM?`XXBD^<6J&l\/Q/OQpiaXgd3g-).(5tl1nAChIH9B=='-2r/de)K[77Q@6_2-Y7-Adq-4N&+eEfPq9
%9MU',0K&4DrM#mOIcu7NK1Z$`2guM!G`3Bue&qq+2<aj!cLuMDnQSM'PT"Of`S7Y'iq&FRAGo[b:B,oI'(*BFkB&H+B3FedM!!Wn
%cA2MWl+"su-mhXu4?_N*#O!!4"1SB$s1@[InsB:hUQ9_kmfN"-1HSnSbIc9qYg(,<^?"=TKFYcsjPjgtTqf@I_t+TqanU8fRSP*)
%ns,:6H?A4qVb8?H.?Zdfq#X4=E4.TPgF]a%@g7s$_;qu@mL\adY352t7i>'ObW6`/Z.!]]n.\]k*:$Dbg0KaSZ^gfI<RO6uYf*pA
%8G=M>HA"T)WYm"jWOKI8K)T:rP+@Ro[A,Q'?V/APZiMt1FZ%@5eEjNl%0-1D/GZ976VrXBNs%C0Aj#JFH'?)GlMS\sR\L/:j<]H9
%(T&4n@A?ccj&GmM!ND_DD[E""AN2nh;GLFIJ'SnRh_]oq^')Q@aQ$AQ1[Zl&L4k!`^n4e3_RKr!6$E`_k.`:s4uZNNr:-tk$#0jj
%D,l#hr`7AbJ&$RI?(oL]P2^:=0U.t[dq;*:7I5U\mV=Z#XXT"f\\@DYk+E/Li-jPPX>AMWluO#Vo)Sk9eAM(kUhPbu;P5m6a*_M,
%5oO\N6iXuP$$eVTY9/3aDG,d`*F>C%"k0_9(B,;KDfAJ*++ZI,^oBO"c+*mZJu3@T)bkR#$%s0GnBYPW%K,s\J\T^M+"p?CBEAb,
%V<AI3,1-W(r!#?<0UrQuo*=^sn<([2S@e7Z>60+t"2Fd@=CETs*hP/SpCGVQK<kSdl%6aE%H1,n=7>T]Vr?P5pV6aOnDF9;huE/[
%s6JSBqnN0WJ,_b5rr;ur^]+-13[U;WY^h6=U=q9l.`8TU`6*a4gE.<DrNQQQQqAR&ir`%B1@G-rgf-61nZQ\?)lN&3k]4"TZ[Roh
%BP!h#$s,T=WLt=DJP"cG8bj8!<%pl<"7Wc"pdD8KfP=>.5T"N=*2a6;pieps+m=3XD;4gt=9*lf^Ie3EXUB:+K#V1($kLcWq_=7c
%@j:tf61B@TJDiJJI\;=h++3Pk!AXfW+7Ra`,LC5A%lt0riNW7F+fef_fLQFgr.l'jL!p(u@pm-<?iUR#bd@9MkQMK)E7B\_0J4)p
%osU^HVuV[jD@"$_!ff?-#AGA-P=4CED"7f:,gZMpM1^Bc;?Vtu;QsAq6pi=m(!<q]"\+Fnr-m9_*X^<)N%dfD&uT-PO>_n>'Z9tk
%PQj^sZ"#'EBhd5qD(CkY"9Kj*#"qe/+=/6<!"=ZS15$6T84YRBCb$-@gBn6Yj$?(lT;Jk9Y,6dPg4tn<!;VDR8APBBm"rZiOKrV*
%0T<gGI`NWS.m-AE,003Rlkg*7K-?&B#+.r;dn`<+:h\%_!_*I'$VI"be4QEL;9d)\!>/0C9u.?4er^?sq+7B5/,nIGjMBb4eh*=)
%S0L?cV\/*J&@KeDdLRZ+dQ$mBME;Lb1`=rc\RjMneSpBQ_(gSA)444BOFJE#.!\?R&5H><\5p`pcP?S)8?Ymtf(R;Zg-G#QCs`$:
%m(s[4c.3%>M?Gh'[`'L0`'X#7Js%:ML=('*!/cO8&4&T=j$PdG0r5Z5>1;pp5AQL#1bQ"eE/[-K5iEjpI/p()cpi9Y!C$njO+@Uq
%UOgg'!(t_$rfP/(\tu)P#R31tVJ9;o$NY+"BS%(\eCkuI[L)puKL.Yedb#NKJO>\m"$uMf$7H$<7BS&GB%*"S$XA-gClle<GecNS
%/%sHL.FF&V*.mkcQaJ&g6j)+1OJ+Pf:q&#6clXM>.!pQ]!1l3:^tdsI$f6T!L;899a9p9ba%0ZF"#jD5K>1^0\_abo835g%VDUW&
%3&-K[Q:c\O'&oZK#s_!;;DK6&L>Y+()iZVAC2t'D/L.cd"nErNT^</8<K[5lF=BHSK1Q5;)c:,Dqku+9YcIdkR80p`WeFkV;-N2-
%7dO5L1D5KP/M5l>#8j8SYH$T<Sfd<<(52U-!(6c71?/!O=dFV0i89'%L4BW(^<"UkE<J]qeI0Nj.A0);4,3ji]`79^.R>HJ$0!iD
%ri9>P[6QUSC/9f/JqV#*Bs[6"s,ItE24!21+;e_DDF9dJRFUfVNAYt:T<^J]B[6-7S)J/LAB%C]gMtf:0!RQRX`%0N8;Y2/+gOcC
%Yj^>@EE0-o_H@e%<8_IW!<W`r^`3BP#%=M=5dV((9SjY5MA;9>F5o-*Bl5ujRI=]V*%omuAjg7dB>,a]nJKe/DT5pOkctRK?S0D9
%Q573-WLBd1J+=/dT6l-g_1OQJr,+b[RMs@.KUP"7H"9oWb66n!Aphu2#TLF@+#qmq8U<*&a6E&F=:HhgnpZ3S56^YZ/MLYCcLN)p
%?g7p*#r/'B$48".I@7tq=Y']NW#0CaNHY8;9r@rQDLN05X[8GP[Bn3d'[&P/[_=KU1pXU5$%QI%hGqJTBVt'u8'e1n2hnNuhL?.F
%^]KhQft#Dn@$_N(="<a$'0?uLq[;9]NYa`DG44h*BI!u4?`=`(c\S."A73N$adRk*jLSrX*pJ-bn3:e)_Vb!T"UKGl8e1+PbbgOW
%3WSdG>?*LBARJ@O`f@j]kh">a`4W)<5=4q5*m`H,b1#4>#GBsE@*,</fD.I>*+\si'*f]X+sG=/qbOB,rs\sA,]h%Z0]*q'#SLGf
%6jE>t\G$!$4H'@c9V#SY+D^F#5r=C)S/D2Y=ZGOk]Qet(p<kg+ot3Ni%:oQd(_eU.=&$ikJcqeW=D1fIr]4`JI-=r>$Y2!RXYNIV
%2XVVUA-!\,6&]<l8k^%S>eaZ#Tq<Bb\N?u2lI%ZroV+$ln0dcdDHKp\6)ZW0(eW#^5@aPkTdi`JPD'4Dcb<t)B>dI[FY.noTt1o_
%]3YPJG]()VZ)/1C0d?YGN_Gi.,-<-RrH/6L>S31@)\Oqu0[uJh`/<@-bN^39'#>l&+TjMR-Q1:c_@2*+<P7)pWiUpf$:"o8'qR*'
%]T*@"EF$J(2#pmfa)tuZL^>kG7I^(c`imZ%>$=lJi"'K3%9HB"kRNDg+^tO4'gRh]!<g09`1`O[[]3B>XlnX[,lPSR!gF'ce^urk
%7DF1XQ$gVPK;a[oPSLs<L'IOAAB8jQM.q#n-S>6>:AKPAA_.<\:,1dIbd>*Id;$++e,:h*SA^G=>S&s<TIAeNX35J?ATg+:.Nf@r
%TuI/Jc_N/SB_Xi(-;=L#p,o&pR5WQ-P6i)Ge:=ut(b4EFE?]GH8PCTN3?L4+m!?Z:[MVX'2jW>F:X%0i;@-mUF(<cTPsf&jE]4rB
%YM0$+=oOSH!:'W2<m7J>We.>WCe<hE4Ck>s=p`T,ko)t'Y]2Ya`Os@DLLDC!SalVEBMDN\eUPrWKhP*)-8UrI"5jMBe]A=.kh)c3
%,[,=uYiL^sK^R:T"IF_CJcSSJ['#Jm[\3kqI-*(RATnk>'M/uFW"qA"qa-2aWm9O_T(QZNoqtjZX98<nh0G2orra=-?hi,R7]p^l
%)MG:Td)aBm#\&?:Y_t#7VSab#rRKOWTb6,Hi.9^#W_Af*atbB)c;sG'd\:K/-!,-X'/W/HK$>b2Qr^+D@rB8e+AHU$AU-QQQ2U):
%Ndu6^'Z$qcfB+L`<:c?I#[D/\:qk*B#(iNk^&p9mp('5-oaDT>euH"CTkf,CM*.UkeM+u5Hj[g1bBQI^<sYdE3/%!%0*U8?K^klo
%kohn)Df!Nger83ki?<o/UR5rQ0]`B\E^lX=!"En]D2)-9I4Yi[iOK9af!,)I(C3J+E,et&D#iV1>il5b555IS&Y23\9EEJ;7<Tgu
%RKgJCR@AVj7UFUcF41/o=%[h7hcR]IWdn,N[_EcPd%QMBdL[bJ*jd9k'#)I^3B;&07WWutHE2r&^iPCpkkqs6rfuT`l+S=D5>u2V
%_K[fokYM8`f8il,3<LX\b$bH&>,RVJ/,qg[B%4jsbB_Wr:-l')fIenclV86@=$:D>&i4b6(q.0a(8_l)=JSAifbo?hF9JklG.1.S
%KC;EoeEmX=?NRZGZ!O%us(GSm.heY^Yd.L<DN([@r#F:Bh'3=N$VWijPa^@$R`ZDF,=.\O_@SC%6bl\kA:H/:?#DPu`8T#P<J#bJ
%lq.V(7<AfD.pG]N@N_(RIHsG.Fj_c25d[d'7-VK*/if9f2.cBM<131a?7e4>X!7N@*5KshGHkPJ`[m@k[jl1hhLr>Hbt0,aqCIW-
%8I7WGO+uLLN1#B+cRW)D(*S;Wr.kr?dg^PLbAbtec_`8?>nj!94&FHp;t$+@1Q"mpgRrk&aZH'$VlQJ=gMj&sk[DLSf@r#PfN"7[
%XYLD=HsM1Fp4Q07^P3A'G7!XEO9:s=5eK.9g]diP@;YWTJ34=>1p_'c2hj1V=g(FD[Ynr'lj5W=#n&^G&^]$^0&)!l5e5sL6e-G>
%bk@$j,75+_4\?ds();t*-@Sg3DIj&h8*kOJi/X*mB:FoITP:;[h?XlTJL5bW&\b@u`l?rP9U@_QRCM5.<iY7&6)s5K[Z=U8$j4T=
%/fqmdTI8]dM0H1RM"7-g*lm`<<sWgRpQ4[Z]V&eL\!;Jn9t]b9HS8k5]Bn,`=Arm`G7m!&pc5I?8U![C&?[O%douifG6qZM:#Zm&
%k8h@b2mVFfdt;Cp5^m+-A1$<+XBceI5k?%@F9SHA91=fn3Q%Tn>@ICJc>+A6!!k,-:^TdsZL'LsYeJV!`.]r=@iFRMD8((HDd0$_
%JWQ5NC3fl@\.LEo.^S0mmU2Bc.sn]8;IN4N,jl+U%RRQ1(rQJ;5inS;%c3dhHbe!P%INV=Zj==Nno4*po4(dKG8lm&8OqDB0ph<o
%Rc/S6K9Vdlb)q`+=@$A\Lg>Puq/Y;Okm(YkOPA__Y9L^-&R$V@70iT[=`aZ4n\%IOdp6Pgap+XIb?.hcjEDPq^r1l;Qbddt<qTN[
%DJ6"-fUmc$^pKBm&.C-AmDlcoR2/\CPd=A.]'P[IO7bmM+E3bX"S(r7,19YFK#iLrDf:t-bEduk)]adk%D4Be'4Dd,DY'iH"I&XN
%ot=+(ln:M:+;E0\LjS1$7;iQXn)*QS@@TGf\u_hhpKCL+`QY_cCUp5aT1Mn)Ln["b(Y;RK&MO\e'='LT)_%]_p5[(o3*#k.*H2EL
%os)DH!JJgrDcTaoHJ/Yt[Y+6bj3Fgo8d:_sYWHn?`%\`X.S,2_;$XBjh:Z\c/ir<W^+XRjZ<Y\.<K>!!gn7dD;QkGaoQs*%@perC
%D.G.u`:Jm%fNi<EnBa-MdOmsdp:@.X&L<Y$PSMQa(]/Rq9_.+]RGB>"+W%L6Ts]V/*HDg$HcFh%;@qQ-OB3p.Jo+%i:Q7gJg/FeE
%")h/"2H=14*=#q'1+Wbr3K`PmCM[Cuh>)*aHFTn-<K!bIYj[5n5D<.l2qP!.\E$M8(n(;h%VuK\'A0=^=QTNkq'mogfVO,r34W3)
%#Loh_AK,;Z/B[aNgg\8KlD].p(eD"&!#B<,)NC.fW*2a#N;'TE5OGLVL*Bd?,"@dh?J/TS8$7e?nJ3oaaidjM>_u)s/mEf$4'9%c
%%C4PiC%D#UIiFB-f<irh[$ckBHbfir%0fFmb297L!#d'o(U*Eipi%RsYDi\`gulKYb;K')$KdLk2CFR,3e.3]Gk:ae!C#.Pk\K=g
%P:s_T&bIsF%n820f8:!lGj'h>f+.YG#[[BUi.Khg4$QLDX)C/jaUs56)ZWUXk"WA%(FOkkeT-u7PokBo?bsc=.;ml/_67ONJ[DoK
%R=Yqj*49BWXS<:?hS?=db\QS$%R2Z*:FM;M#&Os#Q)P(@Yu-)"$6Yi'4\,OL*iR1'dr&Qjm!3oCnG5co:4L^TW?rPP;bK$4F:s,]
%p?,-H/Gtn'fe+l@ilqFS\;'eC#MgU2\.WE6J4Sl%AKlQr(rfmOGjXt7XckOq:/M1t:Gk9/%n+G$8brXdQtmiYn2U=f&i:<]9lDXN
%kO:e:;:0\:!q)FMOOpWNq@Pn$IP1\!D8d=\qiG"^S&.uiPnn&Tf2`!NOjYMYlPDkee!1`q-1;pjM-BYjR`tQN,T;g$gOF]mV.7DV
%`[]b(F3,fp2)u(hh=:5d/ud3r<OW^ADm3jX$bFpJHX\8mBA)lm^-Y]9:,BjX0>jqd\V/#\006Hj;p&EDrj,bjn%X:g6IG"S8Kp=\
%d^Ti`eD9Y7MX,KFEW\INML!\;oRb@NoWlS`q!)_[/,!3n4aP%bf#CXKjJS?09H/'!'#f3=&'4@eQ1Ta4+4L%'h?LPano<NYj9(]+
%:&CeNImWM_ERuo:$n$qs\c?]9KLC6#*4V.LU6eO2U;n!Eg"M:Ua(n<A4AYruZ<WEl$[+/M^QC;OD)==nO3nA`ZdI:9Hnu\i[j4dV
%0kE1J'I5Y9dp-8jkHi:o\@R#G3l<*g;Kc3S!+\9?mEb9k3GTF_f\b2\LNg_8Nd_NtH(^<>X[\NI3G^OadoXOF_UUPJBJ>@Hd7ODa
%!a?Mb)=87<UX>4'$V"b`i\e<M9hD+lq9h*GShb4RDqj;+qYFIHLlJFd7XRh77_`(e1\t`CPVHQ/0,Q.Iq8Gnb/^YDoQi4p#QFo&/
%Di??h8-dtCA;j]1Bk&\pW#.1VdCq>!`a-SpfU4Xp*mH9H`[[PtZdnf[n^91<1?L)#Za&_^-&a.idP>-7\/`MgQ-(&LgBl/-c^.5`
%%<cr*CsLm2`]M#-0g;t=",Q+(mY3X6>k:b2f1*PmCc?-PA+sk]B'aYM-0%6u,id7/>oH5lqfef3n`Gf!S_J@`j<cKR`]Q%5R4$+^
%adP%j:%lEZNQIHs^eC?!jjf$LR>AtGQU_%8.I\**R"ABt]."@65FGt=k1gXen)$j=6*5%I^(a.;r]/;o8l(cg;l*\F9f;orCq>at
%%F[HE3dOEf-<$s_Cmj!%J@ZQ='.3,OF>,IGSkYD`0FuQ%[N!A*Wf(M%.sWj'41P!dfi+e$c+*d;BF\/C/ou!M9[2b(Oe+R>H[@HE
%Y6l$9AKAs_9=Mg;\b^DBRN$0BO87Z!YaM+N'9ei`18:3(f14s^UA+r>R)cVa^c]"OqIc\J7ISI_:A)q<0=en:(+Htg"cPC8Zd;Y:
%r@D!>(sc)ogidl*:O(1-Y1p`pbrq&Xh0QuLZR9+dHH(W_O(Z.HEH!g`S^,M-;U0&47V5MJ`aZWn.Tp"4gQMfU@`B0U9"6G8=4W`b
%M=p/"gu*Kd.2S`h9:bdr/b^UVcLSg_h_!YCNj?=*?E9A`Y;<I&]*rD]%D14mYB;\,P-cZI%9N'iCRe&M!?,a6C)3r5]A_DrYe$U\
%L[/4"b$Z3'mB_@6lSs=Y[E^mp>FTb]l`k_;hjoaC5'q./lc>8A=VOD2^/FFRW_]l-gF['1fNr0BZE6XQ]546?^1EL_nI'">D6^%e
%md5_rlr8cJgS8[Qae$UDmd+Lm,OLJ1h.hFc@QO4#@8aE&8W9rJaeHmc9<oRn0BK2pkY`kl\9OEf*P(q:e5>lK]8jKilIPJT(lJkV
%epqERmsHhI[%uSb:9X?<m%g6%n'6haEp11.T<Z[WX2$^`"nonAK#f>&OF)Fu8j_jkj`'ja>sqM&\K[B;[O_<6oitSd2"/"-hh`u*
%1psjMb!E4(1=^&g`bfX^PAVS6^N,rnKL^5uRcW=icID3pJ$/Y(SQC<\4_bLG4f34/kj_ba/e8ur,WppapKLFUmg5Rti5tG5IC_"W
%L>LY"1[@85?<?^&m%pe#hA[P1+<#1'Bts=!9BTqoVKd1HjU5STB.E]&I@aWEm0e*^!FKSbq;SH.-,8p-VXWRIl59$(='s[Kh4?UH
%r&<a]FqJ,f=@&sUZ"?4KMm]be!Gi/Uj-I?k"OQ*%Q,AAIl])";B<X.?,L?SM`_uq&^8s4!b<)%5LoAQe`.SOp'N6[Z`1>AH,J%]^
%-JhC-S)9@2O8TdWGkIs9Y;cG1SLjQ.6YCE=>H&\i9t(iGTHS_]b!eeGBe*>rGF?N6kF"`DpLdEFl9CaB>XPD'#i3q+5VA>-"E&T%
%8"eo,@tAj5PGXkqj96::?SABpdT<=b[<daGo6-^O&)CH(k7^G7+\+I!4^@EOGXj]&`/sDEJs2dLTsH1LDM.,=Q]kf3PpCtmZ,fq,
%/&pI5k";-L&T"]j8m7^Jcuir>*dVDD^s!=\]>ID3r]2%ERZ,%0?0&lslsLIg)UUB,'0.T66A/%oZB97_2N9QAc_X2,[U>"a%!HuX
%g!,*>Gj:8MY7<VhF!g\C3.LB[]LG%#pShiMfl]]dQpE+RC7Z08P=!&,F6AEi/=LH@a0(<FI'!!;L+3b(E"hPka-.EJ`3.&AMoqhp
%]jS/6oS#856?-?YkDL^$^F`d$>E&+?BK/R#?_3#Z5P)rB1>VhVijO?k9>&rF6.0p?HqT3sB;9!WJr.U9ABp^8L`I9sPO`$?rM]os
%MP]U$<(Q]9\Rt^)DUqP2Q)eW1;"8k\caSNpHLb7BB7/8IQUqCPNm,b30p1FbU\h.[p2-7Xp]dGY'g'(M[O]c_B+-kr\UZ(&P05qi
%+I_)lV,P[Q],]fV(+Q16doCC4GrNg_/k8[NT6E5OZ$aFIGg"u,G#J.F:eiQ$B#I[m`gU1eH=QGL(c9oJd9_*g(8DBnbp(5&6GRhd
%;TTsomn;%D!H0J;eSPV*C!_6T.m%][ZQ/"gWH.$R,KarHM"/VVpBOb+.e@n-)_bW)NR"0E'lQ)OWMElTU@Mud\L[-:Trgoq(iqQa
%nMI;TU_i:LptV?E#IB$H\e;;Q!1N5FMfR>6^+*0qnA!AYB$ba!)dV86l9<dF;pY8SmJ9Jp0khJ!:Td0kEH0j6L@(6q?g>%;S=QPQ
%-M^aPh`TEKf/I.`12I/$U3O",Lm=GmCZb$8OfX`Hc#'34]=E=q>"lD70:'/D/t_%h.P?)/Y!4I]mTm#/oR6T3VLALB8-C#n%+fh3
%%n[WK%<kp!(hF\`8%^d'4r4+qQcJMe48.`kG)T3G$hs/_e=OUMNR(o]5k>u+$FcXGY3VosTu#22,X[u,.`R8#$V*9s>2Ga<9Ik&%
%kuQtbi-KO-q:TOuN"99&*i0?fQ>\uB(\-W>o+8+VR9@7Mh2^!beTS:RXL:Q1]@I9p8PO`4;kN'1*MJj5\s0i,f"LKZ@X$=LFKf9V
%$aA1F6^$P0O]p(\q;1@9DXV2N@5%';q[%bd?`@76rS^^0%fFr=aIqf;2$a%U'KPa+&`Km2_N3LIWWWFQ2lbTR^X\r]UUNfZ+!$*;
%I!=4:-g9O]D8Pf*RHkuF5Ju0:l#%1S`R!kFd0l'gN,A9MD4Ili:ZIHGM[F@U.g^o&s/dtga3H%8<\[CMp"&FsE#B#`c$Sq;(3mU=
%1FCN5pTe8`qqMli:-(=V=F-\@&R3d6[Ucg\F=K^\4imVikP6!!/f$jmO&X',eUCmq?VP0;MbX$T*,qf>kW$OTjSer1Z=pLc@IsY+
%'Xo`S/V[.=`^4;\$6qG\r&L&R9Q/[(^T@S>Fs-8+LKiQSd[\^H$WVc@Q4)T^T!(f2\BB[i=/m'h?!^X>]3c2f0(u1/-u^bmck)Ve
%A03'8!8>qo>V/#)'(YlZKO(f;@GH*/M15Pq"gYjRgMehBU=.j7!.?UV,&<8EXC8hnCRDC?<2lkUcN-*c9UTfqELF'4C7R_pOO*S=
%bmn=m)s+\I!M8Cm(9c\/ME1rkVt+o/NkYrX_ZVBX5o:PC=c:Z]jA,R\2`>Vbq)O'oiS=]gGhKnMcu5!KfMRD]E+i`#A)J7#\aT#A
%%?M/u.JZBQ'],Gi#+Qd5dIPM]1E#d(+4-c#(q%^p%>^JlB&b&I+P*SJRho6/HL?UEAD]/!8q](@>1YBPVrjIm'&p(ZrW9[Np>NDM
%44h/F_al6nHM<%NKO(X[9;BJuft:c1d14NXaGlE/hR7,jaU0.ioc^.PnF0F^.oTI/Q<S:tST_/"CP2GE'uj,\WmG56,s^i`eGr4:
%W/0js,@Ht5Z?SaIHYDS9QL/l`EEGsH"/*VG,doFpNS7lsitktW7nRO(@na]sN</H/(UV)hTq*T.r9DQ%RX@Il22)f!Vs&5]_K0O!
%s'Al2[*"jAc3qjk56Z&*E"0GBpA>E\moTBEj!]ie0Pl\3+2@f.MPApOA8_gBd8d<pC@'SWT5V3][<?TVIN53A?VR:Xg`M\m$fCSE
%01]F(VdMd-f]YC'pjo9u[4)6fCSMoZ$K:??%Wdoi2BTAGA(kgKoEIoK:PO6f2=b&2S%0TL>T3Om<7106e=;sLRp=TA66eJG_Q41e
%,B\^:)H+uq>ph\-ct9'do:6Vo5K'@_A)'fBg5O[W<0(EG,%quTAe(@RG<f9<DJ4.Uiq@Gq)Z%53!9e<%ME&!*90Xb]jM'I7)Qli;
%YSu7k5'6Gl6b/G!bHe!4)i-d\$c$:'QWb`+H5:8;Mi.2TFab:;7@6/\_/HH#P&W38)MIut@j,W0gMJC"nP7E/S')4O%``L.YqgS:
%/j7n1EH0R'ZPfJW[,<3D`is1R/_tV\BCX'$f,6es:T!YrOmiB.nOUbM/t`PLZ@@.*MP$)K4iKj"S[@!alYk]2Fmf>t3h<[3l%bdn
%IX=hQ%j#q(,a>0_HsIZ#@[)/(9p95!aZ&("$db\r=J<F9[kg(pURTkr:PhQ`gXO6CKF:#bc\L3:G^/Ko\^GB=/8NRSHN4N7=8!A&
%c?/ONQA4^CGMukK+Jf;7"0UY)X#8_L9CMEB$eqf=&K(-sp!S=%^aJG0>e;d=4i+V67,;>obCd<7\hej`oO`;i17c4g4Z+?dOn47F
%DfmA0gok\EmO"E4B?jVc?lh]s*G,RAENW!=1ltSpR#dq0md)gT]bJ%LhK!&rLp!XYU/\V96NS7t87;K7H`9R-3M%(3Ca3#g*:_FO
%V^SHH5Rc\r/j&=7ZjA]^gK=='O*/?Fb/XK*j5m5qj(=K;>oh$Dgm9S^<;t[#RrO2bE8<1<J#(:C3[MGKcC<Y10[VdCUOH]_$Qplf
%3R(AOO45b(4bg%q-&2uQ1KVq8[tN_dk&T1rS6N<hf7O@V:pAm^on#F/)Q[euPN[oTQ9Cji3kroRAb_KOo.'K(g_4t+_0;7s(<a4E
%oL1u*n)uZU*pLCE]c_#A7h#6p,QeE2!%M,R%cM[j"Pb'#5q&$e^BKS<F:5>mY4Ih+"815:1t$<FFO+$9cS1=F/4m6fY0ScMX]V;P
%kX^Qq=f7d'&:UPZ$2XJS$m+[tAF<bWAkObub,`tAQf4sR+R^$u(IG_Md_0t(Mc^>_AK7k?3H?WC$2+eSA6QLDR3_5.fsiF?DTHem
%p&[f7(uRdh8C6UE-&'^h3]GTb.p9VpPq61m'eIhGU,.-Sc/VBs&.!nQ3K0.`MG\46*be0B7&(mL2S$@F9a0i!d_?HTn2Ii^K7*E6
%M02kDC*>KN[n[pB!EFKf['=[bRMA7M``Ajsj[`pB/D3nC-!CHll.ii42%-<ud@8FrdELAQaANJuhabXRjX"'TVL!q=L)8V#CoTS.
%8!\7T*-+WBMVbKsVkd5_+aM`p8(RqG=7sZs[Z\oF/M+\[I?#*=Z!R3+fGs?@>R,Xs9=]nY*=B>$jOG/E,5J4b96!mj6Di6'=="sL
%r8ig=#TL44^mqPfTTYRGdDA7ZJ[PL\CmlHQ>"[)1eEW&,p")Oaa$oAu\V$L@P"IRR69j=CjI'g2G^ThDS@c#Ldukr>N*Ee9Z;rH&
%#6[7!ANI_QlN.0W-p/`DC$VOr"DhZ!QDj<eV\8Ed\HJeV7ae\qe!hcBfAV/$$B)UuBZ1pt[?<#Q2fP#iEE^i)K^D4i&o-*9b@)A5
%6@](XZX@MOg2!eu'n?9OQ02",mK@Db-Y2"l:)#DQqA)cp]/*M>9)2?MHohUXh1`cb+\3h`/7*Y.kF$i&[3BA^cERf8.*!o2^4:L&
%]H1,fPn%,>:,:[Bqrm<V\V@S#DA%E!nLR$ec<aCn/ldeH:GJO,GSFZBi="FX:L,N$K>hj'6S^(d%=V#<$^j=WU9@P06sRX\.!g8t
%+U*?gb$?==4]si(8_8dL_^#=McCorHnF2e:&m#]4?*-/Nd6NBM52scEa-KLh&-s7N'o`M/!`B+]9#uX9Pfbi#@6k)Ti,94WgBnDT
%A"?83d+be!Y7%5D0'd8,U5'qs'bPJkihd+m7jg*5glG\nR8?C)?(s>\;R;NoCo;Z'$Y)mD!6prdjG+km<h1I%&?F;#M'BN3?Vslt
%e@F*Pi3KRZTWr?k[o4jKT[BY`>r(!]f=@bq<=^+]!J*m:\lS[5Y.8Ug2#.lOBgjgk_3*r=C'\(t`n.UI$d^HX(gWnYad00BNskW"
%;QFG-lPe?.CfV3GTf4IK``C6?J0?]]>Gb))3Q142N6&"[V^@=HM>GcGDT*`A.LkAu;ut(`A`p=8edrG&S>.0)7O40Xe'=9scmW[/
%&9h+#-WpRF>%t#$m/_;-k+=`P:h#rnp%h)gE#'g:rZfg((<>)fNXt*3]d;83C^J`C7Dpsn[[^u7;SsB5?r`sPe%E:tpbpHd,0!GI
%$L;Dj&e6BJbT#W9#'a^G,'h'n+JC52.3"'L*KQZR(*.ZKAJ>(%=TN(?C6DgMI/mr4633i;*d<Z=(GFW:-(8A&:"72URm^Q)O#!l$
%c`V0IZgj,gZH,%@N`CBPA&pkmh@l/RZAKiqH.4]LnHPeg0KN.]We`q(8EZk9TUuS!F?t#_DX/DW\9uRLMRV1kL7XIn`\Pb4/$(^k
%#tn51\FM$91:?W>:+^YP'e&-FU_^0nR_F&ZMs9*k[-ltSO!(7D]VjgugeX:YG@sR;W=hIkba):e$Ajr[n[h18RsqtdV78J,([6o1
%I1Z69EPRmm.o"X,!Z[bD'fO;]gcGJJl3]$5]XP)0GYl[si?4HSHQ3hWL22;*'a/Ij>AE*-:\hM&1d%+kRT6@eAI,[#RpBUKd&&8R
%:q]7@!*K23=Cio&\j+eD`CR@V%Vna=pXMC)?Lff?=JZ8fgd!UDd#]iV!(gHtp9bVCV/uBQ%qP&F![D_rH+i*NUZ6&?LRDp]AqBaM
%3o.Dfjabn,V?oaO,>Uamc9dj/P)\,;\TOi.^Zb%-ZdYGhN+]>I,r>r]<8cP[k'INbSPgVV?&\r$mRL@M6GVsEP.86+2m[3gGL<YC
%H,5Bc_caU/Q&=tN.[+0l:(Rq'.%A`EaV]3?EimnZ^Ri,(N8A#a=E]82^Y2mdhCu%R]Hi8#e@96q((@EdGJn"<Vd)NB5HO,o0Ibe/
%rE#bc#>eLE8NcNL].TPrqZ9-;N^o!$-BM[HN9\\=M0c?%#%SA^M>3&bK]IZ:&@Kgi(+NW$2*dXS0pp7JUdNbL_u_bK%-XH@c*SgB
%4!(r;Gnib*,/BZl]ik"[dC<WQ!JW:hAY7t20Ute^dT3Q<3ab+1cO)fe]tp&.NQ!_Tp82mLqc-)+h(oonW.[%a-JA7PBri-XSAouU
%cril(O(?^j#Jq4fIs,^QWM:B)kdR@T`lV+oJ63.i';Go@[("WZT]6>OT@KT.fl:b59`us0RCio4g34?i03Dt!I093)'s_pB+'gK>
%SX\*_BE3@-+uu[ATNb?K,?JE]1@m^1G1WT/Q]p\`>hD[GTL)Lgk4`7GI/D2XHC+#J4FEJqFsYm]3Q2N:@3$84nT4FfFbr.\q"$Ko
%Ad@S5e,_=PLnr]qV1`:db$6.8n2DOsCm7XEr,e,U21Xl%36S\5nT2:n8AbLK`\!EfM*O2nR-@Rqa''07Y@dJ[6XX1e-@4shC*jjq
%31Q$QcfX`Cm;^MeRO+skhfG03$2/o!Dk0]_MPs&=:Ji4\S!"G</Pe=Y<b1,ma%F;,7mPLN,<W*FXr<tGAr0oBdeDaf:&"QE+D)Ig
%29t&A=h>5cXL7$S;P%"`Z#mNqcrZea5Jh_3Bnd-t/6o`H7j]C,PINUmOpqDfK@b]R'+0;D]A<2X-HLfeNJ/Eifb@'g'9+i$-i'Dq
%L_9'!/fq0#o13OeA$_k%BQYQR\U+IC-XBKs)Y*Pr"YieO>dQVQLU.bN\tJJ3WN0"i@Mq(%$\(O9F.L?n^/M'Za]h*cOT(0k#b23E
%S[B7d8tjG+X>CHLkCW=-FXp@Pi`W"Bm[Kh?3]ur05`ioE='`r,+RH5N$;gI<cQ-Ya(0'kr9\]:q;2=9(fRaRu=ZtLp>O-f+f2Lhn
%:$SCWjX*WA;Pp",_Li0RZHN98BJce[Q-*@mQi3647BO+<P[oujq"ge[-(!b1.e*pVa*8Y+#IA,g,Hr^Tb2Wp?':D=A%b:D!nhiE/
%A0s$*&EjoIQqKG%@s;E#[XgQCdC^=9cXRWu9U+VYQuu%DCiX3Q$;'gFFE8=J,&Oo)S]?5[?L6MrKP$Ud!pN9G:ej8*/jTG=5\KQ$
%9_OrA#4W7.ob#2r`iH3$^+(FdpNTbj2-RZXVRrUb>IEGk`b#HF^G>/ZXKcT)L"AUU0kH\e+0t]b>mYH6?DtZ;gJ6$,._U`&f`XMt
%Tc33bdQeOt$\I?<Pj^&,/=ub"(ll,/Ha4O%B?u;G2:Fml[s$[8)EoX>9uN3ZAJ.Ps);_Z-MYO1RE9Fb9%BDEnbaW"6CMbDh]4][k
%C`JXB5k*fWf'%59+O@`P%tt9CKD_o\5$e@,rVE(.LR`nC%JjY@r"Z]B/`FtM&BWYtUI8ebFCiapX6"ZY1*M4>\RkYXJ+A.q:!.a'
%"?rsI0!l1WT^1`>!rR6[5PKCCgX/87CCV,JT)_j1^H'uk_ZX[LhIQ!%p+s')pc?0oWVZ]&!R+rt]f)=*.7lLFNNIWe[R(cWf#<:r
%W&U'AeZL?Z[""JXm[O:#])<jW6%JMMdS)guPdBGBK0X.*1Bk!^b!#nBLnCC9">+bj(n->Ke)&7*>bSebat7.p%Q=Qc,LQWKNB!!M
%/0eu0e"!W%;2#r8Xiahd"d+eS9rgC+;q$u6I+%CnmDW=$.;>T`f2$#2^aJF78P`)0$-LanN_I8J70"(;S@gMQkK;[)1q3I*L5oM?
%WepT=L=gT%!AU,eEDtf9Os;YKT$"d5/KsM[TFsGDKs"Cc>;C,`q'+/kL'1j2dhXQ!Hf,gngZK":RPuN_/uuj%0/ZH9P?_AK!HE1<
%I/n&r.43sWXjFoV>!S19c?Bh[kHC1H)B%!_d<:kac6d@jS0^HN";5`DlAe,!p)l&eh@-$(H`P08q<kYT0%fPo\=T.U=.U$e1I;[P
%7^D09$e,?i]XfDl/Stl5k7Ok1mR$;^-a'!li%mG>>\T]91C;5hk0DSU`I]!>[WEGHX-`N2qt`X<TVhOOC\&'/Ko30-Kf=N<?KQnE
%)a4=1EG&)AX:mB9'r>TP`I!#J1u+#$%jWoQdbu!D*Ngg$en*lcN;Xki+IN@HZO%fQ[cg?eF&ND56ND[DT"0bT*I"B&Z1.[_B$XgX
%/"t'&_(,iIG&IF5achbm[jtLmO2GTt+T&a_bdO<[:H!*#)sS/$$I+pJZ!$,s<T(">Sj<o1FQ[ZT_8]ENh+6=uqZ/4VB$$?.Cgk)E
%Na"DEF0T8;38j30\<NC"4J'<#'@lk'>b94DFZ#;UhXODoh+9?=[$1*(k];6.brkXhR:Sr'J^hNkY@jQ4@MT3K+*5MTa\8a!d#HXM
%?T(&?T]OF6&;Jh"l0LB,"s1228.Hm-SpAtoen#p?]DAVV?#9e./`XLmCK!"HaMN?`R;P"?=.%8n5f5_IoUL=gM4.7eV./nRTe`m-
%Cei^09,[JFdKlEj7]V\)iYV+(:E3nKm+kf8\*qrfR!,aXgjNu/M@AWf)JO/?.A1rt0ac.8-YoTtlcTYI&7#9g?$oGB0eH%u`3im&
%>'3Tr<4b=JAT-@,$Z64&ol\NM/f8r&Op2eKJlBqg?35D.XJJ=?f/d7?6VYa-+8Y#>:O%&V6IXN&pY><eK<VB2aN_A]QULA[&R;:8
%geqP'FCqD:@-,ho#l3;18@IVtL=`D-G1=S=CT^pud;,aHaP,PjH;HK_AHrkuQOr#O5.G1"P()Q]c)RW/PpltTQtCW_!`cOS%:\@<
%es<XQ01X3u$"QlABARaHAI^+co?pd=dror_[Y.lE@fGu?A;/HM_*IEn<?m!jj,k/(/C@#9/WcBD5pGag0F8o=AlkakHh#i(Oa,s_
%-:s9i%6XUEIjSQ/T[(T+Mr'!KW-6!FjN[eNW[K`WDQHrWFn-HQU#s?H(#pof(@'e7@'H!eoasbX`>KcV$+5`8fm-A'B:^huq#P!J
%M1_%$A-0lg9fiU'XVT]q5!i9]g4fqq!]!cI*a@J[ZgiX&naaOXRLUe(M4s3,YmJjm3cH>4m=SJk$8UE5--OF`[U-*V>/*dX_Mji5
%df.;k`8#UY:F0pLEMNQn#,(m=BRm:+f=:aVc?s-F1LB&f4Ib!94@t0R"6%R!Y03uS)7&pY_!u5DJ;9Lq'1NmVh#4P^8rLocWp<m@
%g>U4=G.#YY9\DVjjL-#-"$:GR_=qml_=MFq!0:q.7g.+rI&N;JGF*4Q!#gZB`UQulm;lc^(XSoHO+3k*Uro=<D[1F(!jAusU=o6K
%5$-D>I'MafT*Y#c3p^33>VA=8L5>l(+XKE,R2]J$CJb;gJc"**Q#K0-eA1;;?Ug"rT+)"*^psm"NK1&pOO65L5hg)#CNRh<FecQr
%QSs/o14f7qpND339Ld&[3@1P60Y6lf9[MCY58j(uJJ0%eTRBsVQ#Y?3?+*k&98[10g.o.*=+tlR1lVYlcYpL"iIPfW`2<hkrK+^2
%A>=up#BqNY1$5O@2mAN=@"i>IKjDCsI)N)UZ@]]*K;Rd%i)9:J_2.*)EL(u(ccV);W`'4.a.+q%ONMPsLh8g<PH\lu\WR^pYB<VB
%4BiY2?0cobM01#c-HF.nQY168F"lg$Agms8!f]nok7dL_*&UYfc9JuX0$n*7h_ag451M#"+>VEC_<eZtfL,CG?jQNE@]ulO-pCB&
%6*J$;S@N)hUNONacu1W$^Q"V-BUn\QbG-R^756QG&>(2t$K`T!Fu_.;r%#_D@Jktp)jK,^Ys.oGQ^V#*ilu,kL)$[QAD.f+I'-\,
%GQ[83dUBkXn>0u(VredFWJ1"#G"n$e#V0..=XTPXgpnW"8pMpf;tbpp`/8,i`V;?m!"D1eRErmI,J'GfjS]IPm9S8OA'Gn;Xa$Pi
%fSVP18MguZUhQ;l-6?WU=+jSMGd;"$`MZk?"L1!Gj_DR)5Ou;d?mULA<es3\D$aE#\SAIQ@1<?/XbdhEQM<QZ2`.bY)2c_2iNd9a
%Lh3Y@(U#\JXI!RKHfSm&eoTmCe3%,SCKM_u)=_jl&UQ_]Q*t+D7JLgq""Rq@^X!tbm9%L-7k@k,LV"G4P&&4#65K,AID$(?Q5-o]
%-<=om_WKFR+uFAZ/=*n+5AY!'eLbANqO2PWQ(G'Q*a>f/T4>S/f[m>3hM:dX_PZ:[VdWUpmR%C5j[4KQe[\!3jm\ffP8E:<XB92d
%A(Rs-B]b,'jigA%$gS1$i@FTg=GsVCU=UoO>Huc&IWS#;(:g7]=X5l/5*B"m?[$0kSOrKPmZCgaL"d#:LmsdMBjtq`=2'5$ei_N2
%Z,O.]/VRS+gpA$(0"-pilY0N[Z/-ho&[N6R%XW.b?WL;/5UTBoLp-C9S$D"\DoMS.2O-/)%`>r]TRlbB?:KU]]HkScjAoN_M%`S.
%X]Ss/GBQ]^VY_1-DhSq:25RE/MIO"TKNMM!PG^ac?)HP*#@J"UYFDF-5&SZN%R\N!X8pLlM]R]\0k$!n0@cYll3[ns#%D^n:>(BJ
%;W5bUJ2KMrV_rNQ_<+jr$[>+aRU*:.B.\E"&C47aTXI\K==/*QKil$(=N/so`FrcKoKC!YSZQ<hNkjhgPn@B]7F)lQ;kq^<+ft[$
%Ro2h7Q&s!T+sh@S<c!E>VZ5oJ/q*-j=:7TKAt@&<QuO\tD0<5:C*Z.ASp%0LPP8m/?+;an/1U.XNrqac'fB4#b^%gRBWZ2tl;IQN
%EFis,bmf#,W\msA>.^sYmFJS*n#onRR>.!K1U$N4Q.bY$]=$K(KsnBAR"j,rRABQ:NLE\kC_\6TZ1)eEqi,=F]V43t9RBs8EEKQ>
%RVB7fSlO*[Zr0]n<U1Eth-LT>g5eH$*aRL%cU3%j>O.Gd06Zn]qsg$P$`hqf>^e6$h+BTQAY[rZ;/bnm]/:HM8aY*0Qs\Lb1q`B#
%NbCTt[SDLAAuj>E8d-!4/THtg`j9]%\,^3G)aYd#V+6uVY&g>%hU*7@AJIn&!@GteO`[AfZ)3YrQ,btM\'&Fe,_)ehYCKA1Rb:"j
%IGq1bJf^\0#!V.K+J#m9Z?K*t/oV;t1jTf,@CC$php">;g3*HZ0P,cU\>ZBcW+[AkdAgiq[&LT]?WE1,1])#;fp)*%E9ctBA\*<O
%i7J6spq%D9L&a;]kM*3Bk7GYb@t?Z"H2*7Wb8OJK1.9_6cPfpST=/0^]<r6]VX279NSJeCA:D&9`+mK)^&8,c*3[;,DKI#&X&snR
%T.-15%1ilJ?)uMg_E,*Pes3]?<EK>*L]-4p?c.afof85.Q/nsMR^.lR'.Z[,1pBkiQrgpM@KA?sjF(eKf%_.>N>:RjCKT[pIBHC#
%:1:N6f!M[dYDQ%kX>!1B)]O>&$j*r*T02]fbSg*<K(GnED/b:L'e&e@$n$.=M#t2Ph12me;LW(r#2;%/6a9JU/k+DFYWV!+J%^"A
%F(a9c5:MXL[4DVh_ttOZiGZ-SX9*bY^j4s4$I^MN*8ja6Q3f;PopV9Mpi!1jWtcu#1Zngl**gfE.#([.:)4uFp``pHfg)VMYZOqU
%@M=*t0b;9$8#mL9JAG(BmkT^!7#=C'oF9H["oa'-oTDMcD8eY'_daTtc>8h?*\+]BMe+I25OPhM3@7]AOGB*lmMqN1GMh=rpubLW
%gR/SRU>Ym%4]>VGqLWER`hPcB?$_dIDkk[/(+GRC;$d1e!Qi:p9ek?q.kte]&5L_ZAYQV)Tj3/KNc^(SLC>p2NGWR^;Lh5p?b:WR
%%W=S-o5eEJ:$i*Ho/t:rN.*@C/)l7Vq^(#f&X+R-!Lf'h^R+LTIb[C8J$[**AY*@+[2$ic>G3AA3inDe@>?t[GDdpl/dJMe6>Y1f
%Q%QJ=p17XKSmNG^g@T4+Cr"Peh+RHY?0;4'0,`bpQ7Qo4i`af0Y5`@=gV(Z"o>FpfYKI<'Z\.);%P*u@)C'5tQ8;7)0%gRGX`G60
%U@t"Q[-+>YP0r&\PT%<,O"+XLKn!j+U;D5dl!BQ.a:[Xrbq@&-[*LTW>4sO=Q`EUp$9]Pq&#$iNp9m0^(fS_6B&Bm"$,0r"AcaH;
%djA[BdTg>d$\A.6F4cKObY99bW7[g`N2^CB02hFT<JQkJi#=_?h(X].hVoA&h=rl4f(M24@KFJJ-8bDH2\96Ac0/u!=QBI&Bb]`M
%>&I\hVV;H#F1=%%Q<eQ1nf!(nBMp#7@8P\FVUcTp>)h5M1)U#6m$@iT3J9k=\2X6F<;L(k0sN(-0gS=6*0Hh$D2\'&A#e%EPBU;e
%X,o[p`dP+`DAe1nr^N4kGO_`ufrYi?jS1uYh@Jl&WiNNbl$73]+7*i;=4f0;)ZEBt7f6/]q1"-5F&+r#2tt0$W3Y1W-.]IYR@fM0
%M<%rD@6s$69fphV4s-R.U[HK5F*dO5eUIP=Vl+WV[TCp9dV6'B]TkdGATo1RcNn\MaSI%aD;u,%L1OOI3cg.[&L3sG[:_fn2#@OL
%OXtJ;87;5o$tdg2eh`JsW)GjB<ReR?/UOA]HLf.EUtj+$.Drtp<:g)[lL%iVN@TD7Kfq#>RJrRO"]3//ZnHh1K3%g./\`k<?UZm-
%/;_qGH(M`cqYdO+>+!TP_tlg!!(7>5I<>QRVVkU_><c4+ct9rjU=gs\\)3)uD=KR2e%qV9]ro!d@=B7L.k[UBT2dJEB7%DJD'S+I
%6`\F%,BX6t5l+k7;C+\1)?oq*r\ApOBDPs'\\YJWac717X3$BVj$*oGAo!6idb&rC&i_A>-bDi&APmGL<hRt-k!'7.cZUY$H?5)J
%$L[R$;fi^o7g4$S^J5b8US:P:37@d^Kb1ej3\%4XlAla<J25?uBr?QY'fA$C$GH<oPO70p,,M.Ocnb2g(5W$$H=?]gmcr_V\O;_Y
%Wu8:>[^0Z^&/nPK660e;2A_K&7<P!2#6P=>[H>`QNQ_6`m$e\jIW7!0bn92_NT"ZB%^fDlK=bD6+>3R"k09^#p542JPf?6F\0bJh
%CA*u_M^r00EKV"C%5_bC%K:l,#[\P$ma&'SVsWLRV*jB\@BM@\;_prbk&+gnXtUYEG0RMies%op5C\%^DBg1UA(Q$)p]K&eGUe=#
%D$=MF2_T:?p40BVYRV_s<SD;pLseW-hP/FoR[C]J>2mn;Tm)jnU#\E("';@@XWqtoq#`-"Ya=H6>_[kqg<m'GN`@`Q[^NN;9jd[8
%8%;YP?=.CD:iGWN3a=DJY=51ar:%^PGM<YA,raHk[]QT!MYj*k%//i=Z"g)B;Q(11^ceU,\>]m1[p$9&oRtM#e%1+fIYi27ZC)2P
%H7^hYYtIGq5o,/,Sael0XgF\4kcesZr=/+qCA_6#G-eJl5@k"KjE+S74]VQ+o^gWCD,gN15Q_JYQ`T2@NmuWS[<-K'=p<Uq+/jA>
%bAu?;<)]naDD0C3PZ-_piS%I8^MEhKV;0l)A<gtHL?a+12CR"UAoaB[L",HI\tD"LF]Z6lGA3a:Da0[m.V<hcl"Op:1ge5P40b7o
%)lE7qLCHsnr_27Rl:&7[@NO>(=@`5:DXET:l=e5HVLA!GW[g*jpglm38E$Fe6sJZ#;=kB8RdV%<KdgD.mWNq6D<IkSF$&hbruR/j
%Pt9P-gUpRtr=O1ah%othJ6N*WrTO[A63VghIg![Bko=iX2;"&*k^QeiX+VL9o],pj?"eTMcl`"CT$:Hkh;+N@<%Y;&e3CC[*Q;^R
%^+?a6UTu3SmU0Vp;F<!-DQ[U6N[;=P5ht3:C[)C]6!"/p/k;RISqGmS];tCi]=W8@:![A-Q%1=u\g?X1n[k)qiJd8DX*H5(>4(.N
%VcL*/ZZTc@c"461;miNmSuOsPOIJSn;q"[A]\;I?4^6stl2pA;[`[R;H+%'emXO?L?I7H\hQECup)hG0s4_n<Mksc[9PI:FeY-&a
%a6$^KV)3VTG5>sVY\V/tE.`ac*hZC=jd7lj,1*Q9Wl;,XZ1GL\O.f5=p;B=@FH>iQp?9J\0?I*]I#5:4a8'nNj[1rn<ugDXI?s=4
%FN_`Y36nuBlfp%YW\j@3a8'nNjniP-8G6\Wo.Bpcf!Ba]@`m";kM(ENmuQ#H`Lf6;\,._K15>e-j*\##BDMO/*F8TRj*YUPXrjTH
%W5)1NkM(ENmgmBG^RmR4[jCZ?m9]PbU#UO4cgo0q_9NM:g4tfbPPpp>g<P'4_asNnS48g;In]FG8aT:Qbpn(DI9(?f\TqepG>RHG
%L%PN;/lq?i&?",)J0,P6h6_)2P[7AsC?N?C+'Vl5)jU(98un";`[Z+4b5<U";<.Lm$J.0IY+<=1&?1`-VqhSZ'k@)MpH_KRY]g2C
%Xtf/jFR<J$cGP"@pH[umgWWT&o8&EAU[k!d>l3+"p?jS:"h44Ij%l#2(W>.5=3@siKA/cKa7kp:DRbA?mTdNbR&"I(rb-j"*kV<b
%ZHjUrB6!CrP8tNl^=<S3R#NmC\e5a[hY*b^B\r+@9teBd\J\O(fmTj3?43=[Q5kB&1KJ&79_Lj:??[B8D%lAR'7.niJ#ihSppFU?
%>Zjp$D1L;>CEtiSs21M.).S&9d0n<DVnI&JpFt;Cb;4kL_D2"%$Fahb?E4It5EE89r!cV4qeAgYb=(0VH:t*WEIR8EA&u;ukP\#)
%q@72<X.J'hhWmAj\6ejX.DnBYT./Q>-KbILJM(\6`r\KUgTDb^o:>XPHeYlps+=#"H"cAn!t3j*IN?m\hU\?PBl!BN.JCKaO,?Kb
%^$LS';5$WQoI\$oHDeGgX`NsY^"n+P%ea.RK"Pah%S)$Bbk'oO]CnAE]hl#>]R$PA+5@p3?#DG4)s-L9II+YfAX,G-Jh$GMQ2RWS
%p.?blh0k#`SJ5q5*q6Di4tEk&*WJ?Nhq9#=P&:*0f@#/1KTRpaNQ`(Zj:NLs!e_@V%5^D%,l57Snp^HtH_6*N<EW=)L:R'(S!g\J
%d]'=h0IMl>'5cuRNV0s#ZLo]PK2n5h9qK1aHIleDe%XP<l;\.s`bkS(m=(J7<E6Cf6Jij2(=Xm4YJXLJUXOB\bM'Ze4ur#T`K`WD
%[LJb&<_g7iTIm*h`o"X,h42X(8I`.Dl_8q^W!s:&%:-FJ[GLPuWe9uAWd?Wlcd"QD]@H:bXiIdQZefd7M/U_e)f2RTesl/Lp3!p@
%b/g-&&VJ?02rWk`l.St,_8>-Eh&4Xe;\OF02sBOOX>dFEIqJ?2Ui1IG>&UM%d5<#K:Io&HlcgFdF$#,(\A$N5F[brI'cbbM,Hnr?
%`.KECFkNGam%=iADO(OBo'iA:2>623Q0p@f'7!H0rdqM5H'a9(Lbc6G40f%24oF>XS,&u-Wnu)(,`A./\i:mU[sY]?JUtM`fZLH=
%USRZB#s;hd@%S.JOis?p\BDtjiF;qI^$/8&-h<MZ^6V]6:bq)h[SgaB38eV4:\MmYS?J[E'ZkX\cHPVD&Mt!P)^mKqpYp?(gD`q#
%*iZrR\$1?o?K5GGd5(;cZ%M0!]TLcFEt@">p8.p$R[MdXYqk1[]Euj"CJW4pG@k0nj`Y=bYBOSb6.=PUfiU'%g<AC?+e?M^k&i_H
%la=.FNe5KmjfRXM`C.2J[H=0Lq[GkF$S'N$nchR!&:3$%$9\2LEqV`]d6c<4bJ"($/\a#jZWIGNV!^kLl/WJ+>n#3_"81$D/"rR]
%.a[iP,1!I)!NghmK3ZErTaNVYkC"&s_"Y+j1pkpY:ngfj<Ynng+totPr'!:`-kr,:Z+CASUCD\pM[ei\*)TZ?>@4JDO):XcoIG(.
%JHilMSLUcP2"H(U.,?`J2R_1\TLP@8SPjqHZ/KBP*OpMbf;mKh):gm@BQ&6JA@&s52)#sEYAV&Q3M%L!J%C!"aP]XqrcFpBeqQc%
%rcC!&C*O[H>atCBR!"LI@UhumI6NrBg#qBfP'oNs,h_A*$XNM5J0>,sZd<h@"JUB&<82h;.s1/b,N/OW*3J1Jm#dO1TiQg-$Or5_
%Vjg`%Tjpd=dnT_pTH;]U8U4$ISKfKCFk8dsRZuE(()UsfhF+nBGdI&4@?U0qTpnFNDmgBPmQhOJX5DM`l-7dmeaKQ^/>k*1)mWZd
%X_6Et<O1j&HAFDhSi%AjP&*$\_jWDD:\.km=XgR]_%=\Bm(icsBMf3\m5;##BMm)+EoVRfPL3"+(9?g_Y_208Vl?NA8+3;jT=s'P
%>$;Ho:+b;D[aCas';#c3(-hil'`Y7//KD1daD7Xg[iTJI+1*TD0'B-Y[;F@c;^DJ4m+f?r<kc53/?*;D=NN&/Ya&1pl)VMGmTN7p
%UoD"LiHk"X;;GG(CeJb),Ce5qmI"Ph[(F)!-2[Xds%1a8<)#eK1\.;YDuJ<=,AcC3l)f5#fL4SonFLWc+korCd%*7*CO=dk6.`Tg
%%c?K<m-!bHhYf'F24#p[rYE06Q?Lk5g$_&'>HU]4>C?IPlW_bYpN*g^``DP=^R`'+Y&?Hbhd;r>qUVXR2bQpskB`XY*s)Bi%V'DJ
%ji;:VO4HMhp=He&^<^M/jL<ks*qXk;rbSjc1/fG^]j>Uj;4U-gp0/Jgj_AsfFmg*r+MP<7gt'!&?I;\2;"R`]jJ%Dc4'deE'otk[
%*bbM`Q?ATo7mts0]7<"cb1]VJ1=RPVf;l5H:&H`+p3KHXG$Fp?[Ms,7[J;kCX@MX8&=rL*RI0.Kl^n&:lSW&.;Qn1=_,f4']0c+'
%23)*^Ro?rpTmp"Sk&W!iNh"2<,db!g@UD>%nX'sdRb2GrOP!X$e^kR^5E<[r]#E?ASoH+NFj=N5TqU@bOMnll'/<#NM=YQ'S(LfO
%0jMtJ'DqVA1Drtt?R$m\H=C59VaA#`D=/GpZ*2Fu@q0DsRFkT-eQ3\I1g4?qS]"XTMASuq?X6^i6uD=HOV7QVk\Q+.N%;0:DGJ>m
%`gYQ397Rpj@UG\YW]$?O-MGu\iC*]X>D"9reI=BhZaa@O?enQ7V9YbJqmpXuQkTA:[qU7:`]fkMNl8Xm02,+$rMYR$F]j.CJBP2C
%p=3aI:"35a)^VbmHHA%FY>+:%7q,i]!'T>8LJ@-9m)cm$G!#?+')UqsSaKHbket3XG$#8k3ECQ%M1'O$0i:lNEQ#f0/g2I,<]n<K
%XQkVXS+@/mWfD>9ck23%3G_IJku7aq/;YA&F8G`>qm+:?C\^g74k;67I;Ln&l/Gd2&_>4?.ash(H)ibh'V\&qRaq]S4u__agMg>U
%M*gBqWhR'uX7=0s2lDO4:bSh-h5\K(HD5WV;+taYH9Et\XQiG;/g`V`+<e.n?YiXS;dR$1hsd=?"#^+"#i/3]^GC,a@s;D2YQ*M$
%c2T+_rB:&>oSl]D4:bEZg&H!Ok'o7aZX:H,0[9XONKEi3s#Tjcd,ohk&\:hU<KlQpA]\O,pX@slbl+5MFG\Aua#_mQm1+(&-SlE1
%Z<%u9jEGs+)c&<6-Bc?mNFI4ADPFa17Q@j<oQADo.Wj!kD>T'G1p1dnV"6Icb3b\bfFcdr;-QAjIukS;)@hkW1ssumX"#'@@*Wki
%1`a<rK+VsjY=Dj\PCY>of0lc]L0D]4@gobkph`Rq2pn4QfdDro=X*!5Hcg?+q4Zb4o)h^bMumhuN?uD_DR!@&=T<r@oP/.W3/5iW
%jSnf\NQX9*ae<csS\4I2drC[4PgRJpqUp^*#[<?4nhN#e\sjeF#2NJeFmY+A1Q/!6g,+ro=*cq73u%Ck;;9F2O.=NOTl"uL/A-68
%l1rq71,>*2NmSbf/aGn1MTX3hj=KX6!_,1hCq,$7V,6f(I<2'Db8@lgo>Bc4^,_bPIE'ioB`hmC+@a97Whp<e/=rhtej*-kB(%m!
%CqQsYrYm#qXL.7F5o,IKA&H$1D)ABLI2oZ`haET_=l9'o^dQC!!e3`27K7pn8SMp@EB@A(%DT(:AaI7aq@D)gmp@0;3_(,VhnL?V
%\kDA(OgBI/.9MWMeFDal?e.mFR2Dlg.XLFj-2^HdePaA"UM'J<r`R08%<!8?o670"[Vt%A>o[Ngitk2d$B.`>0qFn%</%d3GG(hd
%pN77U2@C52#`b:#?Zp0/2[btWrA=WtbC,Ut]t3Dne,&-'FmS85Cm-ia$!/FeIqIC_+d/Cc2Qdtd1/st'%qY(.DOMH4mO8D;XGJ:Y
%23CMuBl#BS.$psmSD)Ab@X].<mrma1_,?c@fFdOK>AgHDhX-*iVTge61$O=QRpf@Y1g0(phKi,lAsht*+C0tgNUgsG?<f=k@5jBd
%%Rt>j=iB)>q/l8A>;YU1`WIUBe$8f5h9)5lBnjaSWfM]\"FA#Wm[_tBd)q#4Q("/VHd-33+ArW?9J+!UpiL9Ml+4^/LWhQ=f1[dP
%I2@7R0>8d!(Z"lc[6-`fMlLB.c$%FW9-5d5jXkn)2Qag"H#("7hg^lY?_oX9m"`cF^NODlf<YqDgSHfT>$FVWL3_/-Xle'ne*u)'
%DY\g$gYQZoFP`I(.dm;e>IVlfo!c'j"((h<I_G08,POZ6dj#Ipd9=)u@PpYniS)D&[sZ!doDI>6q&dR[Z'rgU]-efF-@bTt^=Ct`
%ZeI)+Om-je^+MYIcn,k"YfBsdGq31XH?T;PcDBO&'A<htS.bVnP1f<4ac!j`HM_I3\`/W%nbj,i._k&M6@XFMqIo]8#FCI?4?*5s
%``/FgTZa*C^YXCP;IZ.uFb_sADQs%^EOLjp;ST583@_u3ED>,C?>UK"?N&I;:+?[TNT/E52a.&c4)Uk>R*n,$BruC(Zar0YnH(JJ
%^9R@UEk^fQPi=P&H+=u&m1[RpAcsFfFA!@;?[p]R`i\_"btOJ*l6E1Hoo'KT(b@gf@A'_PL2,a-G-o4CXY>e:CDrr"@th#hF.+M"
%0(1["0#?L@kN#k[^$WuFDH1<X=NTh#@)'Fl7N:SQ=?LFJ?2\Wh'+I%C*%Z9ZfPYT;h&]cieD'@O*P%0^1f]_MQDOmj>eQV?HOM3D
%%i0X/B!C7]Bh4J(U0[Moh7Yr]M_su:7=FCFUmpgIo=VKF=q*s%j>@BIR&D]*k,H!AGup8+G"-B>O;",$kndV5#n<\%n'p$P9>kEb
%+$+HB\jtk)(^qAkFL/dLFKPN!eAbQp:OAB8SIl/MDtU4@d7?geC;-S$Ri2g+d.Zb!:.Qg\URHD,lWYE>OA)j/R]?"Ie&BQnh.,"4
%MsAhQ<QKZ:;IXOSD3gN5H-"dh:'!taJ(hLPd/[h3))!\lBRST"4/K1?B`/hUFWG4k4\toT#F?<BR16HY"rOJ'#B[aUldo$JYY@3^
%,oF$mbh^7X8j9!02aaGf2U+anK_#VDP1WdYm],7VQ'0cV+)tsUoO*X_l_VnH.>^dj&L[F^FmG6Sf^tEn!al4'8aO;13q<k1HD^N1
%9hF]4rS>W*&!W701`s!%-JcXpf/k)%:8`mgI,$&MjdS!%Aqfm`4n`KANQlXA2(PJ&]t]pnC9tc4Z2'C($Mue.a4781JsH2D2?k.&
%Zbh`)No/<eE2'LXf_CpNG/s`[2(NL4;gY4+WbALjlBAL.f'q&JJW6S-<S)t\K-lhBWN&t+gL6G!bJ>,=NYL4%]]!;F"MgnjI/5ca
%*5/@PUP=R&X'1LZiF21mLX(B*El5fOJWWAthhV^PHV<t\i1pr'*p,,Wm<7,oJJu8]@II;Ic+b,`_o(?e%S*pLjp_iJYA9k>o96$\
%%sos$?SdFkLV:;?:,L8jm*kI.G=:1RH\UT0e\SkA4"MQIBFPKqq(/)m%O[!)O6^J(f\6rldCjeU?k!WnMH?:)!b5ngf\7.i&C^J7
%4<1.m@CO25Jau@tG[RZDI[GkF]go'H=;e!p@?3F*T%ed;2J[Qi]A):4O$q4SfkQ!WpLsn=OTkSmX7^4PfXomHmF_osn?>uM2qqAW
%VHaPYn?D?K(BH+Aa>%3D=Yh.@3F6*hL53HjAS"=b;T$C]_s<!Q3nO+&%1dfHdV7n`ZJf6Z.-'OUF^/X*fR&jSW?fLd1d#Reg,k%D
%LR%bhdI#<&Bk+`8h5Wu3*KhX)4R=Zc:Xg^C%FO[LqntN'!Y08nD8X7'7J3Me&,W87O/:fDmr!mo"84/`;WFne\"*s=#A[2h5#ck@
%T[=]"[\j=2],aYr-=RJ4n8JN!2Fta'hSRTlQ>@STiF+pTg2;Z\:Z3]2%gU=t*Oap8mr!pR-nn',_qq/1O6%4_iF/oehORC=dFFF8
%=Q3?LDMJmbWl-i0GhBX_@BK'KR"gC0],fJ/[36G0p?m)`dAKH8o>I]$h$tf)[I$FuGhCNs3F]nDY,>E$899U*/(a904<]T1)]n^=
%(eN2rdI=BL`)u^INn!R&@lGpo%Qb[]6T.'nmIA:#a8/fplIYO0GP#n*W]ibe_jX:mH>VAt%1deApk_5HkNT,ZddXL8S0j-#da8sS
%[e#AkJ`ZeeDpCRi[7%1^%IR;cFjB:]Q$DhVk2>[GVGFjS22Q@OblY=V2L3!NE`.#qX#-/u/1[-sq_2+*S(7;mpL6eMZrLYqmA<NT
%=+>'Ohfq=2YU;XB;>o>@k1SFI?t4?Zc,&brQ.%"IRT]0(VWPWXGr-8;4Lqq?m:9d<@J.Xng;<jFcSOGOr?%`BPARLK3u`CQ]j$E0
%*d`7U`[bure]T3+hY_ZBHZEsMp7Aq/8Z?e2Y7D_gB/?HX]k;]k:[ctt4.!YD2a;,(D]X;>lb0iB^$sn7?97c9cTf/']taPimd0<>
%d`gD?qAXL!rr)-LZX54!YKeg"f_Dcfm\R[7Wp-GM%p.$"e@kg?.mYA_R6@'#IX(,1bGVD-:X>>NXp3:cq_R]5XJF<@mi3o24Pb9B
%Zhin^Z!#0>&ncBK?Z.SDHWU61@p.GM!oDATfp=Y@<uub"pR')g]n*\`niHO,,b%ssM&oY8A>7ml1j?0CrVFr7m='%:AAM?\p\/8A
%[B3G8e$e%cCIaNbgq1,^m6#g2j5%<=rScFTqYVRZ>OuseV[GGLQe8<Z=u.G5\,TVq4+I5-)ISmm$TIBg.AX,s)a?r8[E9?;9"UFT
%I6(@/;GZAuj1X]blg`9mc(gKil.(db/c>E4?8K9dIXNqnH#(S.jSner8+0gLT/Y$nh<EJgq(9DM9s6`DItt!=`:g3'43&.Q.8Oj[
%g\8DQot/PB^KoJq]^fiNG5(]Id8n#qQIkK9RsT9ZmeK-WRH--ENbIYF0.j0+\f/=Ia.LP@36/Weq57Bf3';`u#p"bDk;=bmR/%s*
%>dSuu[TZ9,G$FbqQP[*&^"C;_?ACJ3rRfd#Ek(I_bH'$,51MUKa4],\pVk:&nV+aVG3-=4@VrCF6>`9?X7!Tj<q2aMZ+"N:M`n9=
%UAY!p.s"hY>kupZeeX/1j/_9!m^o$di]@M(!o$p[T!<\/JVVs&$ZMp%*:@Ur[f>=RQ,C"FHW+PYHaLS)9`N!@+7Ws(QLZiEbgif?
%6=,,jd\i,LAq3*/"L4Km8%T<,V]GNqjXZsLUUPWTZ`niGak'A'IB)HAbaF`Wm]B8hqAO;?Ef00#S34?f]pR'X?+]5^]3No\o%'+a
%$lpl`n"fi&\JVVi]M_R5iuu+aOT+gIoBQe]f?VV*IWU'&H1Q$AbTW@#q.+7;kj-Pg<rEAA/O,BliT9CWh^a0%rVH<>XoA-*E=7B#
%h&@r]>.R@205p`6&%7K>fGh)<Z6.^p^L"TrNg4"!mdM7s#e#@]0uf#lN-?r,0]^Cm\kmechOTJ@_k4^@p"0cRIdY0f2k?:$Bfb^d
%IJbVq,/V$5(Ze"u2=I/5D1[RK$ZA5BGeA%EqD>tdnEA33Xh2'?SeN_,:F4lAQ//Je*@>F'ns]'jYM7+c`G_'QORR"h+*#$ReSD?t
%qe>Bc9E&10T6p9K]mVpP2P7_:ffGNb>(?JBp!!,bV7#K$Ib;8mddlgd>l69;gVLS19`h8NmoM#%qq9<P4<#!gm*7aNiLPmtkioQ(
%gYVY_o.:X4h0G1.YF29rfo(bjr_2a8k@sQnr`m5)*R8J.Qfl*<#qiEq9[Eld:N#(^Q>WK0Kq.Mcq3F+UQK:*9/].8MOE<%`Vk3k*
%m^I`-ZR$faP<J^t&S_pTZ`JX*s4e0O'IWL"Q]1Z,\"4A6Q._cF`T+?PB"oRYntcUgcd)1&+$WH%X'kS_rlV9Fg&01*CTm,rbQ#Bp
%ro2/bAYmatk=YY\0tT\WdG9M(dViZ"[q1l+RnK.1/4@Xa)^j+449"6o,Y+K=+q>sGFuS<.?2rPH>qHf$#<YOfK2TAnriQ.P<&!Ob
%"-?)#=T5Eu&T6-I]p\lfjgF3P44h5o,ci9?U.p#=GD#>hJ78<j:+%M;_JA5O6GiB-g"*Q9i4WJPOg>#]KpeCAs"Zr_Dg(p4Qs'oA
%mdj5"c.(PAq^X)MEI2G7H04YH_P?@rGi/m3Ks0L.O&Lu2?L1FDI'u#B3;%_)76I/aE9`3;(.99*YU(eBnE.\RY2O]L`EM"[I)#W&
%mI]T4qmC&mNt9g6?MeM]lh2iMBDorU=cj;6m^2Ohn<;o'4tM2tnpRdCg=<p&iM2YSo<"KhG-7FY$X`g:qn@E#Yk)aPpX8nj:Y5?l
%T5I)a\,Lbsrg;^7q:(n%/aq_bdk)/j?]*JMh`CuR^"N*oV\/Q-1LC#nld)Ur0!0er>9@D?8+-XanEH@Dk"4(*n_(c._2K/-YZ3+>
%S`1D;Q2$>_^3.$Wi8L+9YrI3ip!j^lOP]MNe8EKbI<BN$DLV!,ld,%.>*%R5D>nh@oE43^!B*,H5F^AAE9?3"[+5,!o@n,NYpGsM
%mOjTCZET*1SI<rHGU^Oi1ec/jQ+b4R/)/*O2SRJ^52+kApr-V;\\>_jFo0p[F($EpL=6dD^'KL=I"CTDdu&>#^X\l40l?\KDm\I^
%=((,dj^Ii6eYrbR+*-VG7Wi#8\Bk]%m3&I]V;JqoHF:u1%t?4>:T$f`8NOJFeZ&A49@p'WJ,\(&:#//CUq?3:dMXItPGuO3[C*!E
%q2N@mV0(rRF@i14ViP0E[iQU)WELUhH#C&0o<iL(Hl@h6g5eR?SfP!t]6iT3cF]"4;qpccK?nCi+Kt$YmDh`[n=#)2Fqhjs6MFi.
%Z!a6Z_hp2/]Hab[k1.Um7QP6,CsO_PotGJLA(kl97p[u,Q#FIhHX^/;cJJ3D"a?*\r"`/,$X4Q=P\IAR'7ViAF8lEqT\II[LHTKJ
%-f+HEJO8scNJM:sUc>$_!$k#K^r#\DVZ:UP[(KfDq8U8Lou/$0gA93lq`@(,Rg\bWou6AM1KuMV0&E\uReQR.rd=S&g@j3h%hIZ`
%%rX+>rAo?$?u>`+ipt+dqn\Jelr(L-P?iY8EV%GG9=rf)I9Kq3BLQR[Jsi,"[gHu(iB4XZ4hn^Y)0]G)2GT*VT.[469BY%;?XA1f
%J,8O-fsTl,m&Os=eE>oUmc2"J_o%nnp</NGT=OhF3d9]_Rn^s46*P@eheif>WP#prX"Rfqn`&_IS:_ftk1eJs`%)Iii;C;@^K0(V
%VJgl(CpdHuT*odkj0)b#oC[*5abF`98erWY<UuSE7ET%`)qeCNIbm_rlF5a;?6+@<S$)U3$;`$0VjK@PBt!3-_`BamTqXJ9#I3O>
%e8&DS#dGCI@@-^9%nk%a9O;jG5DU48TKH;)5Kn:+Kic$CbB,0!];mHOYO8n>GN3]?`m_'u2h)e6.D,UtIS*Yt4M7!e-S]E-ch.b+
%)OKm`:O14XlUr&GKqmGW'41<ADf,=0k2#^dGeYQkkLgOEe(\$9qL*-jldA;`r>pDD,Um]>2cjZCJR`3>BtNu+;:XnQS!t@(B22fP
%[??sL2HC2Td$*5`MttV2X:E*as#%8;=GY4_b6&W"-Lq5FUR\]QpncH9oVAPd?mn^\G5(RYl`FC#DL<03'E2ej=b3Gm'<]>'j%tp\
%i1:C7F-*(#1n+sGC=T,Lhm4IZRD*:7KVe+"%8#"Q]k#FD4ck5:n5[@k4NKZ)nra$I#J"JQ0,\4I%a"fFQ.UojH7j(u%U]FP5IL!$
%Fq#T>4"-#9#Ck#m/Um]b%BP$QiHDa9F5V\M\bCTNnAfA*\Su<J:3P"7=9oYNC+oK:-6,L!O4R38-g:MEI0@GKB6XRu:u's%8_6Mc
%jUfD9bF4-JUET/;1YHtNZCp(`B>,A<E]^YGUf5hc`h#)I.Bgpq#ILB<Gl"t>6/d!;eW7UggL%ouH^_ql%;/HurGf:;oOd`I.a(RF
%r@8a`Q`7Ubaut%1B4a*;9YHm1HJ+4$^4kl[b]AaYg3@U^;2=QQY4G*6)s>Ne?Yk0dhAeJMF$DYl5(.eWlKQhH6PGs^STeF:k',BP
%%f^9ojSYfsJVBZdWLLrSL*\SQ(Yn!G0!4rgeG&(&_r5h:JjIl^YF,b^qt5Ck)1eZEjcG8&faMlA]h`m)M>q'FjPD7Hd@QL#Ha"E^
%]jj(`h@#pZ3U@t4Epj/jPLCEiE^Mq\W/"V4Ln.je$du*(Zn`#WrDoLCK;eC'HqgcK5F\kS/Ge$8ra.,SdDhfk[Ups&o.FsrNH;MR
%g!WO@#Nn`+RIKK=HFIYT,^AT`p,jGW@E054r%1N<:8Ikq=T^\Qoqd!=k7)%0K<WeT9tT7efsmQ1j[WB6`n4BGNT'?=\E2oL&_NE#
%2rNIBcYN@"l9:*o4T)qkAT;:(_58_Bn?\_sHuQOljh^1J&PX2#I!5O-KcssVg;YS2Z7PY%\&T'6VsqY5NJl,0(ptYs+=*IMqXshW
%YY]%IFQdVHhr7W2`SBh)=!s8TNHe2/+\Wr)[:/pJ00bN(Z*F6<mWltdNi/:$;!n3<=)8d/G[$[,S8B7Yb#+WKXBtdZe'Tb<:;6DN
%f&$9gnpPaehM:%<UO4.iQM3\B;r322kmt60CLLojY$@TFcV8pLq!3@8>jOg^:G$F`=0iF69t7b)p!diqr0?OoB_bQLV!X)J)3Gt5
%^O9LH,'O3>9bj-O'qN+Ng4g%(hGei*\MA$?mu=liq*+/ZBheW8muX6Ne.ij_YW1Z$ElE7"Th^:+3<i.;\1nm1+Kt#Hj8A5u5\%/3
%nE8$Aq6k($T2!4mJ]s"*_'`);FT&a*]/\M22HrgspKLtQHm*i6CWK(,7Y!J]jcNC*caR[rf)_BMh0TQ`:=&XJkIiN/?F/jdcAaR`
%!k%2],W>Y]k*:YS0cHd?^UUbW8?&rA)!+>2N5=(Z]oVgTqL(d54%B#1`)"Qd]M4,L/N^bG)p>e/53s+N2SHgd@5!G3!psJK?,#^,
%,WL3fGJfDK0$V-l$\+J6]=%0Mc9A`/QX;k!-+^ka^5?X6p87^08tU7^g7Rb"J997dNq'Qc3"ig[q@kOCQo<aUpM^"4Bn@WG9PY^P
%#mhh.A9Vb..ni=J/S*K"q+W6q0Weh+2]i9QG4TNmg!;%N)dTiEYEoIgnFfH\YGt:-l"5><['272,f&!bkOHG3%CM3K-VJ;i;9Pb^
%S]K4,NE--*ejdJ*9H&2*bJOlG.V5kL9A-R@?fLt3V5^4\c$&P^0J$Z(c(.PgL7),-kKU[MhOK'Xf@9-^p"/L;AN/$.=f21_nq9Wg
%Qk,3QRAWH:lAMi=_7SNaMi7kl['r!WT:%^8.6ZY7rTP*<FX=!I'8dCCFJ:e?KA(dfp0IZ&=l>pHlotEjamr5pmG=?T1L5.#:h[Yt
%5NU!Xjf&TfI@l!D?iFO+b(onQ`UXiBr^XJ"h06!lGFrdN=iu">^(A_`BD:5SZe8$!ds9C)rIr\;64].PL#/<r9BGVkX<=qMI\(q6
%hpXti\b733O8H5<;np!,LMK>-loS6V&D.IOAmY3#G_9W7j+PCY]i8PA#A<VWK4S_$Mer24J+!43OUV4`V#Q4R_E<m$@:AiWoh.u!
%Zb#>9?@as%h.p]*I0n?4[=!5tlH6$RRJi]BgX0@s.=q`*(3&TYUN.Y:=3f%c-hfBaiot&0ADML]Gi*beMA'^l:AQA3DsaXN*'`8j
%rR&&pQ$'e02(;C'Xi[!8fe>X3mc<1MQYh$cjf:V1f3Dk[(4:?loN[W/9a$eIln@+pg^c&#s23^\3Vi<i[gA-<h?L%6m6Jt__]b5e
%m2mDpNa^9.lXLF8`6'1mk6mV@q=U$95/$X\l$OnW6%AhMQG.T*'u$/V=l8]:rOcT@oC\S%q0J+ZcMb<Lg$CiR3(Yd"V5/7amUojC
%]!Oj!O&j#92'T]pM\iUqjY&g'.!+q0o5FG?Zh!A-GFq&'`H1a1?i1X]9IIQ![PL.WH7aEN1js<*rOj^aT"TICh0J#9\[?s@_)K@\
%/ACW'd91TMb\5#Tr-CEA,XQ^_*e(R;q;U^lbCk@l/fQV&>5g;U&:&&;.D4?b\]`!/c&gH/)^eTXP<!]a,soIU0Y6U'(7CfcMeBQM
%]<'#WL@"CFbO9ur]MpAb]A06an?,iVchgi/*1@kTP;pu3Tl**]N*"V%'XWiJGC&rUZ58##HaA@9M%"1k/QX#.W:a2NDgKL6DTo^-
%$;JEd<3@AP=X#GmFV(P;6HPNF-*sSEa5f!2`oGM*"Z^WIhWOo_FlJH5N8dlIZ?S,\Bd0/^1V*GYf?*R9K<m5'^77rUl>^\#O6-&h
%^;#0onb^VbnaY)gs)YI<rTMkBj3rq.Q-&.\-_%S`Vt&@.dJ&^BPDe"uPa(M\\gE@#jk;PVhuoKi2n&_0DLL?So_?Gbet:g8C.Ei5
%E;'PM6>_OpF\R$_r;>Y4+r"3Z$bo`6+J!4^C<=((W#;e9Y"U;Bj/)SFo(pf3SaX\ld/-pm92cu[aOM4Oee`hk^U&)B4't^+Y<Qsm
%I"*"sgHKu_dbB)YF7=;7`qkZ>99gP<mk:a`]Eu54%j.RVFhA^,TA"\nNV6M#-C&-.gf7P'a0n8X?1Y<+9uao'ERgqhXmZ$A)b4,k
%H1LBpJ+_eMn0cQ\G+M'NiG4$7i<O9Adbd,<3+7:#h@&(#TrbN_b$#d8iEF*G0ah:Rh1_[*Ein.FJ!MEn]4n,6Cudn&2cTF2)uU,S
%gm]niZ^k[J5^(geU3*ML5/5;0B3Vri/g/q$$OEJ0+6?joV1VCcolAf&IV]cDOC&bP2L_B&a8N=9,ALL:rS0&!5GDoS2'\3</]8`W
%UhDqqd/YX)A:sb'UYbkFX.4lLYeu6c$^<@3*^76MjRDlp]Y/@spKB&"bhRFd,iR]l:IVl+^*OC&?g,"?pJ+pbS`_W7k$5<PgH5^d
%c)-!8^@gDMWrYF0'r\FFp4A;.907C249USD.?IgREo/BQnbjCWS*TrQYJ&ikSD=(JrcJ,2\I'o-YNF`r3Yk4=o(!/a_ZIT@B0VLp
%-MamT=HZCComV.e(BA;nkOd6^oJ74^AE0<+l_f`/i@^n3JiCHIhrZ::%"@sc;[?5.3A07Ar>&"WqDgK?P/5a_p!_m]bo9C\3=JM(
%aMuF%S*l21Oh3"pj&2k7S,5:Z-/X3cm+3]]TnKQIdk:E$04X(^X(?#h1@=a[?&ecerVFfkIO`V?i_rBMY]6nOh)6;Fo%WTSet6$h
%T<;J7q''h\`u>UWDEXGrjYFPT\a!.g`[(pZ@7km4,e,m`rSqUDC-h17X.N'H]f&+L$l+F,TJq;jk3h$s>.FJMKn=2:YHK$Ta.r1s
%c)'63dqeF@4ig8#?#Fjs.fButV"`W7k.Hn@T):!o?QdH,FB%`lROs>/:AJM/mGdYCa+u%sSYPHO6TG+1Ih'3%XBN(kou="LS#o+[
%[3YInJbA#sV39,j`K^VX?4&>mgV-TfH'PP62TZY?m+Z7oX3"VGN0)J_eJj<(Fd'OTMbf/cf-4?L8m.DKG'2-SKr-cnC@XD$oD&aV
%W(0Y9Ju(d\2]!3V3;m_urk,@/6'hFAlY-W5op)`sKC@ZE$tB*I^9&Y\><OI\fD&4-7H=W.gWNC#h]Q"4NBDRH`foeN4WK[;mlmoX
%[K`3s5=C4X6J/-,k1;aT`qq:RA,Q2mn7UDbq_GZ[EZD%lp;XqX;WQX/I]":]TU\;h2?(>=5"9eoe[KpV-TZc.cDC2[L^+SsP$fW(
%qmMVP3gpd,p6,_u@*ZV!J'M9NfBEGmVh/<)lj+["@_6@:<`#uCamj*rQ+\XD5>V"AGOp=0<mG;r(T8Hdl[&`cTCp93Wce96p<b;.
%33@%51JnskDk0,7pYg7?++CnLORL)Fl96aWfS"52dHiDCJYqbNRh%"GY];q;5J6@_o^A<Z)$@!,Z*B-%lA!p2%p\-'0?7YJW:@%O
%_6-/(*Y.k21.G:KB^V+W.3/5;:VrNFAA;1.8%9GFJpFgs'Q38D$RmcNaPDMgRsXmb>_n^;lo>BRVWU(KKAjVE<>kkIRE*M[29'GM
%2g\hNU-SZ?T.Qi$0SEoD^s/R0c"n7Vb6-7g"VpaVbp]?"f.kF3BHNn_9caNuD8<rLfeRG'_f)@QPqi-1B5b.*E3n1']4m8X?pQie
%h5r%Hga!A)gVSXO'_HR?DEKC,/NS.*rb)s=lP5l<L2"Qlc!32$X$p%#BeS2\a>%PAHTThK"\Y?9Hm*&pCNel%0Q!u.Zlp76"4N^q
%rOE,+H>7'XoclO`E;m:u8^B=AK\[t0?f5P"aLSm-'P!AqoUqDP9R=F3T#9L\HuIfaR<1)+2EraVVIhG1X0%2f]3#L_rJZ]@QUiHM
%M%m8OWPo*`M].X*WbZK'6`F:l$G:"t=65."Uo#j7\?#0qBHr`7_Rp7dY0'sNTIPY@a'FssR+>E-GMH2DTrliZjrJYGhNEB!>aT`j
%<I#t3<9Uee<F0J)C+mdmm]*p]Tkb#,Nk6cZmeEn"jrJYGhMFJ"e.q*dG?%u3dW?8em9PtnH>[!03`s+r0d)d"gcMo.HZ2*>T1s3"
%-8f8n#HjV1,<qc<+0*0Gq!_S4;CtuUKk`1l<,.7C#?sj)(?fSV/W38<*C)(cDmn"di'gu%G0[OtM0G9OS#+*5]afBD^CWF2JY^gc
%iiI]5jSQD.?ZFM5aXjDM7ZE+oDRe-%($Z"Fi^E0ZD':&K=6\R`M^rm+Xf.:rh8hq.+QI^t?OKJ<9oo$3>8l,['n[=`b`uR@LC4iB
%]5WhFgHPR<G)Zk(ML_9<?i9c:8)e_3a.L)9mN):JHoCMM5H4\WjT#!6aX6s/SIFL[reLU2q_7Q\/>&O+k9fq28UIqZIWi!hjlk^I
%pX@$dIjS5&HZ<tBs7Y%)b+q6":7f0X3@f1AhT=gKeJu9.mkE47'7Y7jlhKY^Infk2$QgGJ+0QF"E>1k4+UUo3)GI5t`?mGc^5Og#
%^irrHL"YPRiu<P3Hg?D.H'91+r#hEf11#@I=Loo+_a!q^NdU[r@/i+KH^"1N?bPtV5>K:dO!jp/o#!G#`M&,8ZcKL/5KbCg&T#=M
%kK+[Ld'TOgM^B/SKLm^Kq+VVNPCL27UEiGZZQO,D^Ap\ShaHF6RO0e2fibs9CSgTX^qs.3"odSF^-?M'^m@P)q-LK0O%/^2,`Dnm
%[,apUo12&kM%Nk:''c!uT6i.S2Y*fgA0!sd8!C/gr'6kGAA17*Sn@OqJe<DK-B%5o1O1`SBP:lS36PL!CjtNCXZ/j<!C`UX-C(!3
%Ib;eRqYK6nPBFrIaL_=N(3l3X,Z"2<,!.(=9=^G2pKD9]rJb!;+/SDG=j*1#Ss4@d?5hJjGY'7NM*ot(PWL<M%+6O;Qu&oI]4Im[
%b=c@@3HdI7j,qRn,$AfLQrY>fq5=4>:F?)9ZPt7;b4HoCcGI-6jX1jW?VWg[c>II"+3B4_r;GUdcaKT(co(E+CV<c9"I\cpDZt!1
%6p:klaNT1M$@-WI+8sg0OrsHSZT([iIsrSg6-K_HRt2Q$(:?7f!Q%1]PAH$@KHa_6">(:5nt_eYM2a\:b;9>`J50F4[_^sh0.3`G
%=F^k3+R`\.I=oE=joKI#@\0[''kCXL'?UG:piBec3R6]m!&cSh*_ed`m0&IW(1jbfA9FSNJ]s#T(<-"1!Z!U.S-j@7I8T"G=^j`2
%j!B#'Sbk7p'*JIO`:._Ojg]]+Ak4uC7A)rK0Ff?*="]J+>!<'\'`7ZWs5S\,4A]B#Qsc]e.#d6"rE)kFPKh0fMg5b+BX#rs?n1X>
%I6H'm>V;%Q8]lhM=CQQf06^\3N<I36>Y*pM!f[%XS/?UU^*e\tAO>+!05a3*j2&n"87c5>eoECWgKI)%i+C0^6b0$@*'l1l:L$@I
%nhVr,E1pO)!Lj@KBR.<hE8\o:qL\Jt&%TMCn*K)*qk5AbMogXJ@M=sPM[]#Ki.3f-2THm4!e;QX8VDZAIU"#+?@l&,DgA7Bbs:tl
%#R!Afp@<`Mj*65`$3^dl$r`i451UrH3&&@(6UC8CVjeR^Ean2`Q_Kc'l=<a7Gi4c:b53k9Tkp]ibUfu"ci[8TYh*<^QUmGaJ;SrR
%Ot(`4,D?Ngn<4Df'j?cI;SO4-WVqZ<K\+IC^3GZDPB.8NS`R(#]Tc)Ba%$a\Cfhn]Q'D`89K[8bT,^b3I8KE(S;uAO,Ibo6[OXaM
%QGb?h)Vahe7D=jkfcK/`?Ut8)[VVY"c-4CB$"eQN/#.Gh!!RXA6G=ST8%>(jei.X<ZT-mHjh7r'$M2`f&XGtr5Zju#$Q=ce23IAN
%!=Ek)TE&@BQbeSkQ]7M^js?iCOC>u>&XMd1+mDhdHN34u7te=n][CI9:(RUb(#Z0M]N?%;@aVYm":A!g%ct\I&*oD5-d24Rr"423
%HSX=e#T$;g&:,FOZ?63^HqdM25[fbIT6r>U>@omk$n#"1`(f08,kbY,5E%)(QpJ#=crgW[!d=I':j)R;=g%gZ]?'D0E]u4^q&+0P
%I[\8C'BDu$&>Ai^HTDF7[>4@lU1Es5/pC'N!#mT#`K9qMJg7PUE54l3!IM&VP]-_cUa/Uo;o4C0^0IcGQWf-$,JB.)6j+5O.2_S5
%CcZQ.p*n")">/I=!/:1O.5tCI.<*SH%9+<L.8l=*$dK0$7M+N]&+%S7XmG2lm0:oB7u3`.-1Eb/joa_>/?fYS&5s7QTU!GuC8VUT
%-"W!<6'0$=p_S:^N"A6X9/E,W+L_X^NJD#J8NeD_MrZ\q(G9-Jcu)UI@1@a@8a:Is2FoMI<k+d$(`;9CKII+kAYt3#Ml^_C;m6:i
%3]4JI-3D`9M._E]P6r#G!@*C?.ce`Sfi4i,3C!pG&r2*+!('3i!gciG;LMXQ5R,.8N,4P[IKB\\dfdRW'R(mD,6T2Hi6hfrP_BbU
%p0g<>%NmK^n7lNHGmg!<P!UeGg^$4aK\BnWJm2*>fnT_K0ej7cK9/D8J-M`)2oc#T(F-j>7Y\E(A=X7SD%/eP"$om4Ee&EXon8/-
%;Aqfl8/*+rAQp&0kDD'X[*q"@.go9=@)7aPcF6(lPb'2hLMsZLGWb^7YDr2K_Eb@Jgk=18h![ZO&'/+^@nt2QA`@s<Sm(Dm6&5sX
%Gs6h-p'M-\$p=iS*N^-Fn?XNDGUaQULBYk?(Bc.iaAi,#l^39>n0AH2G.k*]2lWCQaH827JPbD2\O"k&+[#iO"$8G-`&LA3If^e&
%G&Fl'!Y[,-(I/2%3hYu\c2t:Ab(3!eJNa7;R'o<nB6Dgb8:lkT`fS,e]plkm!_\26aqBdn9GS4_![i!hR,N^@"@#le6f?mF-En#-
%@E91=d-2ad\,[nF?m3D]KR51oQeRZQ.Bkn-X-76cJ\kt:JX>s0T>8ZLA`pl!JlL)*FAB3r3-GgZ^&s,:n,@LZ#`,U9qoX6G,8$#j
%1=JV]@q^Jtar*O)Z\t.:2C,:H%0D;"AtVR#TbL[=abBdY+X$h(i2sVsnd`3AOcj)aq`%l,8&-\l1fPW>M'@!$"4I6,+;?j<PZL^&
%FbDGFbuT?DO'+H-h&+O+AVQQQ%OG0Jm:==g>Hp$m;qZ96>_.[t:]W+j*8YB8)/U*4J'!Ct!%,@&j$jTf$Xb/'MQd6J7?/ROS,t+Z
%05*j6.N=deOjt3u]+`n_MHlk`#\;Uc)IN[.2TL9$_nlTK0I:9U60KAETcsQ3QT^$dJUPKP`@$e*18Pg;fF#XqGW2%<)">=kYC\m(
%>(YMS1E^:nAsn<e]/:,?V@1P"HoM/+j4drX#XClg<CP']JS_Z3E!#-_Es>%G,)0c@JE*6$PE>8i^+SN*UNT4l_XF?ogYh@i3PmBg
%$)lO#GJ%FNY9AolAX<i_Wo9t4P!YC`KHl'WA.GY]JJe[)@W;`d$-N[k59iiZ#/<t3bUNO3LC?^1jDHG"fPeiS!RCep+^&Aa7,nM-
%no013Z53Xk"DSu'B=Z!$U(!`D`rEQ.0ennXfo&B,1sL$WG2l9h[E+-E.st[CVkJa#P&(sD*_p,Ojc(I;)B*Y%`#*-"K1ICl$oSM;
%APRagZ5X*$L)fXb)?U)':T,XBc>m/7pHi7CHCR#n,/TUtnP"aF>-Q?VU_lQ4=\`(I<3TZ(<bjJ5^lm]]!39:jiT+D8nfW9W;M3(`
%\7nD93YZ\f\I.)R-Y-Fhh$O7II@/#@.$ZMdg)tlCke"p[0R3u6i1`8U8rj#9c5Ghnjd*r@`Q6!3>)WNq6SV2h.RZ>OE^ZG;I"c\&
%U;4L,.b@L^:"Y0i0X.'6&s;e$)A>QV6Ln"R;=.%0X6bk80eioaq3d*\.JTfuRW>%^IRdg$=&mL+^aJe*Z^([NP@-f\$kp&m5?4g8
%"-Sf?$IK<]ETQ=?+d[486HEN@`!.nAW?k$D-B4rRV#03\T('/g>!@X^dH5.J&^CpmmRa>]UaVfFnO^Q;i1d72=eT1VU/6&1l)\Iu
%S,%Yj[MNrljNbooKGqBi"V<GJT.0H.fQlHd<A"^pEJPund8LcPRSo1VY`p+0YTF`n*<VEV,1hqX/^FT/(B);-<.PtK:l,\h0lZ0-
%.45A>e$HO7LLiK#\<MXh<Q[fm=41"^pF'&ihB8i.Y`(OAL5<]\n=f2BLn$CIN'smGb;R#YFaP^A,OMt#"37p)=!iI<MC!TVQ`Yr]
%+RhW*@a9Xk!TpAX#V^3kLkpm-DO@8dCubB?"!O-W=:$>VXE"npBoFOiJBUl-WN]_phu_7=D:5`."?[2G"_[#"1W&-]OE8-2\Rake
%*;)@e-(GSH2i-.0Pe3$UrSLDd)+/$p_-QP=GP4rYdO"d7#$k<].6LLH4jQZ:/f'h=lmAI$=HPA$-PDe.E=ml_P$KE+;+@WF/N(p$
%TRY>(Er/kZH^BCd/mb7q28V1]_K#]M3(++9G6t%,fu!"n\.OAr6m*a!<!Xk+\6?N*SsO$qfPQeQ\H,@s92o(KFclS7?b*h*23fsh
%gO*ss83haa)1?I8$-9R\-+jOB+'AqQV%=;e:`0\e#&k(_0U3+k7,qF3jH,$sXp`_n&.g8DnmWtQb+V;/+=0@6]M/&J!cQDhbE6US
%9ToX)9,*/o\qr1*.pe*$"EB^91f,t0J8n,Q%pOm0eH:#<1WlZ+,*A3P__!\N3>r;MR\(_/^!Zor@*f)2p(]!f#qQLIn`gYq,H0Oe
%5YDpcYa!*7*6NSBlGHrJ*Xng#?rI'afe,ZP[0IR5&Z-g7b+pKkct!."kh[HV#Ee2@)%ia)Za0A1[=O=[?HR/dG(tp:_'/.m[%>_X
%#0]b-@PQ)MTd;0Zgl5a8")?7n^?8`h!TC"/54gs@E^epY\;Jdood3cN,a(G%)k3?P1_/DL]GR5:?SGgjXBM.Jlus+22)9fPEebo6
%6?XPXH24^A$<U1@h`XMY7,o\:1(k'G%S:kY3\m\2rPhKi*kcOa\Bot`_.O)k3D!)b\g9>;2(\j-6kFDN9tH!*12e/=JN66JdYCA(
%#S^83@u%+"U*).4p.e:`,VT&!&5jR)LOC;SP@9/UR*"'1kfH$lh*oD@)]qr10s]\R<;UM2TXt!*#j:-^qSP+R*KK>sJuE2CK<cDf
%Cm_Ik5RJ"JkVJoVZF(W11;BC2AM@L(ZXG7Ui#BYgM]@c-76q6/U@8;WQ4d;-EWHiP6#)(+6;W7/apsI,qZ76@(qd8'KSpZS_6,:j
%V"E:Xk=]m!LUsJPN@MY/RgB_=`.Y,;Z,rIY_@>qH9%:5&l"kdl*MaZiBag3>!$eF!oE5;Y:IH7NVFqR(::C6TSIt8u[KeXR2Nu@?
%CW9Ia$Eh@hK$:]4(]oK9Jg3V_J/9-AL8+"LO:jk>%Ki;a&0auXi@>4f'DTQW@!m*a$TM)Z&qEID5UbpEo9'Y;HG3!^#6J=g2Q<0t
%ORX1;=_%Te.`3^27L?*A8_CU?'a6"PP'[t`TfRdI">1#41En^GFbES..\(E*LIiUZY:]kt?>F3i3;#Y_NKU?gN>)OM%=pMOU.mB`
%<[`C5#O,pH<-/H)o/-f*&NK]E)-;dqa55fe&R7_S"UKnB["N/8<kC4WONOg4=Bb5uN%/:B@Q:@ncFalUXG\5s14h@k6g5!j/cbG[
%$(DC/1(4NFMn**'ekk!R-k*-F$:V1n(b9-<#sQ$UEk"GL\R@[t0:9G`"q_DE!iZNGY!PsU\Qqb+C_Q^LqRRe-I%?CdJ1=&+Mdj6t
%"-kSY&<j_[\@Z'4LR\V)NSTojh?]-.#)P[)$Q8'Y&4WrNFP)fZA&0d*@``^2KRD.N7JecuahUc@C]-pYab!n1TjuJp+uMjmDl@I$
%>iLB"XOdaJpO`Lr![X_#++^a%PF4*>)T,,u+I-N;>b4V9-/8j?-34L4Ylu0M*k5>SKIn1<MAJbIBrA%qGX)67G[:Y;'$]/8`hs7?
%!FQ7!o+K;]+\e^u#pGX=Ba7gb!bYo\.mPO`=I6Z&iCr`T3B[ohap:2@%!%ai<2Hb;3G]6s7Oa;S";22<eGoj46jes%5sj7Q`)I%/
%!JaGj(2#>,_D(hqDGD\@0/b0feW6F$R)'W,_1%]t7+SoX4aHWQ0i8%PhaK5k+Q(1u1bIHZ@=%FYYn:;t2unjBYit)>Z2an@Ss@@X
%AXKSC=L^=i4hsrt_)%e/$pat([UnE:)4X^@Eu\ReKWSg)Jg"k<+JCRl:Wk_I0[@UlJsO6^/gmKo"eGk^L_u72[[<>qSjf\e&lHV%
%eCR(,$6%YWh)[>](CH@!,$IuS,`a(E@-uN`e%$P`L#50,Dnf"Q)M[3(q(_6@Ecl=oKnEQ0+2d>Z!l6rpZBWWA"(<8]8_Va?8H^Hq
%@1<(!X!`j"F>LO!d%MXs@?:W5^gpCWG?e(6j?f:g@V@$G0*#?S@3Xh60nLdpb$^p,M/`N7FMUOD.tl<'[l9'5,XURdn6i8U]T4em
%*nn)>!H,@]RBR/5Sg,F^LpcQtE#F9iAl2Z(%Sgl#3XQuCr2lIK.t>VKr'-.oMWOaRYa6Z%m<.i5T;ua<\2aHU\[l`9AIRdT=#A.&
%]il*Uf_9sI6AIsXd&UqE`h:EX"H[E`D)G^iM"&6U0P=LTgi,Age=hAf5GuaKjoNCDeOR,D;AeW'&14&@d094[6uk_j-@p>Db[B(e
%P11bQi@'G&Kp[K$I]3<F-".th-/h0e'J*IFUBHIZcks\V6&NYP%@e&O;k`bON!&>"P!6@!Yk'C&hKe\?XV&J<jFBZU]6-K,Z#N-K
%H9'1fI+ekt9kgsX=sGT9*ce!+7.Q!>l8--T2J6,"?tH3iaYSZ=,X`&lTX,!oHJ'HX_Fu0R6n4&o(os8saXA9PMu48)(^!";P@$k+
%NDFtj@U,Xd1KAgs=YoV.-C!u70K:YjSk>jB3&UosOM(lQ2@0pM'Q"cX.9],j#q>ptQZZGaeIc=];*`Sm*8j$Rjb23JP^YM&>Wpea
%"<^@UG/4]Y_&TF!`,Jnth$InT6#)a"re[l=QpOQD.tb$ac<X6j5qgF/!iWc!>0OM'^r]%`FVP+VG`e8c_>s#=aD!n#"!=g:U<a`b
%l*Gd0Bm^R0.jUZd0,)aWMG^(77aAf'$^[Y<A%EdcPI'5ZV%GC)VTgSGPI7pMc`eW.;`;/MopG2_.N!Oa:Tr=TOi*ucEjZPTNs4i2
%N2HtA@Y!rQ=Q$tM<:o^NqWB"i:\d<Y3@9E"i6t)b,Sm^d.>:W&Yh^H+9EFe=qf&EYP[P6a4&M`d/K<l&TFW:BL_4V5A*JCh`o:0!
%APRc:TnPkF<+C]V7Zn.Q"GnBN[kr3dWeDY*;m#Ts;?2+&$GoX".!!24.NNIb7M*c8L5RZ;68PEjP`ZEKQ.hF\*8Z<O8Ah>0R*+8u
%.H5uN+Km8nY;A><8IjU?N(FJ7:Ch1<mlZ?08mL3-lTm?$\mUY/(d^Ut/XoZF6bk%fN)tTP(rsqlDI?V,#`dGLBIPR.Q/G^k!gI,e
%7hOf1Vp0nkUqUHh$*]3j'&?UF`,J<Nj#g:V;4ukeG%:o_pDF.u_]fbW3Kbhehul4G'sjtc$ds68@Ro>;UsbV@HgkQ#/2)bEA>lfU
%3<o-)#VB$_?`m%Z0M][X,>jP2_=/#%9&kpS*Q%-I"qQ8PWX-TQabO&bfasQG-cXL:-fb%])Dcr<,(S@q-`:C[+gn_>/"fEN]3?\0
%*b?6ZkD(L_)n6\M5UI?tii?Q7_<n)D.9$[kk3arJm1P.]+l6"[PL;U[F0MZX-Q;?24V($S:V)V(,QUuIl3Zqa0Xc]gqndU]*FA4n
%o#k,cA-:#.Ys^e'L.SJ3h3Xljen--c*f-0"!bH$i6ZfKoJeM'c^6b3Tm3RKAk:$Ik)3P@(+%(YDdOrA0U]a*B'\[]L:q2HMkO)dF
%X2j.7Urd:lG)?\/H<*CHBFl-M/4>:f2<NW8#+.0_"Eai8:f?"CR9IBk!XId8$Q2:p:0`2amO"B>BZO.Y2&28jH=XE)dV<%b-U\I)
%Gt.1_-DR%QTi>T:^%,TIFaA&o_7'r=<eg)UMePX4%VjiW[(@HPbQH$#R8O]AC/8`[`W]Ie6?je"GGMUtMbN7hDG+:@P;,D2A0*Sq
%8&2`.g3g+p0]ApoB+^>?9\%Q&6K`n*"UD-u4NhXT-^Gq,(T@pb(d"EG:#XG6;,1':rcUV<Wd,4("1dFi9enTi$3<C'13&ri'XX-t
%=>rqT8)-8T=go+m@#`qP6B=#WH%X':6*f#$m%%")N;\OZ-aAsCE(`[?45f!gb$di9mC`'FZlB:6OZdqIn,p\:(a_^41Kd5lnC\F.
%7$NL#:Fj8T;IuQmnr>m$l,=\fS#`@Zr!m)[;BT/?>[Bf6HgnrsSFKee%ekf.Q>5"ZQtHZrklMW,Q)IYL3.bq_'F^Wb>i_"M@AsU[
%OB7h]*ic,4"r@k+KeT-U#*L7ij<YZ+@B?$/!"2TKe9+):Y7HNsns('[)^#4%J;r\F[<9Lq!GZrqdGc$#o[8g]XRc&db_abR+F"FJ
%=]l:U_'q`6o@7dMpBA4@>KF:0PKqu9i2A^X>A,``4VTZ/a>Y,LFG1*^7%Rc+3;%54nNNq[0F9qZiop&e4#pE`J\^a7U320&9Xfl5
%iAg]_Mk*WMR`-PI0JkA6^4A+K>e:)Yf0)Me#4r?apg+o0OZ%)i9&in0)0dA^$6<AW/QkWZW)&aj)3h<m:VVE]='k602`T%%U"e8[
%DKUS5:Cc7K`'`1")k95d<WZ@$"nK]*#4"h$G]aA?^WQHhYJ91`LSn"hG",mb"NgCGfK]W`(*k)J&=68-\p=b>Cu;A;]kF%W==$c,
%o]*"oJFt'$<ujLZ8Ap)82dt/AL8LS7<#M8QJ=p*R6mhfgmbr]\'r#$XHUFNN`XiNfNZst1:kiDqSti>H(ude!F5oP]rJ8$:'7tKt
%TadM-TMbQYFBt\63R1ac'F,?@R-l511p@:%!Uh_;4V.tD"=G355T1=<4$4jUi)+`W.J:J(7[`e=/mHm_8UKB7_=7`mF45NVKOJqL
%(I-"6A]C:09(i<SpoL(!?\IA_7,<`'3"F-E&9T!103,D8E%$lIch$q.n(bj;Yd2#fWW!#I854`9,)2b=^itW?Y-J4A6M5(<3Ded7
%UNQqocNT+DM'.=]9PoE%0L1X&<+sZjPh=LR^fW&4Di;#+o&32tR.?-IGZ&=:,b\fO]4_]3X28#>6`<?W*7;&@Q,sHKH^Zicb#S_)
%>EkC11UW4>coHJPJu]\CZ1k1Z8A`_XUjtct9\#P."r_%j<XIu?T<uKl't,Wr6[iE4X$p`?%`jc*CN4=*)_d:?Pqe/e%RGfIplo0(
%2`J@=b#mo@P5339+".%A'aNiQh^@Z8^8D8<^<[Kp)f_Jf=Lu9J*>mOd`41Ko=%FpM*#:f#WQ)s3D+\b3Y_gErTNMo-+eeQ-*+hPo
%;K.krnu,g\5`(^EZ4&7u^'$+O=q"RcWb23>e`CjH%?d6c'1CRj;uP8O#OSoB==-J^Z[1!_5V-i=KBZ.;r/2AW*gI[p@#ZQcO')Zf
%O",o@b9bRb(d"\?cDZ*!Z<%NL"2jJ9b7>E4b"&SgJh`$lCcU`e`)FE\VfTB:US(K$O<Xmc1?]F+7q*tGjcqm"h.oYLMJ)kr0rJdH
%bXX5cg\/4/_g;YZ5qsi>rV._<S@+"&S[O_64^)$+5%NIbN#/\lX.EFCErF&2o*[>gIA-J+*_G7Tmm-!*^o(Vs_=ssK1gHcAFg!Po
%(N=Ya1$m8-a%m5\XK4NJ5.W^9rH*'bqE<b`?iE6<o(hdqn]K#BiT\CHj0SW<hi>;YFo1h"_il_qAWZl>0B`R>*\2_qI/O!0oV6g(
%oH0#3f^ZVrji>Ds-QQ!$IQonW5'q\Pn]S--Pni1?h=tRXo8ZmhI/dOEWfumA?iTH8q=1+2WNO;aBLSVC3ap)WMD0/Jea_nCn_"<I
%FGd<I&="Aa4af$<6GcSXgDfP9mcWQio'OnaNe_PFI_#5oGk1(MiQ&:Bdu.'Ml;ibkB#Za[n*'30QVX5DHBH)Q<1+#FbgsPlq3R-Y
%T*N4UDkO#a,mZA)YPop88e%#bFqB:]LM)D"cF\I0P@pcRGF[@`!BcSIoe^=3<A)G"*YclA`nh\?fR)?2W&pd.RODZt#;dkD7MeT#
%!>Y'\c,DK,;`?3bQSQ3_F"E'FJ4!H7:"=9L0<o?(.KN2.X1J9)mF&a\X1qX85a`4V-<G":%+WoCA2K%IJFBn^;3qLtftFh6]"q&"
%r.iVt>Ou!BCbkcf)tDT@?pa.n4.GpCF_itbW\hJ[b9B4U\Q]$lZ6O<k<5%tThJD"mhqH^e`P#?)QQ:@j..ts8)#l(<eQB<&9-_pl
%/:.fU:_f_U>%62JM.LqN5?8]#)n\#Qs*!g:es-nUlP4njp+]&9(\#*rGaXJVa6<d]NUn7[rbp';=f<9bRZ4k)OGMQh+8.l^p+E06
%?bkMS((0GPcMukl9krUOXR7Lul+9VDe2d8"S%O:?<T,>ob4+;336N*o,T_ZVB\_,\2T(t6.0#P:FJ(Xe9sd/,X[u1T]f(+uVu^,[
%=H$14Za*b:I_NHgP_67V^e6r%QH_%/nh4U`^Eo^Bm2CpKCbqL?i)6p!.O?6G[1lW,$R+%#1dnAur3H5K8g0sK<GBMUk2*7*cb[\:
%8O?/A[mMq'N"Hk;)(5aDHuhC"o#&G8MGZI%5N]c60TMP`J7PE/YSYcu]WT2l_INq3AH4W?B'!c>+g5KY3@c0`J3h\6<]M#K,0>(1
%*jXVTb/'t&Qd7-2Vq+3tkN+*V$>35WZc\%S@+DU+_.hWoSM/>!R@uN\QrW#2?oG:I9sf/P=AU__kM!t(:h,jj_ZZN&i]oj?^?&ad
%Q,"aM,Af7cK)l?;*Y9d[R10DF@<>/_XtE!McMXF/2pGI=DKn=s%<>>MQemLb!JEM#kLHiCnXRMs@-JPhbrG,@%K8</d-De!^RtG8
%3<%M8d0Oq';0Jh!&<-fE61o_e&:OTUfsek_iFM-q2t:8DM@-[jdT)"#b0WNBLI2DJmh40\JHW+LU73b%IubT:K]q=RX[!mc`]Y$p
%eB51%Wg3Or@atFToSHC0ei]!VNBKC#2\(L:p*oKJ0i<TuCIM]uP[uq.^GW/QeFj)1+ri0r8,9GAAM>R>5tK+#:Q/Qs][5-]-CYo>
%M-<NFI5XYSg+n=\RH_%1%_7C^Am5N7HSeT.ClO4]+#`$q<DYf\(56`1%C5BRRB`)@)5p4uOoArp4#)UC#:Wn]m;lA^o7cfZWDYDi
%>Ef7TMC<rTBTSYd+CfHZnJGpl0$MEETd%o=Fur'$/aI=+?s^C.;\!E=M)_p5^R@]JOB8PXaZ*B=1`I6R#oPjsq940s\1q]0j'raT
%17$"M9V]g6?kfOBSO+C*R40j_G@1I<J&NU&XD2S8IggbV?MUMBNh-*/%R<L;BGSP,hQY@mFY!aNb);%PV3h@e8K+'rgp`ko`pO3a
%qds$]$LMs[#'bL1'ecg/&r.AL*c#%8Hbt=cf&_0#h80NZPsW_'(-U+@A!YD.$FH_]cOc'G@c2$"Fm-f$NB_$P>/HrnM"SXsC7N56
%.RU:u>dsVck>[MIj@,Q[K(43oFk?K^JZWZ2@]q2CaJ2+*=/3/8YmG)G6^WpT1JEeOf^aZ?q5AcaKab#'M5QV(6.EZs<a<q'I,ntE
%iQ37RfQZ=<o/5%tJ_DT^'K@>aR3=/^9r')pPU<^'")I0,EDAGJj>-i@Om'W3']9^1)):/!E&2+Rk_T0ad/=;?;/K34Wf85+*k<>(
%=L4@"]o):rN;?>:mHf+<6aVB%blILh#appRP=.niF:<O*opVU)PGX(j;N0C93W,-9<l?(?I1o]-*Z8'`Q-EKKo]T0.'EL)XM<H[4
%?C$7JCITmRb[T%r8()pB:SX1Eb3HbnmD[e`U?8\/=<6[/HNbg!?je6URBos3D:ue+jCtDX&^P'f9$PotQC&d$SqkIC(]h3Yr*>;)
%%U!J(ehUpXE<m&6'as&2r%&KZPLO1XMj!Gd5;?"l!n=N"WJ6=TCg"N#cN0)N]ZN'gqo.jab-^>oC=B,KB#6<NY74f0Yq+b$@]*YP
%e9dC"L)p"^[PDO>YUd8E.N*D@3!G_oH1Zu6Wc6NAn?N\>]ZN@SY-d[jL0`&YN7Ad06=\&L]<]qO,sYj?FnrQO*3r?SLDn<p-==iC
%bq2i4*`n;%EiY9Tn!B#8XEU2S9OH&"b[JKV25MOQZbg7qE`2_+^)s&K$S*Edr.Y\p"0Cm#b7>Di/Ibpj"i&N0Z@-caji@11Q4ofU
%=TPk(66"K9PgqI1^P&KX#8PdoUbq6Fe>pfpA.4B?h3\qZ=(j$LgdTYnHaM$[J[-U?d'ihX#B`(Crli85a4mL6bH(+.glmZ6Z\u7>
%$Nj2pei*-F84r8smN&UT*%I.sESCXJi(.>+)S81ji->neARJcX^>]2TR&u!LlfJpX-4,hTNF*_]LUH$S*6o\JL]uqrQpppYeST5U
%QG;+PQ6%Z\[2?;h"+E`i#;Q]$f#hjak8Xu+S]:#G$1iK&PuF3RJI<6,G8cf@b:r#g-`J\&?66KS[V`I*UJ.8F/M9N;S:"F&C'V)0
%:+'7.=Y-QiZ#0Z`T#fkMe8Oo8q(+^@9II;!i1:\)Od6TqVs(I1Up$m+M_0$)4[TqRMR0h`W/k\h`62W6'!QD0-$Y/4=*@ik8+f<"
%7:D:ZMFJ)SVs%_sI^lbf@b@,Dpg:k@U?;BrTSQ9(<ds/:FE<iILL1L&K`,2%a`:flI_#D((\"Y"%>A-HWC>:)7*?Aq#O5;_fg7Wr
%5+L%JPu`Vk!NVQtJB+)Db#fPt28b$ED%7&Ck7-/P(Cuju<X`3=%qBdUr\!4@NE>1&n3<V]ToDmi[*F".hQ)6,S&MX6)5A6V)WKZ/
%QhgZ0,Tr7s$jtlMG%/I*qJRG^poeaJ_Y[iSmJ[q)!E%A!9=t#"s1JI7a)#[(#JC+W?DA(eI#ou=s,c%9Db.#Zjp#[+r^1`+SOkFP
%>R,_eF8P^+\@HU]j<7K[(:sKSoZ<i&JHP@@^aqQ@?i=;BP]$!]0`TmKHs#!^%CEE/M_opa6K*Cc+q6J!<?.c^3OG&46P(J%4`Zp,
%Y2l@KI8G2G6/N2O):=$%X)/-="%G_;/iOc-QYX43ilqt![rp+jQ64A<=;nJ^fjiRJ9'H>jbq+VG\cI2IEKIP4C)3jLV.dGlg1>Qs
%T"m8_nRJp@'s(hJ3/+-[1#\PoQ4[)Z,7>+fVGZX$e>ON&^t;[>"rp'H&cEfHZm/eA;%qOS#r1-e)I$1^n6"A-_9YHG\S%iTLhNZQ
%WT!43R:`[H`U&BlWh0J\\ZQg>L&i;Mf9-D3\nj.[U3?jrj;c(;V\M(9[:ul-%;8BmK?gjLCP8/;=roal)*bOGTt;bbHOGr08[Wis
%F#7nLbpAWVL&!?o2d*"0e^@E^Ho,OD3,4hf&ef!L1pdAk3IoN00HD;.1`2W*BT,&:_sC[T]"r1g"(5papB^?!@T4GVVF4d\(Lhp9
%B4Z<E=-!gF=@@t6@5AEP<=7Ec%mNWq[g)I*b.+kcV9mmUN0-h`VE8CL(CYK0@9Ca9F/4\4)egP2+L\^Pg%%,MQ5LAkeW^rIM?t=B
%q7'pBQkoP2`on3[fm[[m]GKdcZAH<L69?m9B4ss]mtcQLriOF>Z%$Fj`YNlo2;<S$Noq7A$P>-`6^J"0L.*Y>aVY&u(Zo\#TsdCG
%Ruo,Q0Q8.mD=+mPPtkt=ZA97GA(UXD*W[p%$#6ZnQQ@PEH7A$0T!<j$^=:E>?XO_&COTd:,eK\)BM;Rj4$lZe_!S&t,rfeLk@C*o
%&m-^*beT)m9bY-QEMC,mftG])S7u?7EBE'g6$lladZa/"X7.\t2Y[f9P6BG(&%Xh_67Xl<YYIS<g))'_1fg':\-@]O3tlnBogHe>
%#*8H-;6F!b:1A&:PR*CH+a]E((4[QA7iPkreih$e'e!f<ZB.8!S&V6kYg+S3l]*T(-IQ:h<,8Z!7FKueU(iMT+X!^2iDbNr-'grO
%_Ib@0DZZ0rGEg0=>u?u0UBL8ImDJao&8.9\fUImalmW,IN;G*>g%dEH#jh`0jRVqa\]phBSCY:u#8`\jfWt!i\'T[fb$o39`6u6*
%:a1,eQ\AHVed:K6MCD*s>/gb\B%_LQ/lE;@XZY4@(n@/q9kA3f-Z*[n#FU6-ePR)10<B[ER8geZfK$n8![Tt8)1;P0h.0j]$>W^u
%c>DdUh1OU\h^idkU.j6C%)QeMbU&3EUTE/72.\!AFAHBS;?97e2uK6Dr6PgB"Ui5&<HpLJ-uFVc)Pm6NZRg!e2^C7P*p&QX:R,]]
%U#"0Rp+M!o3b!qP%A&`Pb`"87V-jKu_.oa`FX6JP/BXYu4Pe*X8oLj=!o)CoS[rhS+Y5WOq2-2?CU[rXXUBk0P]@#g`".!!m&0j-
%_+bVH@4nrbs(D]+`O9Ju#)D-oDU11>)fW6VV@PkKahgCJJS>f!`$f`W,ESUi7ulo2=_+%]W#;b2JS`Pf;/O3@n1@8;!b<3U&Ngo8
%Ii6$nU7r3DSFJ0dfljP!RPZcG$p/J1\3^D%3/ADgb661*$G]%3s8U2N3F^>..1Tj_Y7%`k.N_DO(9AL-'[KmtCaE;tm:4+i[Kbpj
%k:npL5oU\tW"cMh<*o1"WU6om8EM@$6i\0P4b^WDdrDKdMf'j-oB4.Hg;_aaiTt/nUE.bA<phWq9*a/_@#=:;UQDr%/Z-nR<\q%8
%<)>)QLM0RHmDWP<]Urm'A2NMU77jkE1('<2#Uje]EcpSOB..eqBhHO(7P*5ucNKZ-JJNM(Q0[-X(15fR,.QNe"mG4fB:3V@"<'rV
%e:&'qJ?$>W&J*F:d_dN/.RA8T6TOd=.hinf0n;ACWf>Y5*&PK>'-bdgmF7DqpT(3GVg[<3]B1ZbT&VT?hOla(DO^%3BN&^^dh!Q&
%D6&q8s6eN@"T^mKq@+?FIIeMo*r6<iA3N>07:-uuqRGVu&(&mmrGDW-S:(C>=;*'),bDE%YlSV[C4!kDc8E&PZg4ZU_mS<d&ik%J
%o*dL(oK3Lid6dSOq:^,gdGC$LDIj`X2O=PCW#V:T8&@B*o2,TE<10,pp?XrE,:"lk#E1@5<,0bqb+m5k74HegA0N=R50LVpA]3+R
%%pZGW6ttEL7((XMp9+Bjc(h#sL6e@n@?+-dIQ&m`-Gq,@bYL'+)uL,B&>8&AMk(*E%)@T=kbc/("r]"Qh.P2l!;6h^<JAh`fI+R*
%K+5^^QN;sh.Urp@imI+cG!(&*6*.42ppOP6MsZ:Z!C>UR:RD3d\rMl;/V-kC;@D+/7nu`WCb3H4"rI?2r.[<rjoj@:!aH7@2$CX.
%(I+<)/iRTFBEI7Mg,P[)S'V3M7/#@IHs8lY8L(B4^$)RlT9hR26_8<f%>rYY@E9W;\ma3!>)Kk)aEL0RQ]6NqcceBPVb"3q4j'XK
%C^^Cb>84Z"A$h-312)kDCco=kHM5'=O@s&(('-?+RhTHgOsRg](SZKYK=8.d!hkGFI+"21,I\'`(;mhi9fVXHTP^d6;bk6<V1-F@
%KegQa<<W&U-#q/67'&P%4qJ,N"n`'dX"M[fX&TR[/[eADckn4^!q)KDT9SMXBGjUk/^T3EA/?ITE?8p(s,RPCce->T#imfeFKG-m
%V8k+3_ae0cRP7G@q/sCepJ(gmRDA-^g`/4c6d?AO-BW+Hq(A:.'^#*Ji)Q.XSrd8'WkI+V%mVT[Kc-(O7=ZnN7"lEZf<T!IfH<[p
%]1/7C)JPCDCIgm7$1jTpLiH,8_?`HO6k,8p4Zb-pK"(jfg<&YNaA$Y[oR\?/4T]%_V+!k(8EG`"3a8FBrUb!7eFg-KZ<fXh3#iSC
%AHQE?L_b1X-tc0OMoKuE0O4`O9t2,]2pf]0BU%(YgKh,>)\]odR2UYQXDa;RiG4oMOnSo6-M>9Nds928r)6CX:[7,j0,8;2jta@t
%5sd2?]l].QBju?\l4dLVT2\`D[=b5tXj2KI]/]-+f<0SA_m"ZqWF*MSU+Y_sJ[B9b+jo7(N"TtVU?T>])M8aS7&A`coG&2eHdJ"-
%<k?LSMQT.%;Y`/tVMWK&_Q]`SDOROR)-BcR!dIolG$<W8(?Trd,A9K5H5^ZLpK$s"oL=Gob>&(1MjLD:_@))qkt-nX$LG;*+O5sB
%VFI&IjGWMk^`&+%DONc-a.s8h<,>SAfn,7>8I!0B.o4%,5\1S3U9n92!+*Q,OL^#cYiTg0Vk(*k3K9luY\AmHR^EfArd1uu@6r6u
%mYN<U%L+t$`-V2nb.X\"bEVsK22+l=gkP08M*=u(KOHr+-ER8o[n+3R6aY"(YC7J-F+i^iQdF*c"sJf_R9-a572'4q5_,mS<?;q,
%6-iZ'!nXe*DA^"RR4+sPHEMTA1/YGD]*E8Q2EZc^S(ZaIo$mnUqcS*D\dubG^*L:Er`7nVH?j:(KcH8Wd\Rd./9cX*:D:SlW<tB.
%o!mPt=0'A-Q_j'u4B<%ji1W#96^%lA)`&\,A.T(35D<F7BNogqXYScb62$;T^`EP?ToKHR;%!Tca!",dfE2YK*6)6K0=:I217UX[
%j:b^oWP4TDel$&*:<ReU@diddrMccEK`Nj4@8f'j$d]q1@\D`Fdm[rChe15b/Fn%DVKmfCQ>s!`Pb9rdPQmF.A%Ok`Gek-BP;NW9
%lV[:PCGFGmC@b^BSJ6GUV[#CM=hETU"==`c*&TnbbgD_LUXn^e;IE?8Q=3nT3HrBX&-?rJ^'tqs)f23fY+O^2")-W3el>2De8b4l
%,a8,*KVhcV2/l`1`mKDuKD"*:@-;im$65@?-lrRUY&0A3YZS>:Kp'Yp$2Q:B%Y9ba9aBm/cF9LS8YefWRKC;^TT[@#Y6/l_6_B>R
%--RW+o8PXWltRF4/lEXQ`EbbBG2P.gZG*<()g:#R_B\+^a4b7ZfTI[-\Nq`bectc3Mg/,2d*YK[n_))^:V]5(244MCSdPa1]SZ`]
%f%L+.01e_$,]WI%cf"be%=o0<MsRD-3AC^M/p[3d'RCZ&7caY(afh=.FT<1<W83+j*YlL#3OSsIXS!gkn$>XBk4)$(5'S\*"@_>f
%kib)&Ud:YK8Qp`T%L'^hl61#:^-#@^"8<OtY:8:V$ke,q$BV=lV-RKt@/tjE8*hP_j2E'F,,4%1HT-$MBA!NETf@[uJ7CRZ(tB1r
%%s'29R08J[@A&qAX<`hVHRCN+cR?uW?cNH-,-r%iN.!ks'0GLj;$<PF`Kp5!Wu86iJJG&$1C[osQt^?GY$c7N",*U+[GidS9Gm!J
%%>pWc8co^5C/h1J+?k[$(ZltG)EW^$AoXo@FTP&a@tr@CObVp"M(Pfr'.'*Icg=DbWn;EC75:_BqU"iDl.M`Y]Q?KE>c*q.p(VqY
%;Y<:CC,2hOqOYub_5l+FeW'j>8C]kX^4BCHDhNi`?UI6+%"&0a@VanN(DnY'WcgpjXThd)!i5E>6-t[dcX(!#S..T\/3raTr9$1B
%6jfd/+1RqP\>O!fNY=T+Uqnr5KqK6gZWB?@'7r#(6Cc9P1bitS"+b%K0]u+A3gCtaU+1G-c18o)=C]fQ'@_G%(s*!B7;CShiF9"o
%'JDb6HG!=n/IN7_<\WJJ"G+PdQqfRC;de,-^]7/`2+af%[5Gtn\)An1$6#48!SCM"*thDmJhV0Q0:]53]:-;(Mp3,UBD([KBe>?R
%lSfT%5uG^)5WC"bJ.gL;IGuZ>f??/D`RMRD%@,-DLU4q>/hs_^6Gb^rm[A:tF,@!&KKXoo=Z:t.7%$uTLAubgV`N\Zps"Z>P[<TX
%?k=ZZEPC*6`?:H`Hn>`557qic9?C!AT:4JkTf$4a?YC@h@u4ipAN4emY>?Zrj9==A:[=Vr:db]<*7`B:B8"_HoJ0i2NMX$;<;"El
%nW]mB0NmU@"gQ;T-WA/mM!FP=@n9#XeSTkbQDUl`Ui_&_4Tbd[/QY[ZKSLZb\uR#SN`q%HOPsUL92uX!&JPdS&JU("Zu=.)&t%\l
%LluR["3!(88U),lFh-uZr4<h#RuVLkq:OA5&H1RM;&I6&_"*C;!fd/3]GWK#'YtWKMNB[a3ZfngPD)sEE9<*RJ,qckaCd9K;!?G\
%'jE;PW,0O%kM+taj+]=8"`+Ai.k;_c=<W@1N'\'sg*ZDl;Ck#;d[2m_,^OV"*[:p4(S580lo_\IJnb\rR\8tr$U:Q].0NtP-P>Z2
%:BAfN_<Z,7U.L%.YVq^c9<>R/6scanbSsH^.%OqDLVehTKF0[iRd>ef#*(!p;8t.S#B[#*$Iib^*$cGL0R@]B#f]YBfX7>'\t5gf
%]TiNIE0^%(U4J"('LJ)X`.s5+W#WflV77\M0pkhA7-+Ns[QmnVYk?I!6*35)69_ba,P4WuC9t>Z4>hrV8o3iH!f`t*"d7ue!W,`u
%M\h(b%;;F7E-gnu3bEQ$Jhs(H([d@J#T=?_F"OmMbid--;Q,=j,8gKB\EL]pNt!##,#g0^M";8Ga/ij>Yq\7V-;;Z0)k!@@B^Kgo
%8]+/mU(AJ=L:e\eFr4""h#R);VKGW*5;f.)=94k5?4$9rWF>31o"Y9G!_\KZLr+u2BUjc<&S0ii!ek`J8HobK7:a&%l`/(oe(B"8
%lOsF]B.m+t$D?[D,o)(^(I<UOE<HuShi_u2JSc^&nrH>M'Y_)9Q_'40,[LV0S0s-)CJ^lT;Mdso#.,P<Uk(%fd0BYKa?]M8au"+E
%3Y-;EfRfk(_\@]4,*^QT6cf")_pV1Vk_1E:L6>`I5U(/\;WAPR*lD]V1/f5X,M;8g<fb8n0]&P2?&U`cZ7*6-BQ+6*]/$Z?V5j$F
%6%i&<'sS55[PQL1P,`"-Q0!FRn'aETE:=#^j<#MCK=\98$o30o,"Q+Z"9HL`1-u,/`$=GR8JrCtqK6IV'OrIXB%7lKKWo#G,V2CD
%!0,V"l,RbWo3JjW!SoI9)0968SQdf1_]*6m%@ir[[_,..--jqbcX&Fg.Hds'#"XhAdgBe]<6Bdi&":JqpLHSH$n"_k_FL"\(`%f%
%HWGC_+o"FP-1QX5"C^T:P7D'k>/YB,aI&:2ZIO3AVI^+5@Z+?Y^`)l$=;b612U(fh1Buf-2UO"\d06VEk\%?R4IX\KU=dNmF9k]%
%Xe'7Fo%$.,&fj:j/=tS%g$G:se4K&iNVf1DY%e^r)kp);XKkK`f_4tegiojR$$-I!<:0m70dS#sNMa/$/=bHq<Is$Q,isf\0OS^5
%La^r40Or?[&Xo*AeekAo$_s@40.=[\kUgNlAors)?jI=!QVZhHaFA/)6J:LZ3j4q!%L,,M/1J0bo*9=mQ6S.cE^RHW`m#7%JWQet
%V&F]MP&VFQ/7;up7jKi1)u;ePCdZe?d2`J8'E"+Xs%I5,;U<iNm6Ct8.`:N`_*3I&1"MM?*\+=)E/FoXL0DHS&7spr`X0C7/]u!;
%E&n3f`f+(n/4r==$+hNS0iAJ)2F2^01ToqDQFe!7A4E=3KR=L>&@3$cC0/7PU'*o@U[iYEgIk^b0FVW%#*QotCeVbT4V_9&[cU1t
%EIno=nNJd=V,Us/D_NckJ><osF+`;2[;2Uf(onZ#p5$.20i<^`5uodF.nd*3"f!;X=*%bM9Rn+9nX68<ca322!;8![lpPB_L+`nS
%nj*3)MI:[l&5b_!SY[X+a/`_`L:A'sK9f/GCnqU>-#1M^;7)hcBhNNAk<>7+;G5%&IV4KU7TCgI4Ft2Qnf#?+OFD+=s3rQ<@(]0(
%SkG3E;hqXV!bZuR"Y969(tp:qHOZcE=:TVE^n3s)\:dnWI(/+LRZ*m]RQ*m?r1.MYJUdi<`IK5/lFK*sciaA8-MOUH6O92,VU.i_
%=N["2at[YHL(YG&mRM8EQ>FJ'Haqg*,\;sKCXIc7*3-a83RUr[:lD07%Q$@^YUg`"$8>I`SIn"S.H=2)Jb)ar%4.%C)lRh7]CD7$
%&l]%)f`"PMc-WQ4bgU_i"Aq.O4$WG@nrB+$J,tDojpN%4<LTf?c]`<L^?0fhnnC':K\[-&`\p#3X:mt4,?)Xo%d]<Y2drn-]@,E(
%,rY<&8.feHeA6*)/G[St$6k1Xg;SW`b3holr->$a+:RpNn;S!'dF%T^F)<Zf%O!W(@m6GIBj\e=V,TQ%Pn=.RA00(^V^\`9BIn[+
%17NI]KFlT2JeVKOA7?81e?BInAn/UL*rbnhgFTT:-6o!R@VlS3S2P&jJA``nV0#S^<GRQU<iAo+CtX7^a?bU4'&(_fVpdRq)tZIl
%W2#Y3@"V9kG9\?QfqD]H$9BJBjc2h&,j%3e>7TlV%Ra/*AnKTY<5W>0jW;@T<'=S&UXeDJR/NIbp9BF1KUZR>F'Aq$7'XRY5'aSh
%!n;[r,mbEE:X:"]U<sl]$Af%O8"%)'^h*ZfRgX'DV2Y&uL*8I*;4,.Ga@(0_r%ursS&h"qn/f2R\<4SJ3$6$P-J1^bQ;WEYj(ZS0
%!f>bP*FL0\B"OL'_3kV9%e'a<#*X2Q*p^P#CrK^IkZkob6:M^"js;GX\mWqGWY8aYBf:Cem/l,?gKL)G4YiH,Sl=noM=*=81ibKH
%o97fI"6siYE,(N1;S-R>"=TTmIb@;hL^QVPEm7"!MY"o)'>=#sB0J\O%ZtbpUCLq"fgL0h1-uF;6KCp59*Xs=iFg_Y;,%N]$3`\J
%@YNBnQ82+jKdOoZiR^UeM&:pIYA$TZ\>X40NpOL'WSp<Z0#l+r6i61G_b1Ed#e9VDG2rrcG5TFE/!6^2=+Jr)1ImTNcT";m:>Nd6
%@^_(a8X))nWIYp\j<(t@7)`TFGsN.K/o'+%V,1"hBlcBMkhJ-aS./J8_o<6"F`!g&6+]]/>RfX)YV6GZLoj63dEj6H]JM,j+g7DB
%LPu]n#_ME/,+@1q7Tn!E!It@0JE=ZM"(NCrm(T?3+?J88:j]"-S_^`#JW2OIBshA7Yn/E&@Ng7R+[)":4s2+$8(N\pHY/`"$3Ejk
%#,V8--@0hM>07\0%(e=$)cBo+K6`S9`-@Rme$Oap&'UDC;6s1a_ZbfLPf'RAdFJa3O&^Q>"cE0T'WrkR7NkqTq3/%0Kleooe4mu<
%T;[Z>7?149EU[1JaadcR(_5&$6*(><(p5inQK1Hd37+`ig:BFINer?ONTZ6.YHauI=WoAJUC%5lAXPRqZ<7/6E;Bl#5;jJmcdb*K
%&ASK'%&$M2"GDTbe8QU**op7!5]NfL?_AZa(2PW_Fe`3#B?fL<JS<s#nK-Y^TipD3RkX+V@'De(*GeM\J5`<uKd,]+)/MeTI9r"'
%!MeuPDa''.CBiP2]8>T6J^JVZDSOceZ4nNjM>BGEM+\,-]dc=p^!C$ECtoa-B3A@BO7F(b_ac/biDGn.o%!/2ZNO9_IZ7KmM3(%C
%,.QB[P;fl-TL-cI74p-B3@>M7!Y"3"`'KYrE7l`6.=aU&.<*n+JJbmlF*-@lEQ;2f-AUR3+erJpb+eur<i?/Cr%<t#PPYTA!N':X
%Cd$Cq2aTJb">1DT-@QUD1[c43n85lT6kdM;$I%RnM#p/R#_X0>`#rLW,hgRRemSqDj%<]GpR"X3T-MKbIh!i_+0lo<S3-r)&4ni\
%^+jiV/1[$X_mj^-R:?A@nRt>4#p?aSW+b:cnt,$Kib[&YL:EPpYk,Btf%1X\qdn1B_=)J7`L(5Tc@W;Z]_Y*2K\pAFFGY:Q_uVMl
%l'n>>RuB-:2!&J<&i`'4"jYKKV6+j$'V+riDjr1Q&&=qhM\_,qA::Y;]FHM%7C6l5'I(e#e1;;QVCgYj&;P-3,VV?L5QDQ:*1]po
%0Ot/uKh97ZkDASJ80@UJ_2tG!qK@b)ND$K#Z'AX3/FAHp-,rG[KLZiF`H7n6bDt=?@f7F#1!m)/D=.5TrP6ecKH3=,o9i+-,%6XM
%P\RN'[iFbt?jIZN=R'%9,f#-[-9s8ehNS:L0!6XDea+<L02`a%7`s/!(sL6:75a_B@s1'k,XL?)]2;$?4UdiJfl(%Ora1$@dVHse
%?"qRfkWd!RP6+LrmHJ3b%8,#_TRd*SJEdc9UIHFWTb7o9#q6Ssr:fU9>2.j2`]]8gO>eZ>5j'E79tu/4c0_bXCTk-'^pH.F#uLgs
%(I.a%XuJ,D)mj"0VI:c8%ianUqOW@t.Tl2bH^i"+M88&_hPm5EP-*psBE(h_^sa>rF#'6?ZdH+KD,HG8(:;\\/VS`"0Wk^'Uj?JN
%)Z67Z!7&bg>><4j&b6l:CAOm..XZJi?\>T0f_@+lS`ao`1/(-9D(`/qY/pJSTEmFBQh<X;IERqW9[II;(Ui(1Go:r:-(7FRZrl5D
%GB>OXWRW>pZ],a)B_R[8'?$.#V`hni_oT9G:!]":rn;6o*]_95P6g$Nn#B2c[NaYa2W;as@6<91*#7uUJ4*MY?u+^eLHA$Jo^Wf8
%&BF[X&bn-;hg=$7Zn09f'\\/.3&;MFQO]oNggSU0%(_=tdd9))T8J#l![ROM&>YMJ-2sI*ibpdG$ed)WQk&pmWe!(r;9-&KGJPs\
%Ag[O0[6#@U-t<tpksBH8:*Vsp$V)%G;lRs(8@8;IL$HYBR\_FcF.5e*-eEcn4Mjb;giremcd*-Cs)=Njhl-t,s'O)k4g3e-Jbjsj
%7JkbPI6a>(<Jn_%>s(8E0-,gZ6s6g5<,p4<-%q%$b`V)W?7,P2i3(S+IpOQAaJ-F5ms*N'5CFHR7m-6a]u[5jp'7m$eb)m<F-'\T
%E,7LjD82J\:lMbQMs5553EL@0h$7I.OXW&;m^sY/m]!s',g2nu!h)];j16jU1;Gd)mWP%*N5]MD*q-btm584bnGE)0r6&%23n;!g
%ekBO$:2s`U#`QXoJ9)#@Le03cgVgD1)"qN6P+&8,HeulYGe1Z'%3G.)@^'tia&Z+fiO[WP]+=`n?B99dD*@i1Dtn_NTtoKZlX$F;
%+hi_CI_[XKQh'os;jQ3T01I+D8(_nLR;f@#pEL&E$]2XiR?g8p1PPMZDq>RFosroIG+)`t__PPZGM_c])R!NCo?$b"%<MFGroL1$
%1]JV&:a](65K:a-@s(rc'3$Y9^f?Q[6*NOf%65K+Eoa81eTdq,RZ/VZkJZ^!$Sgh1Me_7MCqb##Pipkg2F@Ilf@.qeh]m*NR5r()
%(FqaH6RoGS:>5`1qR;UlV-`d^<U;*U4AbX7n/;Un@n3Q-,saF=omXkb*;3h[<T!qL7ot]Q/1"77EX/pcOasQ3?r%h/'DB\S`Mp^G
%%seBVhdJQnmLjLpd"k5sE-lk7>WF8iY,Itbr*E;/]ZAZ`maEtcdVF^D=p&eQqKRY10:`:j$1P!HWb,?m54@>obLBD@i6h<T,L9Xa
%i?44LR6eQ=m<H;)EJ@lsKl)78p[RET?6AjX9Ck'fTH4/.J00#0?+kd@NYdb%Z@eKn0?4I`C"!q7/Zg+*B$el!MpPOlk+s'Z1"D1u
%MI&hMD19l1(K:"(DQ0YXO)*fAj]W4fYFJs[*PJ9+1lp6Vgops!F[A%*\UeI]<A]8Ae9N$PK>P<X?E;9:'\PRI>Lb\_1kI"4(%hP9
%1W(hufkOjW+t==-lnQ&hj?X/:"mY.F$kkfQp!_P?P]\B3@'C/L)+>P&bVDIs4j?E8k;6YlE\K^X+@RDE@NT>qM/1K?DjMM$PQ+`s
%bX];J;(]8Y%jkM'E2FB8A0&jrPlP\YY]<?Qdc@(AA1QkRY%=Ndg>+[C=gE410UG&q49,mdBpgb5#0ZE8Cb$t"Ai.f%;%lE+Mco:c
%&Am?9*4/(RAiA<ih`-5@n!8Bpr3dnqW",$/1TdU-*J:l6QgImAjEK*Figu=U4u;&0:-&/d'TmahH)WX_R7<p%$d77uX(2o'[tut"
%p5=G<->`@X!5e9:!?pkHD8=GA$'qKOK,j-t_uK?dAtjRpp\G?A!-/pk)lT%1h)%s-\484sHT;SfbO:4aBXH?/dD9P.4"lrj$9-Pl
%DGeOOZS)EJ%QIRiJEtVn*SE>XKLD0op=#r0HGoE(f8I:jiO]bKH`h]$UXfPk1+qHk[G>-!kqbf=D"f)U`[g74mrsI4f5obXR-qtT
%gN?fPOr"/HBmMKPVt#)GFgp+04F,o#BF&Yg_\L&h&"+Dl.ghrVm;15h.@d7O,C^W8d,Vdl)5,c>i/2#873Bj(]8YS/fOJ:Dm'>G;
%IMo>e47BW7i:GRuKfOC=A;9quB"E`t5dKP-o0$'_D"j&o`[gaBmrq2Kf2LKm)0f7E.B`!RNf5]se*D1Tl/b_mj7Rf_m;DC_jH[J@
%$bu]M]I,\T*N@n7jf576B2R/b$-o%-2Y`X/9Q21T5<@Vp=+V*E=5K2V^*bmo%;bo)^BoS#D>QK0.>BFn&22J$T[To/4g+E([]PU6
%:N$TZ-AUnUH4u1?iJ*IN]fAK<U0g.VRlB+#]hd[Vi<63(\1b==k'b$`.8C.#*;X"YMTgR1>DeUSkGg/QH]""^HrX=P'^%(TnTrAt
%dKL)naib)?er562AN4h+Is,B_`J^FjmMSbJ(n+C-Ol>@Ii;(#4c0O'U`JWPsR,9*nA]UZ//sP@VERH\o4&5BUCD#3-1W^oN[RmlT
%RlBP[K'f2oKZ^7DBD+-dT3u43'R4!LbGIL:UMsB0]!UK^2E)Rl:#G:m*RD5I5)[mIhiH4:rI.b3rqbWPQYjS<bE.'k?+R-l28QAk
%<cBOFFk?VbDPXBG#^'(2VJ'P&D3oK6,5+u$ae(MC)(kS(m9H$>8Mk6!Z&-1k<M4C4'X,7)YF%:fM,!3L$]>bg/#"h[s*tFdm7!rK
%!FM)5.h>E='FlP^<MpQ"-$m*IP:6G^d>Nkb*qigorU)>q9([)g1e%#fV4;=jo8Q+pQ-$XBT.SCrnfcW1.S_pR';k8q"Q%6L?*Z?m
%2)u>#LQo5gF$jES(J_G=CW!2?a\Os`h5i(1*hHt^(K%!_+O)E@8.lesA.Hp!BQ:`Y$VUbohVQ</r.&j]DFth=Qjd)kC4IsTQjahN
%?o#E*19a>3idt^V)qEtB^-ONakqQ)hhc?;AW`sXhWSH[PX6K1jG.R.]VP0-RlceW;WPUQuQ!A3=fli]oqrtFD&Y)gE;mmuBL3\:a
%Z\J5B%3B2VRPF\AN&OJPKeS'I1BsPT,?NlG,>rfKi>.]leHRGS^okhe9cMSF2Q=7sQun7p(9IB"SH-2+^];nYl>H$,;R58JX&<`=
%_+4<M%?`-DIB\KiU!/DOmXkYI_(;d+0?<i@pr+]J:CqrU=C_)S>\7Pc:U=nIGl>iu\;kBf'D@c'KZND@(&SX7J:?''95NWH2q1PK
%5,N*6/Y;PkNFKm.M&2",5;\WlK3#XaV-fk8G6F/90.748fk_X)S#b#SdjQe)%VCh[@EYfr")rFdC_qP)[b\HYO7DB63Qp4up%kKo
%EobQel/aW!nje2':\gkO%K.ha%<ascHtb,h899jb((1EbEGsZkTo&F<ZtTNm)Yi[n9CYT=)8+eqZ<a'jc%otiqTEb86t8Q6P1sn.
%S,W>5b4Ed1bFEd(p!t5"UEK0cJ,8e5s73A.:QG7)*c0UCO^8"b?/i7\o((K,G<OZ%PN"_YGV6r3V-CZqdN,sL-IVKY5LV_!fAFYl
%rpmHinbDq7s/1ACe)12sJ%`Vo04+CFs6YksrjU4V]L8Nu?i<YRqY/.o?Ac9fktZdrL1ri#%-t(C.ZB,d85f#$qp7'n@[A2a;lF\S
%?/eV[[i3AD0FrHi)pALqRD@C.+U_MY/!-[r5-J.Gb^GFk[?m-g'Ch2[_'A5LKiU)Q@fTa2Fm]9)Dea?FYm0^S%%^g+aN1DXq361q
%q9`=uFG("5$O;:6lEtC-f'+p7qrZ+:AF>A3+T%'?qg<)WP%Q/ur1"'lVdOXF(p5lEqPR>?>0gDDjbf-8P7@`jVrV#p&.$Z'<\H"4
%K@j3b:_Wu]!WaHPc,Y<ukU.HD?f[$:7YV7a7+e[r!X]'[R<FQ6GTf=j<G(2Xg528odmnnIqa!QqN)&`1BntV5L+27=8P<[Z@72Pc
%R,HAf>ec&Ef)$;Q%*Xo'Jtst^KXGFPVaSBE$fTZbX?I`U?iInq'ro!KA";-gP&UY>T$c5:N7X-mc>!8'ZhPa5jp0.;<FoLp6IOGp
%gYg"P9XT(c16KeYQY,AJ;[e'P'!8*S>MgN;fc7f&VBYg!1,"g5@@EJQ%a[UfCT/EcUg0AP#tbRJo&4YLPDd46Gl`lcg4QthRI0_A
%:WDl%>;jIW@_duWI>X<jcDZ7A0!jc9MQ1!e]D1J?e)d.UN!+Z'<*ctc!bf6*5#9p*bY@7FY=n,N1nNmCj(5h#nmsqUn@IHK,-TmL
%--4=>#hc"GO)7taLOI3#m8_[hW^dii0$!nIeS:Dgml<STpF>W.?i#dA,E8EaBcJ9T'm#tHKRi:b8]sh-'U%cFbPAk)-"R7^_#9Rc
%m64(=;+t";Jj"#X;4rFMp[8bRB>`$8]Ipm(kITd<n,;_2HRopYs0XI),Te8GW=/Nu>J>2&C%uV2ao?i,nui%.Cn0sqd;:BbkO!#)
%L)_Nc(?_f<GGi2YBt*uF]Sn]^P4kpZ-WS[oE`F`]=2nAf]IrRtdb`Rr0@Oc8hMbH^5PNnuX1%CKfAs4t_S>Ahf;7(,Xuh+3c3o$i
%QMXs-d]^A%fUMEdS-fZ;_M+S.Qm%7XZeZ*^8p"6A=&P!$g?H3-A\/0?Aj!Q"gC;I\m/#uDAp6DuFlE!Cf*srokI9.1Ib+]U;S'BS
%-[pGW>goq`(>J8@p)8kdoIe#IQBrE9a!?&sFh?+EqZo,jbf/mckD[*'p-,shkIW@Z^"U'RkAM;<4#0-@gMfdW\Hhqu1^Fi1+Nh/"
%'IIg/r'>pjW?a>G+P`ie53^!lemN,(KM!,&^fF#Xr\kM;q0#*,:1MK8<@,2i"VS0F_iD7!N#eZ]!2rCnXZlRbkrQ\JBRg9OZ,IZm
%_r^ParZ!0Z5QCQ\hi/PVTRm?EAZ)-fE%2FYbsX#!-?X67!Y>-k0!#XCd:>[?"sFppmR`<NWPlskoV(jEQSB#5]ft@@g'!#ag_[0P
%I%sJZMIC,9aLd6jS#h@jdQ=oo4K&FQd@a&QmiC-'MNILtLTU#uN"A$A(7/pXNFl#WhuZ"==jQg;OM%\4g@rd#$i/g9<8+F)\jXLF
%KGIo##.TGqUXYb8+XaW.qNRJ@UZ`@nH+Rk?*tK\%DSV[/#,i[18&QnFcPc<i&q]2E%OaeX4lCBI/)pkg^[ToC.k<M7V#bZN&Fbl(
%>$N>gPQufZ'06Quo,l$WW#HRS@*=5;IcW5;<.AU>LEf29:0EC+9R_lok5ZXOQn7I49PS`cWp[<gLJ'7^_r3'<J"n"%U(!E8g\]e0
%Q$uob+K#ro::3EGN>t\I_29AeFP6M<'\_n<"pgmL=O!b/B#%o3YHnV)&_cW(/S1Xd/\,8b^o6On<h/AD"E1#B:%gu_P+S?Tbl9WQ
%S*KWmolm-&Xm`eXUW-G*AdJM-:sht-9<(S@PP%4u=<AYg#_>Q@g'mbV`A.QGd-<46-=(nUZ"r'k+SJXEXP>;3#MN/9W-]!7<YheW
%l&r'n7+Vb%X0l:nUGt\P7o>.QrL@hc!)/N"e#W4kj0eToOK5+3l-^YNMZI,:3KAFHgiUW5d]5aD:U-1&d$(8Y`r*R9X^/_Y;OHIm
%q\1F96pufhT#;+L"lQ.&S=JBmIPX87<.j0(Z9l=+D"E\J>8[gb%8L6Mdd&i:j)spYYlgq@f;jd2>XRBi9!W/=kq&-Z\D'7RbYU[;
%RIQ!,j2_ocJBU8Wm:3,`5VLSG<9OGA;C(qXK$ra4gb:L+H)tUbO\7?iS4PJ=fL$JE=ANg.8@U(1K3<\qbR*D7:,.2;D<630"1B,^
%@KpU&<91/j;-*/-Aka<GoiPKPP1=P9XG*0e;2/??816h7b=B%US3(NtdYpM"Oa$NN,QC2QX`'gZh[<kQ,"9hT'#^!7,lmp#p_*)?
%;XFL_h+WEc]$cD'1,sf!qP#LYA`k\2.e3*rZC(m9#:Sg%>.'!$^e+p,j">L%kV7!?^5!&J!7UA7k7ep__OG<o6"XtUrR(o(6UZf&
%YB@7)beSIBa1SoGl&OH\S$3%PQ;iKkHU9Q!ON]D6[1dAWBncYNK%Hp`_tPT"rO2oRM/mS(Q@BLlo>`OtZnB=*H8l/>f*DSZj[%^1
%lBoE\FPFk^koRu[>r(Uh6]_W](gMeD)NKeD*Es3b:UY$l"6:_""@HY"NWX83^2(!)r"(AJV*'!NL,TkDP-SZA3.R4)3:t$4+%Ago
%o'[(lp^Cah&k"O/@[AE?>D,hm:(\@8Q=sX,:C)FgoFD0tDe`*n4e?S]EqiZO<[e9`9li(6BiA6[qT(HLih1=[#*<4f<po7h[)(Xh
%F9u:>A"g&EEVd%p_qO#4g9)9j7YAt30q"Lb&.I9/4j$C#T'L0)i&ipVDpT/DbEW.KYD64S+&N./C+Tf#?Em6HdfLfl<54MW?k)%+
%U4i`.%0"lUVm$-Zq,i&iqYMA[mGKqILcf-,Z8kMlnAfKtgud8RK:Jr<_eH=#%(oLYS;44:<i;us.Z1pDWs*@6p.KSA/m^3BYU#AS
%S(jpR]\u\J#5[=$f`4GieUSKuW.l5;`doIrc4".0Yc2$r(8)+jh/(*e?Bi%"kc0Q0FB`S+E36^,QQP+feXZb`eYQIpi%:RpMK#r?
%o\r[DC=Ku+]"_sr]$."CcIJ/a]L.U<6hd=$I3gm)5WTUWL1.>(%lZ;b+X[g62CY<p,tfLgV6-Q14.9(mNn=b/@eL;qX]EZ4gK<Z:
%rakMpFIg%L8=[/YVQ+C9]1:Mp>VTS,$R**E]#dHQ(0d`oa/E.rAlW$,]_N?KR%WfUf<9(m>7+ltc0'BNpA/eTCPHu<=ZCq6QuflH
%[=rkV:N;/P1ar-G`dk$O>#TF=/F!_`j2;S3RYj,gD_)#:RBo!iPj3rpk;`0EV;Mj6a0FD8h[$?)&uo%a3"(<IP[0N.T@o*j:0>GK
%6>%U9/W`0qF1OgdS%R6E_!`OaR>kTbPg)a#FqcC"3>mXg[P"E88D$FCa[Xg8"EgLrZ;WAIolUo1p5bhp<*RW64kF@Xk\/doGp4P'
%gMo1@CQ)LY?,N6bK`:=Zrd8Ro,pSC#he[)bF8(At4SN)b:AT<>-54OI(3M51VFT@^h3/Hr(_V0@@ZnX*IL6WDLQ/foZNX%>fHOaZ
%\[8A$hb9(R&_;pF[u8Y3RI?Ze,HJd`/ZdVlMJ>i9-86UD[;<C(giC:62B9aN!`N$$-3`>jDDMlel'+.H[V34qdItj'1>9m9#S862
%BNi9sjWspH!#drk%-HcD4b2a,=10/@*(_B2cUf"?.^n>R#!Eg`K"d5cMUURG7#`A2MUUk\PshVL5ibUHop-TjNPg&rJCEZ'00Y+5
%U"&ZJ'm9no*)"T0&kL0j%aO)D&\7"YJBnS7NIHN5XWSmQ>i-(^S-h<$8gI?P*N6`PmZ6`PmN-;b_U-c<7(Pp[;i`mC4L&iVHM0H<
%@Sd)PWqCb9;.rQ%pMh/]dt1iF%-H/UOW'q@"e/\)[cXmP-QShEE#BKaS%`hES(Xq]8PQrknkQb<A>kDH3?9b(g.r<_Q6,\UhA^W0
%_Q0Ah_M#S"Sb@qgp.aU5jY3m!PugYVg4d6V]pg:[a23c]$Fa4B,YS_]&#dr<m"9+;h?UTACcUJqahhfIJ6:KS^.7+99St8lL\NUu
%iCcP^9i>^%]L3>f2HB_(VMR_)+]p#9M*$$NN_/*9`=oG'<Zd*1`,C[Im)]/iU9W<`*+#be=9@bBNNrlN:j]7nRP6`GZ!ACL,Gl'r
%`J\+,@BH-L."8nlVOfHo3pmWqdihJ8+6-c?Q[R'H5K4pFQoJo$gh'UnL:@T_oN`>=>mc.hjqj<T;(nUdPp^*#D$YWophlFkU8IXM
%,6P_L3X&t)PLQ1U!+$+_aW.C7]Of<1-*aj0NaX^?O7Ct>ooj[20h5-8g4)V5;ic+KM<o%3Ieb-b=t(gjg/ok[-0$p^\*!=\PO=EP
%QeVbV$dX5`ZL/';6ps#gCntIU-VN_Y@rpIdc`NZ<L-s?kf"FU@GV#jrD7N4^gt;Nl`3-eTcD_eK7cnRBPf?4UJdR\'X]sJ_FV][S
%'ks*3cOVg74FPMT-5S.ORs*KF4KVaY45e`"P\b-1?H8;^#Ln`PVX*=7(T&fEU9M#nkK_m!')p##q*iR4'f3;c)]8I5n4a$%"-I_$
%mid6al3W6t,GL)Uht+,;2c9Am6[X9*c?CY5;-h\'K<jRjQ(qKBGR:WglU'qFDd_Hn(?t7Q58F.0c3J&"T4@q"3`b[CS-:q"ct^q(
%QE@6R>4#"ZL-Y4\g.I9j>tVVT8eVIVO(a&1Ml+lFrq":1k]7khd8aV"rC1-6G"=L>&_2=@K'NC+gM!T_n*>c1X!Gt;PWBBDn8Srq
%R%+0T]2$<c+3-8t7bP5k@`qFk8YVWK/ea1XZ\[\U`U(@oTZ/\gs4t>O_`GLUaoKJ[V)l,g"#RjiZBK(`V]3K'rbIm><3$aDIH!kd
%G9NT0s4t?]Z5k$jM0Q^oW6i_hFbIi5?j$BO9o!FC/?;(L*i-7\lMEa[]]:_>iJ#/6EB%;2#YCb--0Xt]K_-RUi+G$1q)[(3`oW?^
%DA#/aj$@$8,S#opWHN75Nhlpp';YU(@\9>H@Iscq_t>+"2f[Rr>bFlc;/S)'ZPh%?UsgA_3np>bQFpSH[YY%QH6<+4/*eRtjl\;s
%[Pao=^@4Ape4kWhHHBW#7.p%//h':t.o/&QW%V3n_XF)JkL,"N8ZHmAV0B9%Qel;fQ6,"=fCHKE@/)b;bg2Us@$:Uqe@"q;mZUs.
%4Ta9@\'LB^k"HHZD<ZmLLuRsJV>#;'hKJ:7:J)e65>JWQ6p2a6Hg%V*>()``#o%E$$.pV&+1'6jRPR&ZAONh5Lm3N:>]W/]II=qt
%CSG]X=a+,g.JANt@ORoY"J5ljU+R`j%K*+&`WUShfUD2PZB@2lRf^&5G(-_'Dq0Sh4Cis4T)Xi:\"R''C30#.po>O_+ec]76BB8r
%Kt(P)3ru7>8F(PI\kbbTg)[>AAWf>OC82fC"QZmX.3.U',/WEI"[u![AX)VYQU_q]1b%H1;@k_NmS[$.ZW9;_r65bd^,`O&!pUQ4
%_9ZHZ.j$(T`R;N;=1R%+^)%@Bf\9OOj0KE#Oi$&ES7#g"n5ahEW$,X!,OL&L(aiJnKpH"k-!=N:>.6j-Phm"=It!44&bbVR+i^f*
%l<JrjO^=ZP4\rlfD-\@XL9;r0Pi0Zu*FeS^O#d%,&:8!eo^qh6FBsV#fNL?H9:]]9EjuosTiDi-LMq;<NE9,YC2N)2`QAh6,o[*M
%?BSUmEU?aD&98tH5<MMUCd>J^IE6ITWIh.'@]:pcTB4uOFC&'$7`=Uk>'r*J7<"VX\mp6Ck=/^3E5JQB+20]b+Ue6;AG-YtOt!M>
%2Ll6b6SEd')fh;=j>9Gsm1LF=`_L%[gj5i"R8hF8?$">ZNY;0E6:9j%H"Y5/-7R8A^PS?E.IR[V-oWLiPgActgF0bBq-o1-o#0V>
%6qZF1j$uLtKtsEjDSEW==ApIbBJeI'L2IA)BE\*&p8R6](6=uK*Z-:S2bTH=m$bkg!@4b#LtKr!<N*Ce8B$Sk:u^R^4t=6#>5s(S
%QWbK"+.Heg+"F\cOOPVe75d\Fr,1R3k]iF7-fePM;85b;.@K9C;97T?4,>$3.6o/*"ugPS&[%[nDS$0JH!sNX;CRnD#>20RB>AQj
%3C/6-1-<?^Y(b)oP!qdblu4,6E>LDQl=KO,Hj:+;ScBB<g,0O`WfRjKO`Wp]@6>#&NFJV6pO%Y=l*Z2'@i';f`iNEq`$n.,j==Gp
%U"P9*cT@(k_`3'S^R.?4NNM9mD2aP)]q(aE^CPf!d&VLt:JfV4ZUUYFU$JaX&;Mk6)M>%/:k)Hq<^n8+oEl8Q4iX&`:^k4L`*]WN
%R7I"-3=2('"3MM58#q^uHBRq$WKBfG"^00pT_b\k@$l(219eQ%f_$ulRM]\9J4fWcG[DhD\a)U*XkR?nG%%:*_%,X*b>4jS?9H5[
%s0+UK.;rmACA"%\Z+OVkYhf>dDHlgP1K8)W]VA4R<&JWAf$M;$[6sZ!Kd*nh\-XQX6>?>,RjJDC>NWAc[\654HY<1BP?cIJ+cpB4
%pqqB6D=@A`Jm(B8dbN+)Z7QYQ8Wj+b4?)@WoSmo?Vu#E5X\p!7)Rhe$)]QDB_#5>.6ka+"/n/&[EG1rk@u_WJ07=8&E/mhcD)8=X
%ghZ=MiK\H.6WM4f+aICVN3#Q=eOa()8TlrfF%TS3gR`);Z]-G+g3-]f0PO*%R2[u&G?O8dqf0_hpGM;;)W&AYqC(I]e'mr)`2[$/
%$h5mH?MMAPaIHpj[IU7AF6s==Z:*^/d<K.o\$mi4p"f,4*7M'2;!3AdS/HZh94j*Hj$F:$]>JPK<XD6W$/(4QfL-HV#;MJq.`7-f
%CQ_S8fqYihM.(6/:mVm/%3+\r6t?51_I.uT,r_nXJ>Y(!7=aABK>g!$`P2\98"4**g5i8+.(K27W"19C]YM+9:[nW(o.I4V#O*q6
%YMX+Ce4rJNApF,L6R</g?)9LUoF\fn]k2j;hSu`oAA=($NYM`#7_,!L#Stpa7astJ\]<>Cqo%&jW.%;1r,BoDJP!l`>NqRjg]n.q
%N\H<c0I)VOAE)Ne->a6%bMDZt8r(5M[*5LcJL#$mE.Aq16h)Zs"-np&[9jR^<c_ma8G$(FI1=D;<E)NDOS#rO:K).]:pJ</=,<%0
%WPo+7c&WaqLhu)Ja@=)t)cdY*&Bo"J/=3JVnfuRqQW@SFio?Mf)d:L^2OIU-Ci3SAFDUWWc?*ZOE5bPOQq9Mc5-4fr!\\>s%6g-X
%8]h,IW1fBPCIclBT7+;[`=)^+*$EnLOMo[^rGcE2KK8N(j75Ut7D:T3NT2]5`PSr9Ctp\jN)C3R1aVpt>#U/W/Rh`TbR%/jZlY4b
%["^4GHJ]riGJleZYt1T&NuL_cbkeoYkkKT!*a]lEA"ht%)W8*Ym[TGennpZun!;[o?g`]79G:T)\!T1c`ak]_#+2UADWLGB:hMg.
%RTCk%@.fV=om]gI.kRGARRGVmij4D"eVEgrd=i6=8oHGj!0F/sZ1NJs!Yn<&RaPWQ/Pe_^pY]V02@OL2c2E'UWJ8one[fJkS9qq$
%%tPk.)_@aFJLEnQ+',pTqF:)^*:Hs7gA&/n;W$SaAA#6G,+k(@1^J*)[D>$?64Onl`@9ZCh"fJ/j'4dDg/rJP&?t:Y.!?Dk"khnB
%h!rt%j\6?r\garZYMT%)$`TljpC016^K5tL_&el"ciRtK=^)Z#DTWFhS^LBq)4liT@3YP5^o?V/!f*E&eVF*Pjmn.W08UGZc#:]f
%.'Y!h?,[0#EUB$Q_!*XS+VM.N;F"5G@&lHk4%PuWK+P5OlU3<Dfh.D,We\r_XMJO8D_<opA1To4ee7bdC\>kFn_tk6mO_W89[AXX
%"s0uI2MG$TOgd>@&'\03!#"eb>g'lSA#1a>1%l,gjDkNs*t+sb8<,6dFV"RfXCNV/!YUU^U8IR@81AnZrmVOP7)LjhOP!n1Gm"&I
%\g=/*XH/<T12tsGadHob(l5E);Zs.JI*Jg1J`eaYQ.R%T"Y+EDKimY)P:/$h(pQpe0<;\'fiJ<U!?Ir:NmQ6i+/f"PW8o=)ngg23
%V2Fb:OSNfbPA>-fe1E=u"8;HKZ6/8P^2W'\5#18^o"n;YfBPpgX"eL/AUh(;'I,@LVNO/knm.iq>k.._SFYV+?R#N\NSFB`pCkR&
%emp7>eEgg$X6/UUo$Ri>EdCk6EgpYXp2EFX2l:hseBG@>jk\B_pt?%<O$IR]2TPf97lU$6+S*nWO3"I<^>4lhY_hkY-uM1+NPe=1
%VZ49Cc!.aa79-?Tng([eL3M1<fd]g2,ur#3pVPg$M*k00i*hZPXTS8dTk!-Pph>$I9g[;#%39ZI_c`U7;(gdkmW-68"?NF_M%+'e
%J1cq-9uG3h#,sh6j>ZaQmpl<'?D11JM;G_CVS;gN^it!:dD/,oB`!ua]nE?Cn0s>I3/f!9`,`qk[9?O\gT!]gp$p20'mdKl6H]+%
%;J_D9loT1Hnlq?-MBWWX8VN3eN7mj/qANqCG7d%JAa<jLA*+Ti]0X8\6l4K1WWuk`#uql8!(AGp@*_u2<K29=Qn1UU+i#tC"XXnD
%W97PUJmu*0LEUW"@]O?E-4iY6A.Om^:>LLO"-0(04_[`b2dk2cMr%HFdXHOZ5HahJ:p&D1+=YWrDOCEC0!%X$j%:=ccL]P^>o;^5
%*48uK0kS=ImE=W'`tf_/oGeue26T3n79A!X6=f9RWq<`W;k?-m['Y2db1BS]0keDHf"qZ*CdnKr:mQM'F=M]M>M>,I/cFt3MZ<1(
%&2)CPK^CdJP8!o0I7N*BLI?D]n*hdT^'POM<`b%Qe(&o9/o.\Ab.a)2PC:$^F1A<$W)Z<e.jDGr"Y;Tf80opt7<ar+_R:d+.N0eC
%%^I:[H<9uSoC%!CX6c6^UX=hT4-68(F%-8,Oo(U>'mEj,8P\)23b-]Veg&Q3V!g_*C?f?3:ji2Fm%SN_rRb6FCgGon[*`^N@8siX
%`fX^ce!'%3J]!Y6l8q57"L^]!.ocC#%#JQ>kQ"9d/f2Vdi[B*pEV.O(RVL12'3PP/fm!=&lKgIrqHjq:parXG=#X1Ne2\E1m564d
%[:4"q8Y/Ksiio,7))[0rPlfj;>qW,W2'HW=IJ.^4EC(PP@Vs1-^.g>e&c4+D&P.IE*Q2ZrjLq("Pdj2aD5T9JI;`2;99*NDj6>JJ
%?!BW[^jVtP@["lQGD??=G@QMhH(1/p4fW)^dOH)i1fg,^(gRtl,$jO6+TY!V^iGVG43po29?V[cm`loT.]'$]/S+e/^D9V,kSW6u
%MKJO`\o7bI,[nt="Xi-7i9X,TLD+i^`@I5]n_2e=GTl]%`Cr]>*lLJ+<I)bN)Sj%ObMH"+^TWSCL^;)@1.l$f,KH?N'<q(C!%Q.f
%D*!_'7%0@7bX$WAWZ'@.as+EA`0rLME(n;X^">#4C"(GkJ4MaE)=4sCYohQmVccL'2J^qqflAj6eo%9)ksR4t;h[T7KZurMW`73<
%*K&Q;MMF9P%#^*j*S7fGC*Pr*K!EUE*6ob;&5CO!gDL,UgKQQprPrW?>Se2b6N@+m343u6\o%-k^"gLi6/t)s9[ls0Z'"%\_1kD&
%!,-T',eK[GMgDGV;71Ub67%.ta\p+"8slE1>"3*;aQ1XMTOiB0-H)f`e:TD\]4iZS*U$hua).C(.;HJ=DM>O[fGleZG^`hQLT1^F
%iVWfjP9+0Kr9d85SeKKYaCnQ(c`%Tqb@U9Z5[Q%obrnD)j,6464$]=S/i(dF3)'!C?I:s`72`nAWPujbId11Z6X$B4Fpr$`)&m/$
%iXXdZ4aJknl/P/FD=B:GqlV`V\W(Qh&MLh&n'KS'Psl\@edE9l"c'?%4<JhV$)VdrMt#[699!"_*4NU61mSEH[A,63Z*C-g_`5uD
%>V28XPs&AqN89)s>;`NRI/$<LL^o;c9bN<8$pR)`,jF,9WBlKPcnb=Qe1PP^'GRlY"'II@@!8D'M]BOE#CZH!rF)6tIHL<p]2K=:
%Q"Bfe/!CdI'hg:AqY4qY/(C%m163Lbd()+(4L\E)npr$Z&j7>*O?+H\ZubYA;B#'If!k8PUo8@(0aQWld."/-S.\UE*BTr![:r?f
%G'SnLSuh9/bMm"XcZ69c\eB*tp<W"=p@O%<iQG!<#-$MSWsGdN??O_mNm,CPhH*2BYa6Ed24G*q&;,6dqZhE:+ZdBq`S/-4\j]M\
%emg3uD]XRQF.#H(fA(WB,^K>&?]!7HD/`f:VZ5fN]8fSh:789(/c'LK6P9GtOT[D(H>nfn\?7"8#H#=.Il-TY$j()+@J^%hH>sF@
%=32'gD:79hGfkQU<>d\[p,J<5T&&KO>.bBhS7r`Wa@2@,#_K)LENCk0P*N1QRmEj4l5J.[7iHA.$`=Jd;seutX`M/6W!G_irp!=p
%D.)+>Lftn/@R72c_F6Ih>'^t->d.=Mkn&,Ng8J-7]"1M,>8e\Z#FRa8=eCZNRfYbo,RjdiEkU+$`!/9/br&J[Q#UbP?rKcW/*qi7
%e(R+'c<%clVgjm7%UJrAh`uF:igGsc%^n$-7%);CW`q!fC/J>Q:2X+*^@l7EM`Ph_I0W?cB-aI'g6_lhS)[;iKQ)Ha4s/J&;<,Yg
%YlNb-JK"6AO,Z2;&f1UF$%V3fRcVFk2X,LkWh5lDgqOp`^U*#s0!3smeC=o>eh/%;<L/SbHbM&F5h-H*UXt9JP__SckTka,`6*j1
%DH\f^qb_>>N&-OsH96Il2P4dKRtm[/iB;BPTT=ZW<XjT'JBulj)IM^1RT#m.0T4<mQ>&QMV$2.t#b?`fARBD..bN(3]e9q$Z&iHM
%THP\.XiH#WG&7iNdM*,80p6!fj809hLmfF?,oJ!4=:e*sZ&ERd!1;0SWofUqZQbu3Sudj)kU*oucl-WWH)923<V10<7Gm$jIYjZK
%@g1CrQ'O-l;60/$RScpL3B`eo7.$+@,d/mQ8CnYg>5IlWVIj<W:A2Am1ge?MjMO22^H.MM:juI$5ceG**AK'aMN4ZaRQmn[%X=#X
%nW%'2/cs*]2NV!t:qkfF3ZIl7c%4BT8(%$l]<f@6mVHY@a(Dh;;+U%`aofpr@O05sb/`SYLtPSQWUt/nQnp^P;b4j\['IrjL7FG.
%5o0<qVW(Q=6\/Qs\(ULngZRVeVQ$';A+sZn)ISiDcR7)6a4AG\$jlW44#aJ,AbH,-Qb9O$]?PInn$&N5@u"'Mg`(PGHE/dD6MdoV
%B4/dV2L@-=M>'ldcQNT?s1Tg(m:]1'<KE$cI>9$S&6B,c08[&=o53h%9VL*ufUo@t2jLaV^\jRQ)k;t+^GR*KO-G?s4]!3>h"t7f
%9o]#1,S]"@)MrMM]]H\;.u8#YLoNe<*c%QRh3EYlY'%,@3-I!UKG!.n-D#qITM73"WYhTJ)rTTf;ooV'%6Hn$2anE/j=lObY>AB`
%8@_1jf%/D@9SIc7EHq&kD[sd54(ombRbBS$2#64@H=n1Q4JdYoqat2>l=B-/5G/\"H#OEG-%T#_Z9$:T*WXh>oi,i`!h;0$9J%=D
%Wh,(0L]QfK<>jVeU(b(6PE5J]X=Xum3DrD;#X2-kg%mb<[ua@L4X)i19QA;o@oekR-u@9&"3\3N*da^L@"<)!`+WM9149nsN[_S1
%qE.:AR[KA:*+M#84nV?Bk4?S=,$3lH,4coY;,sA?V]J&L,EBT:7SaTj&cjf)=\h3G[-$sV3jTP;Dj*75@lk%/.BS:p9o<;,Wc1@t
%1n0ash0%_ud<V]PqM/XK,/!:7-gI7TI8cP(H-nP<U(_W0Ed8!T3a/&8bc8IrKF<+TNf!<W5PXP'o,&SC7-s'D8]FI=rhP+dL])j<
%CPjU5hS_SRJhbFXK5P/"cGcgP^dsFL1X&k3SZ[1-e@E'rpj-YemIpC',$.a_;DpL64/7j"Ba9T)Gj'G=0t3&dJ<`nPkJ9[eahV4r
%akU)t-6&M+]uU&Ve=A_M\Z>-.R]N)Lq@["blmCrhO^DC6b&0)DDih9g-qN4hD7M?gUKH/D1e=/ojl`)p-,^\U&T,SYqtdG0f',cb
%o2g-^rl1H9eTp8/_=#CJ3/dM(Q\CldFSY6(qr&>tmG)?/fh.;Oe"]6))N#(qLq\0f!\t?7TT!np<V>%lMWBf-f+7a9&,;WLn2Jk?
%Gl?>j2b?Y>NG,Ic"G/Md<?C^c\4B'm&)%>oIp.EE&;:i%SKd-'cWO7?"B7=l;K-K/W!;a$?S-\b<\`U&mVX^A9[FYK?V:#=c^1+P
%Q7Ck(eY3ne)'W$'oT7?8:81R3a=$DsMsT![ILXYXKCl4Z!\4pQ#%<m-ecqGu8LaL1bs,rpea+H)?Z8%uDgQ?Em5Gr$5n-#\?u&]u
%PhpgJjNYj/#Q!%/</q3V=AX4G&e?'cm'%GB>Crcsc_/^>4+q'I4pHKTnXA6[rc,VVf/WosIGLHLK17()QPcjh:P[ng#J.uB2stt_
%DoKpHXeDqi@,I$TRT9H?fJ\kaYN`-+?-t=/XVDD*\0/`*UJU+3ZD+d.o>,1V4]Z4FNrb`/SB<m0.s3d.+=T,1jWH\@I.@0C7f6K_
%mC.KIk/rk%Mf'V:2RN2;lN?2;'>,B=09.g:$,tEoKlMp47_kC;/lA?Y3*lMcQi.bn;cW^4a78Z]JI3k>$7QYa3Oo20Lp8pVp<^_`
%Ekh7a965Z%-CstE^6ra#Q+]R%fP1(]c^W)=oSJVoA3hNL71DX%i\O$`XrOYK3kF`4GPI(H-2(l&hDAVigYh28qtbY_G[s=Vfq$im
%8[[&nZTD0pX7*H`AM1_OW\DMV'nDh'%`'AcpusRr^6I#^<B=[N`Cpjg\e="2qm^[`#+%!Lm[D+mZ/9Ib^78^!r^/X!H77VBAtS"S
%(W"+&VrFZK5Ys@JcJN!Q1?tk?NEX>_hefC-ksYCjh[rU!b9RFYUu'8J83d:*G:^?-\.=q^bA&YW]]1I4R;@ceM('po6lho"`I;&j
%Q^I!-iYT*"K$894*;-#M!%`Gp`?,+sA<Csa$LJaL.`go+GR-)P#'Zt0MD?1U:'om,JbcZ.(6D5NQrDDLi@]4619XPf5HLKX<?<VE
%n`HGg.+Suk;:2i05q$p\-[T4FmgP4U[0%7&j7&3qX<+(b4CWJ6<@\4lmpdAEI:&P$i#h6m%a_=4Djsl']M;lpT?7f1W%R7pcTjVn
%a#qXb+5nCATpW)'3E3qG$!\,S:h>.j2EQ]a0&XH:>Ush>9a*,kVt9/b6ej;AgMc%-QFGX;gs"WQ*+jje&2aj+d+#&)@`#M8ioWtG
%Je@(q[5F%fBPK<67K,Ujmt$9>g-!qua?`pT>&J'eUNS@5,p39MM$t;u!&6pmWd;lI"P/+^M#ua6X0=\)[>8+*ClYe8/0Dl@fTf__
%_^VG+Z7gS_c;mtX%&^)6DQIModZ@@2fi4(;>&aC&3=r]CQXm\D&F<8o&U/;.#ULZ[)2XDVoI4`T.TM</,Fj`*4lf5$##nPsg6dU!
%Y;Feq*7;flZ5.%BR1ImkVt4n*hJH,W).JY)'q*G6rQ6f#/.3P*2a@VpSLW11In2(@-o=b9O/+,2K;4L"-Xo1SObZTk2T71+e64Fg
%XMU=9e'o\f`r0=7-bDne\:-5h'sg\IYiFd15+d9b"-KA\TS*[HoPR*Kg6HlnYDf=ohjYrMH2;Ue6X]8f"_1>to?o'>GTr*DaW[FZ
%I[YSue(Gr%Y:?WbGVsKhFC?p6;jh;0')p[__Vpp>V[ndnVhPp$A7$mK"dk=S?uVF!i!,se6b$%d,nWo^\4D?oMjja<gc!'Sk%nAb
%k:**L,S+BF8Y&Cf3,=11<C^u,70L_9fqo>f8KLCnQ(tGJRZUQ'l&;@38o=VZ<+K%qH3Eci=@R"/a=*mU5aM4Nou:6*\!fWS.<u.F
%.!3MT\V=T2p9gZ<mGdS>i,(=V@WC+%_Dpque*9_W-8OEX`oU:,g3gtB;&=LBKK5]i[6[5u?\bI<nhhB;()J"]:@4]r,D6,fW\n^d
%mD*))c$6:,Qu=6grG=!W.JeQG3\iu6J!?'f6-s_JV"^6+D1Ys5Mc9ro\%Wm#$'jcA(:cO+Pa$8K_5TEf*YT\A2BmuT]%q:W#8"k[
%.63S3S*L87,[T0"fjCuN9aeEEZ(UK+_WnI:*ieCG'3_[nbp%k,TdlZ_1i29_>l#+IjFKe`Z$S?n,3?kO:J%8mDF-t,gEa,GCKF8n
%6,FH$kgap+$oR9&:dOa*<"Oi64%+434QG>tD<gN[-AkO)ob;]!?sXJ5,.*$Pqm6uLBWsP:?V$UcM*7^a99(;b%<R\\e5aP&n[E<D
%hGH[p$$p?jA(*cc#FR7bN3W/U(p4>T^4qOZ:L>#.;,KW&GTZ(Io`2TRi4DXcqLFK^'u)7_28*%5f?[PRl7`f5[BB7;k(e@J%X-Jg
%CE*-k3W;`N&>K0;/HKOI_L*tf@i%_.r%i7AlJfB#X^!TNNQ=\-Ydsl4`13]"j<QHV\;+jD4o)=5!i,E(>GBoS5JPG7p!pQOOI>ao
%9&S,!_ps[AO>]N*a?[LB$Sk?nnQHCBYO88>J$Bt'o8jCU[2_#(&/q+_iQ:;3VZi2NhU2%`$fZCQ*\Pd*.jAh^!O6F19*44@5A4r+
%91"s[D^3l&3:86cnT6@?,O">pp=H%cW6m9sE`F(]dbqQOpLTHu"0;73.eoBp(OrtF&sRsLNr-+Q.>34hbMr2.]NuAgB2-`+Z;iD=
%D9hiKZMA@B8Q<8p[(?[7(eT*Qbo@CeOQ99-8q2Wr_s%NdYmVI=Tgk^MLQF8k223`4J?Wn8`J@tNLX.1:9XD*"j3QE-31?++5qQ/L
%j2Vk+UKbXPgP+5Z_PBf7E]6Q;+pJTo>(s0`?sfiCM2oE$Qkfg5(lm2'e*%96Ar$&^G"F5>;4'jJ%I]+lUjWPki%[j_D?lS%+lg(D
%neBVq\kNtX8l"YD\#tg*Ud-I$`?:,KN%hV\RrnmRj&Jd'TWkDbR\(1d<.D%NE>*[cTaQW_#Ce\^rAg\\L.]FfUs*qerA!D#rIMIa
%e/gr?inM9MBU'DgFS&Zti;_9rEnKr:%2eT"W"ikkPn)s;!C<5ZB-=\9"kjRQj!NV"b1eUdXs\,ppYa_sJB]/i9VtP?iMrU:;c'r"
%-gDD&T`;O#P1S`<,\7)?;BcDq)'X%n(kV1U-o7SJd4\cl\HUtZE@tqK[U)=).1ON<]HB'@6(QBGqX[ujgb+a$`Z1Ut.;"2/m][*>
%EtUm4RKGjcPiuJAC2X`'=@'c&[JnL=jB#1I@tT'pIu."$98ab2m@f%lm=qH_K*K/t$)7J@5G6mECS)%"?3qtn2b_Kt8dpYec6aEp
%<FG!_VRF_7nUk&eX)7,M?6)nt`p?%%f&.*d&JP:j+5E(?oETXqCc'2WcK!^JiXGdPN<$_W=@$l=.>WMF\\jINNtE6"-@TfcV=Jd1
%"AEB,E*ZWY,>HJ*R6u2I=cVN9[58Lnp8K6Y]KeOW:7\GbR5b!,nGX+,mC.%;T3k7@FDb<#DCk;/!kp,k%E5/](.&%H#6ug\OD9Lk
%BbG3ETMgu#<p_K<MbYs+E$e'9-:)L6qhH,4`:?Y0pJ\%`7V0)N,p=$NWWEM2F]ZM9Y]1Cb#7,N26i+Tog8p)i&J;YL2o1q0GnqgR
%2r)WLHu\mU7_cc]_hG`QieujQ2ZnI^P%5a'Z&oQW%HT:Mk;)'?9SoZ9%0Y=F:;%:"U>%;C^Kn5=$HYHqJRtZ\4hVep`/!Hn:c)00
%8DH!Cc8C=FCOGao9uToB?KbC<f?S87i@[#T869oas0sCl[6bD#kUXNn6cU.iQ>T[Xi19L#fL!k14>*)L,c/Ek2O/9ZT48Z`bV$:[
%fqdpY5qTM.L5:ccTrI0gM+kP@]@"fg,U3J]];Z)EnaPK]4QY5(Z4]`cFfEI?fK$:*-j5UML9d5R/kH1;9I+1.<n)??\'mX2l7)r"
%9o)CRosN<U!?;&6GFt&db$t2WgmOLaZgG8TZ62^q%+TdmJ_\pdS9B?eoZj/YGKd6:_$P)M33/poDbYOkE)a93/(XoH;^n31[a(Eu
%*,=fhapR^;BL?mo('j-NVSO(lcjpt_l4G9=qU=Xen1+"u+e9tmZg(F#Hb:):"Nh?@@&hsg.`UPN96P[//>OX_o14]if!.UUdHi\W
%=7e!b@1l/:)2)X$M)8hB1sEql,b_3)SIjqAEt&GlmQIhRqe>i66):'5+kn;@7.tl,$:dFSF>HU4?dXdT:N=4%_/7r3JsF;IimUl/
%-V$+WpF_AldQLdI:\%b"2%p#ib#>T?*iE:`Tr(ou,0@Y:W/r&2dga]X<-G1LeH?se@5HqA?ur**Fb=d$US,nlXNK)u1.\OKjBXEf
%Fq3u?J^>R=!YW,`5$)rN?2-IK`SYLDK0=AlAb]deEu>pDTT*T>pG$]^>,elC4adN')1$nGO*2S^9##.3%a$Gj6o,[+(h]Y0ZcQd/
%6:C5@EZ$]YR\nMN_!<AG<1;1FA2]SL4KdGU4bC..\DNA5c_[I--`G'^JQ^Od'(%PYP:*Eij6of$4uO2Qkg[L@NNRs.WoE#EQ2$n=
%>Y,9gead9U)ig4M)`9+116toKf`3,'F^n)Ckr[.cX?(sQ'L[>KK!'6*SXa/H=b1c@2Lnqi30%^(8$Rbl;MNL3X\7fL;40V58gOE&
%a.1j=)b`&lAI7'n,86/!<7IMWj>UR)WJ)sM5`C%r_!$b39X)\qa'pd^&G/Qt"M3.4aI*ff=:UM,ITQ>W[%_maZAKgHliF$Wkg2F<
%R60(2UJ\@nMGQ_u/'SR[(60?@X-7j,3)b0O9bG?*rLIWa&S.'m/G[#M@-e)E<2]$'3JW%*9iKZ%Z=Z\!)8shmg]Z:s+sQG,FOS1L
%k=:&;V9RZ)-qM:EI<`*;l`2rf1_KlaOq8?i<a'/Z[`U5A<A;G/]U@uNk<)c)_TKnV&cnK%G12G]IL26WW=3NCX)SQspFNa=;>upt
%IfmZkjX@q%^>QF=XeRpK"g-NB8XSF?C,T7>cN0#Ob2'UOXp_O*h,V%0-:?b8dqPma/2o5FJFoO6_4T76&_5LE?tX>S%`JVh:lZ%;
%&*(ngHLA#@$-4!BM"LV$D0S!aM)FTm&4ST=ZbD@QW[b0WQ0#.5<D&VR__O`LJW+F><$eaR^2'L<EuC%V.Z>jp`/R'uBRH+/N68l)
%`ZNbaQ'J/^*qYR6,Re/1f3p@:$f`?QW"RKHV+M85+!*7p"$L=Zf?"W)ibk>Gd]q_?,MVm@^P6#C'B$bXSU)F=1m*`r^B@t=%e:.8
%I=45e1Pp'[%g">"BBjfi%89L5G*\'K)<'<6T<`Ma8\1L;Npp;jc;[Q.Z9()X*ElrP3BQXo4P"]1GE[5e&4X,I\(tQKJVd?/Pso*o
%8cOVi6Ah@-$Ti=0$;#!8S7_(aUnD6A`beq?&Auu9GL+jJcSFOrBkiX,QN.OdQ>gatW[U#WA0HSW0h%lM%a5oaF5--]J^8DU7FP<F
%#P2q`as)_Mq]/9>l-aWKp!YsAV^p6+^?,!_hU6.%<=J*E"?p_IodtSKM2!Xb,!JLq/qPNhU$1W;a?%$P`Rs,[XABa<)>elR9[6jN
%n"omu!t:u2ICkdk?NO+4)>BumWWGriqB=?=IUOX6Jnc9Q^#tdH=`l,h,iH-":WL&MB*`YdNcQjuoi(4N^O,iE*:ka?*U<A^?abGd
%MfkTRJH:#\_*e@D)/l4C`.\L(.+?QR%U.;MW%X2:31PO8IfAkZ4YY6*3MLrHDEthE3cRNp5n1qdi8%m6A6VI87ktSmSEm4Z[_@`"
%JrPV0CaIa7nIZ^qAB0HKhdpLNb;8?\."$R8IW;B?,P%<J4o!\@qs&mM-AQdb6H@"Bjg_b@`>gCLG6MC/;d&!+8"r8K/V]p,FNUan
%"EG?M7DgOeRr`q#*(03[ekDm$+C%'p0G>tCFHp.m#+G2Q=38P3fHRmIANV"/++@YZ5HNJX+sWn7+_^_E]^nAcG"4aY\eG.@/C"<s
%9/)NC4UGF)4+?MX![$CQ=llSpnrH7M\K/;MhX-tXkfjqc7%Utk905LP.LF^C0AJim`:Shr8T>CkLf!eaO4V/IO@`GPKt[0?q-a@c
%(7h%jSd-r[.VeoJRp#[5:LEp53K%gFm13VA8l7kY3Wb+'IU)S@1sD[D2AHdWng5)'.>gj?XL&SI^1oFQP2eFIY?ppq1X`NYPs0(9
%0T1oXd1joglb&sJ:pH@YK%E>H@.>)HZpZnkd3Rd2`gR\<BbP?,$i>hGB\/03Na;I=-\Lp-EE7ADq"!=nU@@!;.lTKa3E3hK/36RX
%=j8BJM&#D3+Q&tW:H!JLL,45W>Wc/Sp*nttHS^9HQc.7sle:TL*=@ph7Rr?_I4mY<dWN-;qc<Z354DoDm[*$D^,Zl$HXIS2'clhC
%d^`M=pd6pY\u=jO"OamXD4jmjm(-*YfekV-d$>n?TN5!h&Jak-3".Nm9UGEQX@,NNC>1G)j<[ntls&X&)&"SkC20N7<T!B&bZ\gp
%4%\3`\&B#".PScLh8#,#'nW+@O$ip>!.8?,P]j.4?d0#V/b#u_rf0$tGL#2X/,m/q4X/.sQ3u=3SX_nY%:hEiFX?S47(kj&*%n+X
%M.8LZ?>`e)&(A/BQCi;&")sUa8Lc=(5^3/`3QE&>;$`5eYmndlED'kBiu<J$nO55(YkJSM6^C<i,95l$a_hmr@"X_c.$,KF&rVqe
%Gq_ga!R,qIFUqV,-n+p#D\*9'!U:-.MS+.=.&j3lbf<3?io_,]ZUWAlfOG_QoPrbK\fDB;GTZ9sk__`*$,8Q*Q%S9*7+RYj9PklO
%6""Pi<h>[(90^@+2\0\Ib4J&'pRuAfLGl;I&;2%\L*GdjOhQdBZn*uu1Erk)MGD-j[4q%C8C_/jar78!aUC7I.TnV,Fka$;Fo2fg
%Hp!T*X$k](A<27]\;nQ/]d2i=;=GtgbAQk&Ob'U.a<G]\Wsc/88+VZ,0$mT<Lqi`$oT3aS2E,BDa<SVc+I`j@#A<XO6u_u>]*`(=
%j9Ke3+oR%YcG\a&8S1rVU#J%JONnGH.n%M8.3I8^%p,<?"Fuqoe>&/jUssnHe9EsW;$'bn*ES[7A:'Ps&dZI,O!Xb82Al%dm<`"e
%$0In,)80E,aG>jI`4^`bH85^(H>gL+4THkm9q>:RJhaGiG8s9=W]TtJ:ej9W^T^G<&^YDX,TTF&_jDUYMY[$N`=3;U5SRCskAJL%
%a9iCs&Vu;&:T=<V_?F<8r%4ua=u%pip8W;&JWLGtCf0.>e@`dB6+S!J"aW[9SS+b'66m[?Z"jFD52UYsAG]EF5o8KZ2gu^-+9"9=
%YaI(G7j`Y`E4oCE%!5]mOVX`)lQ1HVd[1`)HS4f6YIYf1cgIF.$C:>)ifR@dFf>O.kl!&A2@qI+fXOS>5(i_AoRQf(U-?*L+Y0;B
%k)R^B"ouBZI6Tu<QRU-=4]a(Qf_eBC'ZA01Wabgu?#jCh0H,7ZaGWd!"ZL@(0?s]c&e[.W1Qe?GjMNYVTKS_ElMhK(0eE)UP0^AL
%*Pl]"3gA7Wf2Wf':a'ebaX^7Gr\HkE%>^g"BclR>8G.,'fqg"o9QVg@ODZ#n%\BSj)aA$4%DlAX/+-/>56U%eCG'/uI3*M^W&$2D
%-9Mb<IMnD=+e44RJ#^AY<_Ic1M2<[*&,0WI_<:&fF]C?."qtf)&6M/"TO1"F+8aO$s([,"2\iRjb0i&<hlqkg)tQsl9LZ1p&aMC%
%)RF/,BAWkbbgGB,,)N<M-/U2'4ot]IBj"A;4_4E/V!c4;$sJ?egj]f&^7$Mc1UQFS.S\\PlqgC;B93&2<]SY8%d.F&C<YB"7<!`r
%)jep2."VF7-&C"eGd9D*3EE`ANe@1qP1"RJ(,W&iabOE9rT>:T8gNq\&6-`PJtT>ZW(nGT?t<qp=HFRrIONqn)Puk<_aAFfE2-UP
%o4=uJY*Stj@1+?2jB;Wha;X7NWJhA8"_CR2o'GuXqo=8XYi.d%X#?5qX6DB<r:pi>:d5H;*sHX,R:0U%WmJ0&Ju'MOg6G;#N_G8D
%4$R&%HJqR2h,Xj4:b%#-o:bBIY>W"5b5Q1<GU9@\9pM7ooS_r?)IR+/W&l9T(IW8nj2\-m$&tcrRa=@aGkj=l'N*cl5&:XSCT]:s
%'%gKd-aIgAa,[7-<q1?97BfML'D\b?Y'5q'mSPpr-.Z.l]s+KFBpZb5b-(%?(m,k)@?:18\ZD:`[XNYQhf%g5hJ+@bPWi.9IDE:s
%96F"[\kP:on_9d1WW&H_)$>83)a<O579B<IKY;(sf?`*s5;uC,l-,7;C@lifr0.H6o\iN%WB\"IkEstK]d<;rHN:<R6q+6,T[aCf
%m#S:nOD)r8YBYlWf9bZuF5bp+!PE5OHV93Ke[$"f20%VtGc,ueMeq`2`]YoBdGC%3?W^j.TdZ/^+CC7JB[`W;V/"fg(jAnr6\Ug=
%>[oO94`\J=Z?dqZ\U+D!TD+DVOHEfV>CX6oII#S<Qlb-L.30f<;t4unH1EWVlQSN]gTMAQH`<e5L&t-=nhpFEs7S(oC42rcP%frW
%&I^lf2_2lj)m;(Katka2*$GY:T[l:@ljAIgd&K$MU"JoE[oh.7S,]!*=O(98#+H6-b]?cr*\cYu[1&S?/tY\n^=^aBY<"uV@sRR.
%B[.VuSe<!R66=q\/]sEY2=*XUJKRrYp]1K5eD?<q"erWlJc<Nh.d(OC(^Z<1Us;Vip`p`DLtM4QIUPo7"ibZ-R2O2>55->\0skRH
%:@%H'6K4YMO4Q^Er@,5K.D&3ui_#Q#A/s>QG&X_Fj6\n-*?m&K3Kl42+Z4KfFDOJO4<WE.3a!)A#:#JJJa"Jjf*pU"XWC$gD5)"P
%8(Rc3C-7UEOs<Z/EU."nRN@bo0/,:@9Utq[IOsPW+pk6T$0[:1g]Wo`Q<5aCe(OBo7h"SkP6[K39dIXp28>GO\Hta%c-TZkp-t76
%Huq*>Nb#V>b],6VdrYEm=t3s*=i7X:;,>AY,&];2\>s@+s6M96I+FhEN)bUs>;9B>/C%p(&;s\3oDYOo,]U6phcHI0V"D?lS.M\(
%VfH;Cl8*_=^j%$hPs.$1^mdGk8VtU_;Hd,>"-g+?=:(([[Xi%UL7OISp/%eI6`<V2*!:Gt.c^Y100:G88o%+c@+!o*;L9`-Rf_cS
%_ATrih&S\#&T^3Gk3&*p7>79@hiln(\aOD'K#F_Fn&_o.a#h'gWBaIs^Y6+B)]BW^F_<@+A$^D=M+S?uF99PB6`^UT:Q=#c$ki<u
%P>Cl#mjpeWmb/[_B&SrEeUfDaBHPeaOdFeO[o^N.6luq>^6VFe+;!Jl*dq'[\e]:i'-%L%$q\U]4nI/=Q,[4^p_t;6!LFC&HeMpJ
%[us\=V(#FX"'X&pGVo)XlR?h>p1Vq7f/lKX-m"&KAqrA>mU8o3-h*=$s'fC:U>7':qpg^edri8)q.[5#O(%HK!Z&o+<p^39,r+'=
%=?(?Tng:7J+E7_;$4"Fi)?SaXXA=JCN/0!oAWh-Acik`dV:\cA^a;Uc\1,*k$+S%rd2k9YPa*.43r8.KJP36s[m8GWmo$W!&\(2<
%bJrXOY"DOih6T'?im<k43^Sg5SK)V5"-e!fB9d!XAo(^ro*0[B!B]LARRX>anJRg!\*OQdkFrHL#9k$'$=jL!Ra`J3f$6bT5Rmr]
%EbtX7<.JhX!hGH<.1Gf8o"RP4DR<#X-#E[VWD:DaYG<au%%>M13f?<b8KXppS*=T!4gX73bfU+fJ+OPK,o%$;;i1;AC-4=HT?^0k
%boC^-,`>`2RQ;ZC[L@tufUR*S7O4MCP(G:27-O(Sf94;A4j\AZj#IR>73PerFPS1f>YI1p8-)aAfmr-#cHs3FNt8G7K/E(5o.ehO
%[uWaU6NK;M/ao:Ek54&J"088D:C[jn648dC3$cbl;VdRYlr_,22$])p1]t`"0^^ZeeV@ngj9DTG73s/202KN%N(G/s>@(7KJ46^#
%VGa5je>oOH)**lYfSJXCTiRrHEeK4:>)/=/b(-JrfS=qS=DgR]FAH67.pG=\`t%YLXcqYjJ(L+5],KLh-M&r\Ike+rDF4]3Hl^FN
%@g)@//?*Bf@M_m+11KjsEusPPdL,cdRom9XaU?7,$K:4u;N</&%aX*1UWdgrS<:g^@hiS9o;#2*S#NT[cHF869CMr-]j`.N<7Iro
%Q7`_Vk4"'m?RK7p-l1V5:1d`%$H?qRUIj9n.O1Q'@eKNthm9Xg>r,&7,OH&7?D`oXSP*&EM50uIps6pq+R.IO1[+KNK`Cpr<:;:+
%c/Z\`;s!KIG,AW*J=8Q/d^rAQGSFdL6j<On;+r%U91=!P!UZN-Nj#JE.pRL*`mtFCIX!D_e[r/.a>=\".`fGW<HH)6Lu&c?d`Cf3
%5H1?cq,tZ9,783]kOlp^<%%l#C=lQ)EMmhMTcA#\dE_=YbBe"hL;:LPPf_D6=KCS`%Q8El6qGOtGF]XDTWZ.4HM=5.XcDaLF_91,
%.C-J:(Ur;8k\u_7I%s<9\r_g$E:D7W8DERn@!rIG']'o?.?/rYP6_,FDte*[k&19K4H9No*Cf1o6<meJEQ=N0*g13q/BS8Z$jq:"
%s%fgce>W<.;J!e?Tq.J2[K%`aMT04;O8^*+%_.?9:,VXfPOi?ERUYW(),1ChDRtRmjTA+&/T<b4CA?+2RH,til6HU@@@35(o0ffa
%2<9:tkpKAbVr(M=KV0RWL=df1LR<TTH5F#)$8\U"bLiTA8uG7%2Hl&pO,:Yk)3LV96g0_BrlPQ=Xn!TQRW.fol@XnZ<'u,ClC/d,
%BO]R)63C4=kd`PFqHc[6N#[2k1`<=)$k-(pZkja'V@b2bQe/5\Z%\"TVHSV(iar/^$P+)A(t_=CfHP9M-"rt7iC*4'%NFF/+Y#:7
%=4SP"^O,g7d1ehnUa-fCIY-6e9G#](5s(Qp];.@hM-P0+8c@+^!";Gs6qS2%Rd!Dj!MEdOFg>`;:mA4e@\jKL_R:gFp=&b%31pgn
%[;=1lZtoRf/+j&Z!05uW*,;cXV3*pIKZM,/*9l=?DAhl_<1C34;(+i3-ikR>`oPUSP"(U92Omrb0c<6,n3E_MRDP(jMCok%+\s@0
%WcQ[pL2\g2@S'3*$#ucOWSNG\-'9A]M8Qoj,hfqPZH2BIq,42^oa<R2^HKo2P"8&-;.S4hW"1Ic:cM\/r*r#I$/#=516!UfnEPp#
%0JMoCah&\lk,*#^W$_`Se1MAa;GBtd@2P#gUHrZ`gBiYH>"(j(2l[`eC/F95M'pCo?"`[<nKLK`.%DeDWV*YkG>=qad.30h(W^?\
%_+P?#XIa&D5sPMZ?#=J0L67?WNl0i,@W>-Ml)Q&7AB>(U*A67iYf0S`pJa"0FT"ri$_n1EdmV"F,"/>$(m5I'T3%5LBHoIV,+(0C
%*D7'm]lZWSV+U]'c,9E5Nd15^MOh;8,F=*5Q!\f]l2X&/2IN9%qsdC,5Un+de'0$uW'-\rHp17,,.&hCk_VRlW1b'?8$RTN(*r**
%8PPU#P>?(!$$\NnFI2icAud6$Pfro<!XdF'_i,AsPP+fAbcd2&LY)28.?d&MUZq6%Z0"l5QW8*bffIZU_k`pdXQPJDf6f[JB*-,Q
%i-IrLTgi[_eHD;q4hJP/>=;1!9X8Qi]EGir+7%ieK$cPhZJctYE=4'XKK.gOH1EUha[B9N36f3@=`mM--[Yq%qYBh[#tP(D:oJKj
%hHSV*T'et+^bu=pa%KV%:.%cj*9QN8&fsb7.Z_rY%5##s&="EnaFPINhT)eH/HY)&&j>*:_EuXFKZoSX"IU_X",.iVXFl*r]8kOD
%Ub+D1:*o1E@('7?'@s>?ES*=-qM#7#.9S/5IhCZ)ltg9hGW4;a8i[K^0AlRUfM8Y[@t'&pk'%+.Nc>N!qA%KJ'K>Mj7c/V6*cD5r
%7<OimcH*g.#J2E$Fl;SSf"YgiFa0+>_F5JT$aC"3Q0K\X99\qh:dVBh*3lc_ocp8`\muLRn-f`Dj7/*$h6]Ctad))N&B35mhsU?)
%1iu7$jRN5r#Do.9du[#1o9MAdR*MST*Lc%@`;<7-CD.NL-3CO/L\!#^f/J0Y2dN)_LC13Zn8N10_,BXBVE+%sZ,UK-G&MhUEM3Nh
%3QE9q*RIlm6H)?;R#2DrGloX;3(,D]PtU8bk4VWZXmT>heT5oeVAnir?Yc)*RFQ*g]$k'E2f#F3d^2[jhi#U5o\9.X];.I'qs#=R
%X+Q/abnhbY$Lp(h;G%Vgj3n$UCSBPPZ+AIHmod7d_2g7oHSPnhRrKerh=1H0I5.^Yk_qqjK>e`YT4=R,'2sdkRN0A.V^/`:Sf-Q7
%OTEJ:6^P!kQ(T?`akfC6'9fAq3)f4"9ETmZLR0!r215KBS;&k>gqe0IhJS,1fdjg[+:Mrt*sUYDJ4=-Rb7T4,cX[#(iG8,07;:gf
%C!\u.j$$e&6c49_.H-fj^lGYL1dS#_cI"l@Uk,+(cG''^74\di@:_^Kq?9<to0q-]'B/-qdLbk^IOkG5TEU`:0qsdbWBE(0pqdXr
%(P.^9jWs4cj?lk!_FjdN,0V:h&Rf>.b\WmaH7**VIt%BoD^u#EW`una0aL?)qo=NG,s=Po8')F,(98s$gL"-LL/T(%<a,#k*ld2o
%q!3W_HN&80]JI2<LTPbhE<e!TWDPLBUGr@R3d12%P]3A6+<oU&AXEhZLg6p\86]*lK-:PlBK(e)D?PV].]1pM@N*XdL0cf$`VZAS
%g9ug7ZchEf_j'Oo;dUgJ\grla]i=STL:57t<_9ZVD/ffqHJ>q-12hL`PC$>'+;J\fs3?gOoD=?cdDY.8EY6WO31<',0[3cu=L_fD
%Nl!tXb8OO=Zo+"A$52r&*q95>G#O4NabXZ]Lnhjc,s!Gd%iosP,=Z`,7t?qW```cO'E6Bb;?P'-Q(U)]b1]f:?cgkpcNiBf(Xi%m
%Ng`N=B!$q!TD08dQ;_i2fL6FH(<;Zd\YWC.IL>\E*!1td&sBLq`ot>30j82V\jAY1"X[Fi;&T0m\^ob)VFYH@$Ls"b,:=0n>#^[*
%Su,_AohKFPN5"]=!Vn!0?e(']HiQ/^l?K!t,nAJQ,Gh8,Tc*rgc@N,Dj&j0Z;a@]0pgf6F,"W=mo'S"g6RH5EXWd93H+p![?-l.?
%eUb?R"22"]cF&(3T[E[6\j8nL;0P]33@U><Am1_0eQQIY,o#&RqfP;2lG&L7GM?ujV@d3XaD"#bMV`lXbYp$SO-R#0fV-VIf)j%j
%hTc+oW[:Y68?fX=[.RN)7#mJl-Vh@urTLcDK-)U,2`AFP>^1OAdKS$tnSEm8fF@aRW+$PaP\LL%6.E(#*)`%7)Pe\Th'5<b;C9nF
%_9dtJM[7A+UTCW=%?Zge)#>[9Ac)4bMDat3"pa8GNj`"-Y%[DujS+J.F@_RQcJ1B&BKAXIDTQ#5=iqkcp9jU/RXpC_/bfPn)-$H%
%VjS4631&17*`5Iu#J-:$<!+&1*D_IVLT&\O*4"<F)ZM0B@c`MV58Ejl;Wmb&&kR]s'FLZ(jjIag,"gTj\N$-#13[%bY8s:.?='(T
%F'G8"dEel%P2?/XJ,,Z@e.C,#2'c&Nc)Y6;V.4b=5J/]AlH6M^G]Aouk-!XhIWFlf?YPq\oY5;Vp[e0m`7s1@LOL;O+oG6WTupsG
%'Ut,WqTJfr7F`'`^O,\F+.nV9VjHQ5gbc3A>2s^SW+Gl$jWTmoK[$;8A<uAh$CK1EMsjslM?8W2kuPgkoru)9OSLgG>X(T8&-d;X
%5]Pjhc;Eo*_,+t'VqH]hUJQ$#2,Mh_#q37KrMAbt(O9TkoU0t\\b5oVNis^rme\dlgW/mpr1V!?L0f]_h/sGZ2l3\\-'BD;ZhJtL
%<%-o+A:)tbU^ZA\*-<#rh"SZaKiO$N)/,:8QW9r39jn@mU!&[*Z@3l]fP+oLME>.ZrX7l[kML6*Ggh<?`F*j&pW%?QfJ?t#NEETU
%"mUXYQ%?!["9CjI@:'ZpWjNa*8kj=)i0<sILYB&e7qI^#,8Au;1Jnpj3$g@HIIGUP<?b==-ca5r[WHuA0&&2dCtMc;nF^"6nT,C5
%$fXun\f>ARlgOD:s4a1FpuhE#hu<S'8U0T=",(%&I#&Y.o[f7FFc6N1hit5.i=q9_;BP1ne[CM3UmQPkCGG8P<)u+,k"s%>BYl([
%3n6>Z%5j-RVG1c"PTNPp#?0XDEJ*s].cY"iU*d5]%[g(^A(#Jq-*!LpF5*JO+nEh"B"YtZLR2&0N.qAiW!'4f&]]/>rsko\^sGf$
%?#6.Rq;J8OR2j%[N.`1nphe)1&6e'7W][ll]^VDbeW&DZ[E[l)EmjaV9.CoqN62+.5\H6$3f^7iq^qb(S#V3\MZ;mPWi@;9!/e#/
%q(=7e+`tmK2AWf=atoqp<N2A;?c.(=P2Ep[.#/`COf5Z8hm/u9"'Z&g[+Foj(SWGm&lkc"812Of>8^9AD;E);j(]$<I=cJ_'#Zjo
%Kst#TlCk:oO'VtJl@;WVeA5BP&W8!*#89!#F_\KA<':qKA7RQrlVR)0J?sB:E5G"'s7^&<I3mPEAnAhdLGo)"GDG-ArZCP-q>5[@
%Y93c=o:Q$[GT;IQq+lM<a$9N0J,\ImIJVEbs8&qunR)=ke">LqnXoiLTDI$O*<59Z5Q:ISs8$[6rQft>pTOVa^].(\r6b<FJ+GUK
%s*t%:J,NIK0@r71;#~>
%AI9_PrivateDataEnd
